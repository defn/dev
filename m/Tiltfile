#!/usr/bin/env python

analytics_settings(False)

local_resource(
    "code-server",
    serve_cmd=[
        "bash",
        "-c",
        """
            cd ~/m
            exec code-server --auth none --port 13337
            """,
    ],
)

local_resource(
    "hugo",
    serve_cmd=[
        "bash",
        "-c",
        """
            cd ~/m/defn/dev/www
            npm install
            exec npm run dev
            """,
    ],
)

local_resource(
    "temporal",
    serve_cmd=[
        "bash",
        "-c",
        """
            cd ~/m
            exec temporal server start-dev
            """,
    ],
)

local_resource(
    "nomad",
    serve_cmd=[
        "bash",
        "-c",
        """
            cd ~/m
            exec nomad agent -dev -bind 0.0.0.0 -network-interface='{{ GetDefaultInterfaces | attr "name" }}'
            """,
    ],
)

local_resource(
    "k3d",
    cmd=[
        "bash",
        "-c",
        """
            set -exu

            cd ~/m

            # deploy k3d, argocd
            rm -vf ~/.kube/config*
            env KUBECONFIG=$HOME/.kube/config this-k3d-create dfd
            kubectl --context k3d-dfd apply -f k/r/argo-cd/main.yaml 

            # dedicated kubectl config for argocd
            cp $HOME/.kube/config $HOME/.kube/config.argocd
            (
                export KUBECONFIG=$HOME/.kube/config.argocd
                eval "$(kubectl config view -o json  | jq -r --arg cluster k3d-dfd --arg namespace argocd '.contexts[] | select(.name == $cluster).context | "kubectl config set-context \\(.cluster)-argocd --cluster=\\(.cluster) --user=\\(.user) --namespace=\\($namespace)"')"
                kubectl config use-context k3d-dfd-argocd
            )

            # switch back to the default config
            kubectl config use-context k3d-dfd

            # needed for argocd password generation
            sudo apt install -y apache2-utils

            # wait until argocd is able to deploy to k3d
            while true; do
                # patch argocd admin password
                if kubectl --context k3d-dfd-argocd patch secret argocd-secret   -p '{"stringData": { "admin.password": "'$(htpasswd -bnBC 10 "" admin | tr -d ':\\n')'"}}'; then
                    # add k3d to argocd
                    if env KUBECONFIG=$HOME/.kube/config.argocd argocd cluster add k3d-dfd --yes --core --in-cluster; then
                        break
                    fi
                fi
                sleep 5
            done

            # deploy the cluster app-of-apps
            kubectl --context k3d-dfd apply -f e/k3d-dfd.yaml

            # wait until app-of-apps is synced
            while true; do 
                if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app sync --timeout 10 k3d-dfd; then break; fi
                sleep 5
            done

            # wait until vcluster is ready
            while true; do 
                if vcluster --context k3d-dfd connect vcluster -n vc0 --server=$(kubectl --context k3d-dfd get nodes -o json | jq -r '.items[].metadata.annotations["k3s.io/internal-ip"]'):443 --insecure --update-current=false --kube-config-context-name dfd-vc0 --kube-config $HOME/.kube/config.vc0; then break; fi
                sleep 5
            done

            # add vcluster to argocd
            while true; do
                if env KUBECONFIG=$HOME/.kube/config.argocd:$HOME/.kube/config.vc0 argocd --kube-context k3d-dfd-argocd cluster --core add dfd-vc0 --name vcluster-dfd-vc0 --yes; then break; fi
                sleep 5
            done

            # deploy the vcluster app-of-apps
            kubectl --context k3d-dfd apply -f e/vcluster-dfd-vc0.yaml

            uptime
            """,
    ],
)

local_resource(
    "argocd-forward",
    serve_cmd=[
        "bash",
        "-c",
        """
            set -exu

            cd ~/m

            while true; do
                uptime
                if ! kubectl --context k3d-dfd-argocd port-forward deployment/argocd-server 8080:8080; then
                    sleep 5
                fi
            done
            """,
    ],
)

local_resource("hello", "nomad job run etc/hello.nomad", deps=["./etc/hello.nomad"])

local_resource("demo1", "nomad job run etc/demo1.nomad", deps=["./etc/demo1.nomad"])

local_resource("demo2", "nomad job run etc/demo2.nomad", deps=["./etc/demo2.nomad"])

local_resource("demo3", "nomad job run etc/demo3.nomad", deps=["./etc/demo3.nomad"])
