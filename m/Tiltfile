#!/usr/bin/env python

analytics_settings(False)

update_settings(max_parallel_updates=3)

local_resource(
    "code-server",
    serve_cmd=[
        "bash",
        "-c",
        """
            cd ~/m
            exec code-server --auth none --port 13337
            """,
    ],
)

#local_resource(
#    "hugo",
#    serve_cmd=[
#        "bash",
#        "-c",
#        """
#            cd ~/m/defn/dev/www
#            npm install
#            exec npm run dev
#            """,
#    ],
#)
#
#local_resource(
#    "temporal",
#    serve_cmd=[
#        "bash",
#        "-c",
#        """
#            cd ~/m
#            exec temporal server start-dev
#            """,
#    ],
#)
#
#local_resource(
#    "buildkite",
#    serve_cmd=[
#        "bash",
#        "-c",
#        """
#            cd ~/m
#            make ci timeout=3600
#            """,
#    ],
#)

#local_resource(
#    "argocd-forward",
#    serve_cmd=[
#        "bash",
#        "-c",
#        """
#            set -exu
#
#            cd ~/m
#
#            while true; do
#                uptime
#                if ! kubectl --context k3d-dfd-argocd port-forward deployment/argocd-server 8080:8080; then
#                    sleep 5
#                fi
#            done
#            """,
#    ],
#)

local_resource(
    "k3d",
    cmd=[
        "bash",
        "-c",
        """
            set -exu
            cd ~/m

            function main {
                local nme
                nme="$1"
                shift

                # create k3d registry
                k3d registry create registry --port 0.0.0.0:5000 || true

                local restart=

                if k3d cluster list dfd; then
                    # restart k3d
                    env KUBECONFIG=$HOME/.kube/config k3d cluster stop ${nme} || true
                    env KUBECONFIG=$HOME/.kube/config k3d cluster start ${nme}
                    restarted=1
                else
                    # deploy k3d
                    env KUBECONFIG=$HOME/.kube/config k3d cluster delete ${nme} || true
                    rm -vf ~/.kube/config*
                    env KUBECONFIG=$HOME/.kube/config k3d cluster create ${nme} --config k3d.yaml
                    docker update --restart=no k3d-${nme}-server-0

                    (cd c/${nme} && make secrets)
                fi

                docker exec -i k3d-${nme}-server-0  mount bpffs -t bpf /sys/fs/bpf
                docker exec -i k3d-${nme}-server-0  mount --make-shared /sys/fs/bpf
                docker exec -i k3d-${nme}-server-0  mkdir -p /run/cilium/cgroupv2
                docker exec -i k3d-${nme}-server-0  mount -t cgroup2 none /run/cilium/cgroupv2
                docker exec -i k3d-${nme}-server-0  mount --make-shared /run/cilium/cgroupv2

                if [[ -z "${restarted:-}" ]]; then
                    kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-bootstrap-cert-manager-crds/main.yaml
                    kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-bootstrap-cilium-bootstrap/main.yaml
                    kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-argo-cd/main.yaml 

                    # dedicated kubectl config for argocd
                    cp $HOME/.kube/config $HOME/.kube/config.argocd
                    (
                        export KUBECONFIG=$HOME/.kube/config.argocd
                        eval "$(kubectl config view -o json  | jq -r --arg cluster k3d-${nme} --arg namespace argocd '.contexts[] | select(.name == $cluster).context | "kubectl config set-context \\(.cluster)-argocd --cluster=\\(.cluster) --user=\\(.user) --namespace=\\($namespace)"')"
                        kubectl config use-context k3d-${nme}-argocd
                    )
                fi

                # switch back to the default config
                kubectl config use-context k3d-${nme}

                env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-server
                env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-repo-server

                if [[ -z "${restarted:-}" ]]; then
                    # needed for argocd password generation
                    sudo apt update
                    sudo apt install -y apache2-utils

                    # patch argocd admin password
                    kubectl --context k3d-${nme}-argocd patch secret argocd-secret   -p '{"stringData": { "admin.password": "'$(htpasswd -bnBC 10 "" admin | tr -d ':\\n')'"}}'

                    # add k3d to argocd
                    if env KUBECONFIG=$HOME/.kube/config.argocd argocd cluster add k3d-${nme} --yes --core --in-cluster; then
                        break
                    fi

                    # deploy the cluster app-of-apps
                    kubectl --context k3d-${nme} apply -f e/k3d-${nme}.yaml

                    # background app-of-apps syncing
                    while true; do 
                        if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app sync --timeout 60 k3d-${nme} >/dev/null 2>&1; then break; fi
                        sleep 30
                    done &

                    for v in 0 1; do
                        break

                        # wait until vcluster is ready
                        while true; do 
                            if vcluster --context k3d-${nme} connect vcluster -n "k3d-${nme}-vc${v}" --server=$(kubectl --context k3d-${nme} get nodes -o json | jq -r '.items[].metadata.annotations["k3s.io/internal-ip"]'):$((8443 + v)) --insecure --update-current=false --kube-config-context-name vcluster-k3d-${nme}-vc${v} --kube-config $HOME/.kube/config.vc${v}; then break; fi
                            sleep 5
                        done

                        # add vcluster to argocd
                        while true; do
                            if env KUBECONFIG="$HOME/.kube/config.argocd:$HOME/.kube/config.vc${v}" argocd --kube-context k3d-${nme}-argocd cluster --core add "vcluster-k3d-${nme}-vc${v}" --yes; then break; fi
                            sleep 5
                        done

                        # start syncing vcluster
                        while true; do
                            if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app sync --timeout 30 k3d-${nme}-vcluster-k3d-${nme}-vc${v}; then break; fi
                            sleep 5
                        done &
                    done
                fi

                while true; do
                    if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app wait --sync k3d-${nme}; then break; fi
                    sleep 5
                done
            }

            time main "dfd"
            uptime
            """,
    ],
)
