#!/usr/bin/env python

load("ext://restart_process", "custom_build_with_restart")

def main(app_build, app_release, app_entrypoint, context, registry, parent, env, host, app_service="app"):
    # local kubernetes
    allow_k8s_contexts(context)

    # local registry
    default_registry(registry)

    # deploy argocd app
    local_resource(
        name="deploy ",
        cmd="make deploy"
    )

    # deploy this app
    k8s_yaml(local("cat gen/deploy.yaml"))

    # build this app
    local_resource("build", serve_cmd="make watch")

    # sync this app to workarea
    local_resource(
        name="build-to-workarea",
        cmd="make post-bazel build={build} release={release}".format(
            build=app_build, release=app_release
        ),
        deps=[app_build],
    )

    # app service
    k8s_resource(app_service, links = [
        link("https://argocd-{}.{}".format(env, parent), "argocd"),
        link(host, "app"),
        link("{}/api".format(host), "/api")
    ])

    # reload app service when workarea synced
    custom_build_with_restart(
        ref=app_service,
        command="make image",
        deps=[app_release],
        trigger=[app_release],
        entrypoint=[app_entrypoint],
        live_update=[
            sync(app_release, app_entrypoint),
        ],
    )
