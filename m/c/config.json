{
    "env": {
        "global": {
            "type": "k3d",
            "name": "global",
            "bootstrap": {
                "coredns": [
                    2,
                    ""
                ],
                "kyverno": [
                    2,
                    "",
                    "ServerSideApply=true"
                ],
                "cert-manager": [
                    3,
                    ""
                ],
                "pod-identity-webhook": [
                    10,
                    ""
                ],
                "external-secrets-operator": [
                    10,
                    ""
                ],
                "k3d-global-secrets-store": [
                    20,
                    ""
                ],
                "defn-shared": [
                    30,
                    ""
                ],
                "external-dns": [
                    30,
                    ""
                ],
                "argo-workflows": [
                    40,
                    "argo-workflows",
                    "CreateNamespace=true"
                ],
                "tfo": [
                    40,
                    ""
                ],
                "knative": [
                    40,
                    ""
                ],
                "kourier": [
                    40,
                    ""
                ],
                "defn": [
                    40,
                    ""
                ],
                "traefik": [
                    50,
                    ""
                ],
                "hello": [
                    60,
                    ""
                ],
                "global-vc0": [
                    60,
                    ""
                ],
                "argo-cd": [
                    1000,
                    ""
                ],
                "cilium": [
                    1000,
                    ""
                ]
            },
            "env": {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                    "namespace": "argocd",
                    "name": "k3d-global"
                },
                "spec": {
                    "project": "default",
                    "destination": {
                        "name": "in-cluster"
                    },
                    "source": {
                        "repoURL": "https://github.com/defn/dev",
                        "targetRevision": "main",
                        "path": "m/r/k3d-global"
                    },
                    "syncPolicy": {
                        "automated": {
                            "prune": true,
                            "selfHeal": true
                        }
                    }
                }
            }
        },
        "global-vc0": {
            "type": "vcluster",
            "name": "global-vc0",
            "bootstrap": {
                "external-secrets-operator": [
                    10,
                    ""
                ],
                "vcluster-global-vc0-secrets-store": [
                    20,
                    ""
                ],
                "coder": [
                    30,
                    ""
                ]
            },
            "instance_types": [],
            "parent": {
                "type": "k3d",
                "name": "global",
                "bootstrap": {
                    "coredns": [
                        2,
                        ""
                    ],
                    "kyverno": [
                        2,
                        "",
                        "ServerSideApply=true"
                    ],
                    "cert-manager": [
                        3,
                        ""
                    ],
                    "pod-identity-webhook": [
                        10,
                        ""
                    ],
                    "external-secrets-operator": [
                        10,
                        ""
                    ],
                    "k3d-global-secrets-store": [
                        20,
                        ""
                    ],
                    "defn-shared": [
                        30,
                        ""
                    ],
                    "external-dns": [
                        30,
                        ""
                    ],
                    "argo-workflows": [
                        40,
                        "argo-workflows",
                        "CreateNamespace=true"
                    ],
                    "tfo": [
                        40,
                        ""
                    ],
                    "knative": [
                        40,
                        ""
                    ],
                    "kourier": [
                        40,
                        ""
                    ],
                    "defn": [
                        40,
                        ""
                    ],
                    "traefik": [
                        50,
                        ""
                    ],
                    "hello": [
                        60,
                        ""
                    ],
                    "global-vc0": [
                        60,
                        ""
                    ],
                    "argo-cd": [
                        1000,
                        ""
                    ],
                    "cilium": [
                        1000,
                        ""
                    ]
                },
                "env": {
                    "apiVersion": "argoproj.io/v1alpha1",
                    "kind": "Application",
                    "metadata": {
                        "namespace": "argocd",
                        "name": "k3d-global"
                    },
                    "spec": {
                        "project": "default",
                        "destination": {
                            "name": "in-cluster"
                        },
                        "source": {
                            "repoURL": "https://github.com/defn/dev",
                            "targetRevision": "main",
                            "path": "m/r/k3d-global"
                        },
                        "syncPolicy": {
                            "automated": {
                                "prune": true,
                                "selfHeal": true
                            }
                        }
                    }
                }
            },
            "env": {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                    "namespace": "argocd",
                    "name": "vcluster-global-vc0"
                },
                "spec": {
                    "project": "default",
                    "destination": {
                        "name": "in-cluster"
                    },
                    "source": {
                        "repoURL": "https://github.com/defn/dev",
                        "targetRevision": "main",
                        "path": "m/r/vcluster-global-vc0"
                    },
                    "syncPolicy": {
                        "automated": {
                            "prune": true,
                            "selfHeal": true
                        }
                    }
                }
            }
        }
    },
    "bootstrap": {
        "global": {
            "machine_name": "global",
            "machine_type": "k3d",
            "apps": {
                "coredns": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "coredns",
                    "app_namespace": "",
                    "app_wave": 2,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-coredns",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "2"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/coredns"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "kyverno": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "kyverno",
                    "app_namespace": "",
                    "app_wave": 2,
                    "app_sync_options": [
                        "ServerSideApply=true"
                    ],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-kyverno",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "2"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/kyverno"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": [
                                    "ServerSideApply=true"
                                ]
                            }
                        }
                    }
                },
                "cert-manager": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "cert-manager",
                    "app_namespace": "",
                    "app_wave": 3,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-cert-manager",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "3"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/cert-manager"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "pod-identity-webhook": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "pod-identity-webhook",
                    "app_namespace": "",
                    "app_wave": 10,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-pod-identity-webhook",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "10"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/pod-identity-webhook"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "external-secrets-operator": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "external-secrets-operator",
                    "app_namespace": "",
                    "app_wave": 10,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-external-secrets-operator",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "10"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/external-secrets-operator"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "k3d-global-secrets-store": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "k3d-global-secrets-store",
                    "app_namespace": "",
                    "app_wave": 20,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-secrets-store",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "20"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/k3d-global-secrets-store"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "defn-shared": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "defn-shared",
                    "app_namespace": "",
                    "app_wave": 30,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-defn-shared",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "30"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/defn-shared"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "external-dns": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "external-dns",
                    "app_namespace": "",
                    "app_wave": 30,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-external-dns",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "30"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/external-dns"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "argo-workflows": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "argo-workflows",
                    "app_namespace": "argo-workflows",
                    "app_wave": 40,
                    "app_sync_options": [
                        "CreateNamespace=true"
                    ],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-argo-workflows",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "40"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global",
                                "namespace": "argo-workflows"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/argo-workflows"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": [
                                    "CreateNamespace=true"
                                ]
                            }
                        }
                    }
                },
                "tfo": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "tfo",
                    "app_namespace": "",
                    "app_wave": 40,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-tfo",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "40"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/tfo"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "knative": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "knative",
                    "app_namespace": "",
                    "app_wave": 40,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-knative",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "40"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/knative"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "kourier": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "kourier",
                    "app_namespace": "",
                    "app_wave": 40,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-kourier",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "40"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/kourier"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "defn": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "defn",
                    "app_namespace": "",
                    "app_wave": 40,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-defn",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "40"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/defn"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "traefik": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "traefik",
                    "app_namespace": "",
                    "app_wave": 50,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-traefik",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "50"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/traefik"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "hello": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "hello",
                    "app_namespace": "",
                    "app_wave": 60,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-hello",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "60"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/hello"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "global-vc0": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "global-vc0",
                    "app_namespace": "",
                    "app_wave": 60,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-global-vc0",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "60"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/global-vc0"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "argo-cd": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "argo-cd",
                    "app_namespace": "",
                    "app_wave": 1000,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-argo-cd",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "1000"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/argo-cd"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "cilium": {
                    "machine_type": "k3d",
                    "machine_name": "global",
                    "app_name": "cilium",
                    "app_namespace": "",
                    "app_wave": 1000,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "k3d-global-cilium",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "1000"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "k3d-global"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/cilium"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                }
            }
        },
        "global-vc0": {
            "machine_name": "global-vc0",
            "machine_type": "vcluster",
            "apps": {
                "external-secrets-operator": {
                    "machine_type": "vcluster",
                    "machine_name": "global-vc0",
                    "app_name": "external-secrets-operator",
                    "app_namespace": "",
                    "app_wave": 10,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "vcluster-global-vc0-external-secrets-operator",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "10"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "vcluster-global-vc0"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/external-secrets-operator"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "vcluster-global-vc0-secrets-store": {
                    "machine_type": "vcluster",
                    "machine_name": "global-vc0",
                    "app_name": "vcluster-global-vc0-secrets-store",
                    "app_namespace": "",
                    "app_wave": 20,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "vcluster-global-vc0-secrets-store",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "20"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "vcluster-global-vc0"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/vcluster-global-vc0-secrets-store"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                },
                "coder": {
                    "machine_type": "vcluster",
                    "machine_name": "global-vc0",
                    "app_name": "coder",
                    "app_namespace": "",
                    "app_wave": 30,
                    "app_sync_options": [],
                    "application": {
                        "apiVersion": "argoproj.io/v1alpha1",
                        "kind": "Application",
                        "metadata": {
                            "namespace": "argocd",
                            "name": "vcluster-global-vc0-coder",
                            "annotations": {
                                "argocd.argoproj.io/sync-wave": "30"
                            }
                        },
                        "spec": {
                            "project": "default",
                            "destination": {
                                "name": "vcluster-global-vc0"
                            },
                            "source": {
                                "repoURL": "https://github.com/defn/dev",
                                "targetRevision": "main",
                                "path": "m/r/coder"
                            },
                            "syncPolicy": {
                                "automated": {
                                    "prune": true,
                                    "selfHeal": true
                                },
                                "syncOptions": []
                            }
                        }
                    }
                }
            }
        }
    },
    "kustomize": {
        "hello": {
            "app": {
                "hello": {}
            },
            "namespace": "default",
            "psm": {},
            "resource": {
                "ingressroute-default.defn.run": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "name": "default.defn.run",
                        "namespace": "default"
                    },
                    "spec": {
                        "entryPoints": [
                            "websecure"
                        ],
                        "routes": [
                            {
                                "match": "HostRegexp(`{subdomain:[a-z0-9-]+}.default.defn.run`)",
                                "kind": "Rule",
                                "services": [
                                    {
                                        "name": "kourier-internal",
                                        "namespace": "kourier-system",
                                        "kind": "Service",
                                        "port": 80,
                                        "scheme": "http"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "kservice-hello": {
                    "apiVersion": "serving.knative.dev/v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "hello",
                        "namespace": "default"
                    },
                    "spec": {
                        "template": {
                            "spec": {
                                "containerConcurrency": 0,
                                "containers": [
                                    {
                                        "name": "whoami",
                                        "image": "containous/whoami:latest",
                                        "ports": [
                                            {
                                                "containerPort": 80
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        "traffic": [
                            {
                                "latestRevision": true,
                                "percent": 100
                            }
                        ]
                    }
                },
                "kservice-bye": {
                    "apiVersion": "serving.knative.dev/v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "bye",
                        "namespace": "default"
                    },
                    "spec": {
                        "template": {
                            "spec": {
                                "containerConcurrency": 0,
                                "containers": [
                                    {
                                        "name": "whoami",
                                        "image": "containous/whoami:latest",
                                        "ports": [
                                            {
                                                "containerPort": 80
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        "traffic": [
                            {
                                "latestRevision": true,
                                "percent": 100
                            }
                        ]
                    }
                }
            },
            "out": {
                "patches": [],
                "namespace": "default",
                "resources": [
                    "resource-ingressroute-default.defn.run.yaml",
                    "resource-kservice-hello.yaml",
                    "resource-kservice-bye.yaml"
                ]
            }
        },
        "events": {
            "app": {
                "events": {}
            },
            "namespace": "default",
            "psm": {},
            "resource": {
                "events": {
                    "url": "events.yaml",
                    "kind": ""
                }
            },
            "out": {
                "patches": [],
                "namespace": "default",
                "resources": [
                    "events.yaml"
                ]
            }
        },
        "demo1": {
            "app": {
                "demo1": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "demo": {
                    "url": "https://bit.ly/demokuma",
                    "kind": ""
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "https://bit.ly/demokuma"
                ]
            }
        },
        "demo2": {
            "app": {
                "demo2": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "demo": {
                    "url": "https://raw.githubusercontent.com/kumahq/kuma-counter-demo/master/demo.yaml",
                    "kind": ""
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "https://raw.githubusercontent.com/kumahq/kuma-counter-demo/master/demo.yaml"
                ]
            }
        },
        "coredns": {
            "app": {
                "coredns": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "configmap-coredns": {
                    "metadata": {
                        "name": "coredns-custom",
                        "namespace": "kube-system"
                    },
                    "data": {
                        "ts.net.server": "  ts.net {\n    forward . 100.100.100.100\n   }"
                    },
                    "kind": "ConfigMap",
                    "apiVersion": "v1"
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-configmap-coredns.yaml"
                ]
            }
        },
        "argo-cd": {
            "app": {
                "argo-cd": {}
            },
            "namespace": "argocd",
            "psm": {
                "service-argocd-server": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "argocd-server",
                        "annotations": {
                            "traefik.ingress.kubernetes.io/service.serverstransport": "traefik-insecure@kubernetescrd"
                        }
                    }
                },
                "configmap-argocd-cm": {
                    "metadata": {
                        "name": "argocd-cm"
                    },
                    "data": {
                        "kustomize.buildOptions": "--enable-helm",
                        "application.resourceTrackingMethod": "annotation",
                        "resource.customizations.health.networking.k8s.io_Ingress": "hs = {}\nhs.status = \"Healthy\"\nreturn hs",
                        "resource.customizations.health.tf.isaaguilar.com_Terraform": "hs = {}\nhs.status = \"Progressing\"\nhs.message = \"\"\nif obj.status ~= nil then\n    if obj.status.phase ~= nil then\n          if obj.status.phase == \"completed\" then\n               hs.status = \"Healthy\"\n         end\n\n          if obj.status.stage ~= nil then\n            if obj.status.stage.reason ~= nil then\n                  hs.message = obj.status.stage.reason\n            end\n          end\n    end\nend\nreturn hs",
                        "resource.customizations.health.argoproj.io_Application": "hs = {}\nhs.status = \"Progressing\"\nhs.message = \"\"\nif obj.status ~= nil then\n    if obj.status.health ~= nil then\n    hs.status = obj.status.health.status\n    if obj.status.health.message ~= nil then\n        hs.message = obj.status.health.message\n    end\n    end\nend\nreturn hs",
                        "resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration": "jsonPointers:\n  - /webhooks/0/clientConfig/caBundle\n  - /webhooks/0/rules\n",
                        "resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration": "jsonPointers:\n  - /webhooks/0/rules\n",
                        "resource.customizations.ignoreDifferences.apps_Deployment": "jsonPointers:\n  - /spec/template/spec/tolerations\n",
                        "resource.customizations.ignoreDifferences.kyverno.io_ClusterPolicy": "jqPathExpressions:\n  - .spec.rules[] | select(.name|test(\"autogen-.\"))\n"
                    },
                    "kind": "ConfigMap",
                    "apiVersion": "v1"
                }
            },
            "resource": {
                "namespace-argocd": {
                    "metadata": {
                        "name": "argocd"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "argo-cd": {
                    "url": "https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.1/manifests/install.yaml",
                    "kind": ""
                },
                "ingress-argo-cd": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "Ingress",
                    "metadata": {
                        "name": "argo-cd",
                        "annotations": {
                            "external-dns.alpha.kubernetes.io/hostname": "argocd.defn.run",
                            "traefik.ingress.kubernetes.io/router.tls": "true",
                            "traefik.ingress.kubernetes.io/router.entrypoints": "websecure"
                        }
                    },
                    "spec": {
                        "ingressClassName": "traefik",
                        "rules": [
                            {
                                "host": "argocd.defn.run",
                                "http": {
                                    "paths": [
                                        {
                                            "path": "/",
                                            "pathType": "Prefix",
                                            "backend": {
                                                "service": {
                                                    "name": "argocd-server",
                                                    "port": {
                                                        "number": 443
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-service-argocd-server.yaml"
                    },
                    {
                        "path": "patch-configmap-argocd-cm.yaml"
                    }
                ],
                "namespace": "argocd",
                "resources": [
                    "resource-namespace-argocd.yaml",
                    "https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.1/manifests/install.yaml",
                    "resource-ingress-argo-cd.yaml"
                ]
            }
        },
        "argo-events": {
            "app": {
                "argo-events": {}
            },
            "namespace": "argo-events",
            "helm": {
                "release": "argo-events",
                "name": "argo-events",
                "version": "2.0.6",
                "repo": "https://argoproj.github.io/argo-helm",
                "namespace": "",
                "values": {}
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "argo-events",
                "resources": [
                    "resource-namespace-argo-events.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "argo-events",
                        "namespace": "argo-events",
                        "valuesInline": {},
                        "name": "argo-events",
                        "version": "2.0.6",
                        "repo": "https://argoproj.github.io/argo-helm",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-argo-events": {
                    "metadata": {
                        "name": "argo-events"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "argo-workflows": {
            "helm": {
                "release": "argo-workflows",
                "name": "argo-workflows",
                "version": "0.29.2",
                "repo": "https://argoproj.github.io/argo-helm",
                "namespace": "argo-workflows",
                "values": {
                    "controller": {
                        "workflowNamespaces": [
                            "argo-workflows",
                            "defn"
                        ]
                    }
                }
            },
            "app": {
                "argo-workflows": {}
            },
            "namespace": "",
            "psm": {},
            "out": {
                "patches": [],
                "resources": [
                    "resource-namespace-argo-workflows.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "argo-workflows",
                        "namespace": "argo-workflows",
                        "valuesInline": {
                            "controller": {
                                "workflowNamespaces": [
                                    "argo-workflows",
                                    "defn"
                                ]
                            }
                        },
                        "name": "argo-workflows",
                        "version": "0.29.2",
                        "repo": "https://argoproj.github.io/argo-helm",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-argo-workflows": {
                    "metadata": {
                        "name": "argo-workflows"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "coder": {
            "app": {
                "coder": {}
            },
            "namespace": "coder",
            "helm": {
                "release": "coder",
                "name": "coder",
                "version": "0.24.1",
                "repo": "https://helm.coder.com/v2",
                "namespace": "coder",
                "values": {
                    "coder": {
                        "service": {
                            "type": "ClusterIP"
                        },
                        "env": [
                            {
                                "name": "CODER_ACCESS_URL",
                                "valueFrom": {
                                    "secretKeyRef": {
                                        "name": "coder",
                                        "key": "CODER_ACCESS_URL"
                                    }
                                }
                            }
                        ]
                    }
                }
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "coder",
                "resources": [
                    "resource-namespace-coder.yaml",
                    "resource-ingress-coder.yaml",
                    "resource-externalsecret-coder.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "coder",
                        "namespace": "coder",
                        "valuesInline": {
                            "coder": {
                                "service": {
                                    "type": "ClusterIP"
                                },
                                "env": [
                                    {
                                        "name": "CODER_ACCESS_URL",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "name": "coder",
                                                "key": "CODER_ACCESS_URL"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        "name": "coder",
                        "version": "0.24.1",
                        "repo": "https://helm.coder.com/v2",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-coder": {
                    "metadata": {
                        "name": "coder"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "ingress-coder": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "Ingress",
                    "metadata": {
                        "name": "coder",
                        "annotations": {
                            "external-dns.alpha.kubernetes.io/hostname": "coder.defn.run",
                            "traefik.ingress.kubernetes.io/router.tls": "true",
                            "traefik.ingress.kubernetes.io/router.entrypoints": "websecure"
                        }
                    },
                    "spec": {
                        "ingressClassName": "traefik",
                        "rules": [
                            {
                                "host": "coder.defn.run",
                                "http": {
                                    "paths": [
                                        {
                                            "path": "/",
                                            "pathType": "Prefix",
                                            "backend": {
                                                "service": {
                                                    "name": "coder",
                                                    "port": {
                                                        "number": 80
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "externalsecret-coder": {
                    "apiVersion": "external-secrets.io/v1beta1",
                    "kind": "ExternalSecret",
                    "metadata": {
                        "name": "coder",
                        "namespace": "coder"
                    },
                    "spec": {
                        "refreshInterval": "1h",
                        "secretStoreRef": {
                            "kind": "ClusterSecretStore",
                            "name": "dev"
                        },
                        "dataFrom": [
                            {
                                "extract": {
                                    "key": "dev/amanibhavam-global-coder"
                                }
                            }
                        ],
                        "target": {
                            "name": "coder",
                            "creationPolicy": "Owner"
                        }
                    }
                }
            }
        },
        "kyverno": {
            "app": {
                "kyverno": {}
            },
            "namespace": "kyverno",
            "helm": {
                "release": "kyverno",
                "name": "kyverno",
                "version": "3.0.1",
                "repo": "https://kyverno.github.io/kyverno",
                "namespace": "",
                "values": {
                    "replicaCount": 1
                }
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "kyverno",
                "resources": [
                    "resource-namespace-kyverno.yaml",
                    "resource-clusterrole-create-clusterissuers.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "kyverno",
                        "namespace": "kyverno",
                        "valuesInline": {
                            "replicaCount": 1
                        },
                        "name": "kyverno",
                        "version": "3.0.1",
                        "repo": "https://kyverno.github.io/kyverno",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-kyverno": {
                    "metadata": {
                        "name": "kyverno"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "clusterrole-create-clusterissuers": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "name": "kyverno:generate-clusterissuers",
                        "labels": {
                            "app.kubernetes.io/instance": "kyverno",
                            "app.kubernetes.io/name": "kyverno"
                        }
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "patch",
                                "delete"
                            ]
                        }
                    ]
                }
            }
        },
        "keda": {
            "app": {
                "keda": {}
            },
            "namespace": "keda",
            "helm": {
                "release": "keda",
                "name": "keda",
                "version": "2.8.2",
                "repo": "https://kedacore.github.io/charts",
                "namespace": "",
                "values": {}
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "keda",
                "resources": [
                    "resource-namespace-keda.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "keda",
                        "namespace": "keda",
                        "valuesInline": {},
                        "name": "keda",
                        "version": "2.8.2",
                        "repo": "https://kedacore.github.io/charts",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-keda": {
                    "metadata": {
                        "name": "keda"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "external-dns": {
            "app": {
                "external-dns": {}
            },
            "namespace": "external-dns",
            "helm": {
                "release": "external-dns",
                "name": "external-dns",
                "version": "6.20.3",
                "repo": "https://charts.bitnami.com/bitnami",
                "namespace": "",
                "values": {
                    "logLevel": "debug",
                    "sources": [
                        "service",
                        "ingress"
                    ],
                    "provider": "cloudflare",
                    "cloudflare": {
                        "email": "cloudflare@defn.us",
                        "proxied": false
                    },
                    "domainFilters": [
                        "defn.run"
                    ]
                }
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "external-dns",
                "resources": [
                    "resource-namespace-external-dns.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "external-dns",
                        "namespace": "external-dns",
                        "valuesInline": {
                            "logLevel": "debug",
                            "sources": [
                                "service",
                                "ingress"
                            ],
                            "provider": "cloudflare",
                            "cloudflare": {
                                "email": "cloudflare@defn.us",
                                "proxied": false
                            },
                            "domainFilters": [
                                "defn.run"
                            ]
                        },
                        "name": "external-dns",
                        "version": "6.20.3",
                        "repo": "https://charts.bitnami.com/bitnami",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-external-dns": {
                    "metadata": {
                        "name": "external-dns"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "vault": {
            "app": {
                "vault": {}
            },
            "namespace": "vault",
            "helm": {
                "release": "vault",
                "name": "vault",
                "version": "0.20.1",
                "repo": "https://helm.releases.hashicorp.com",
                "namespace": "",
                "values": {
                    "server": {
                        "dataStorage": {
                            "size": "1Gi"
                        },
                        "standalone": {
                            "config": "disable_mlock = true\nui = true\n\nlistener \"tcp\" {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n}\n\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\nseal \"transit\" {\n  address = \"http://vault.default.svc:8200\"\n  disable_renewal = \"false\"\n  key_name = \"autounseal-remo\"\n  mount_path = \"transit/\"\n  tls_skip_verify = \"true\"\n}\n"
                        }
                    }
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-statefulset-vault-set-vault-token.yaml"
                    }
                ],
                "namespace": "vault",
                "resources": [
                    "resource-namespace-vault.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "vault",
                        "namespace": "vault",
                        "valuesInline": {
                            "server": {
                                "dataStorage": {
                                    "size": "1Gi"
                                },
                                "standalone": {
                                    "config": "disable_mlock = true\nui = true\n\nlistener \"tcp\" {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n}\n\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\nseal \"transit\" {\n  address = \"http://vault.default.svc:8200\"\n  disable_renewal = \"false\"\n  key_name = \"autounseal-remo\"\n  mount_path = \"transit/\"\n  tls_skip_verify = \"true\"\n}\n"
                                }
                            }
                        },
                        "name": "vault",
                        "version": "0.20.1",
                        "repo": "https://helm.releases.hashicorp.com",
                        "includeCRDs": true
                    }
                ]
            },
            "psm": {
                "statefulset-vault-set-vault-token": {
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "name": "vault",
                        "namespace": "vault"
                    },
                    "spec": {
                        "template": {
                            "spec": {
                                "containers": [
                                    {
                                        "name": "vault",
                                        "env": [
                                            {
                                                "name": "VAULT_TOKEN",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "name": "vault-unseal",
                                                        "key": "VAULT_TOKEN"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "resource": {
                "namespace-vault": {
                    "metadata": {
                        "name": "vault"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "kourier": {
            "app": {
                "kourier": {}
            },
            "namespace": "",
            "psm": {
                "service-kourier-set-cluster-ip": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "kourier",
                        "namespace": "kourier-system"
                    },
                    "spec": {
                        "type": "ClusterIP"
                    }
                }
            },
            "resource": {
                "kourier": {
                    "url": "https://github.com/knative-sandbox/net-kourier/releases/download/knative-v1.10.0/kourier.yaml",
                    "kind": ""
                },
                "ingress-default-wildcard": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "Ingress",
                    "metadata": {
                        "name": "default-wildcard",
                        "namespace": "kourier-system",
                        "annotations": {
                            "external-dns.alpha.kubernetes.io/hostname": "*.default.defn.run"
                        }
                    },
                    "spec": {
                        "ingressClassName": "traefik",
                        "rules": [
                            {
                                "host": "wildcard.default.defn.run",
                                "http": {
                                    "paths": [
                                        {
                                            "path": "/",
                                            "pathType": "Prefix",
                                            "backend": {
                                                "service": {
                                                    "name": "kourier-internal",
                                                    "port": {
                                                        "number": 80
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-service-kourier-set-cluster-ip.yaml"
                    }
                ],
                "resources": [
                    "https://github.com/knative-sandbox/net-kourier/releases/download/knative-v1.10.0/kourier.yaml",
                    "resource-ingress-default-wildcard.yaml"
                ]
            }
        },
        "dev": {
            "app": {
                "dev": {}
            },
            "namespace": "default",
            "psm": {},
            "resource": {
                "statefulset-dev": {
                    "metadata": {
                        "name": "dev",
                        "namespace": "default"
                    },
                    "spec": {
                        "serviceName": "dev",
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app": "dev"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "dev"
                                }
                            },
                            "spec": {
                                "volumes": [
                                    {
                                        "name": "work",
                                        "emptyDir": {}
                                    }
                                ],
                                "containers": [
                                    {
                                        "name": "code-server",
                                        "image": "169.254.32.1:5000/workspace",
                                        "imagePullPolicy": "Always",
                                        "command": [
                                            "/usr/bin/tini",
                                            "--"
                                        ],
                                        "args": [
                                            "bash",
                                            "-c",
                                            "exec ~/bin/e code-server --bind-addr 0.0.0.0:8888 --disable-telemetry"
                                        ],
                                        "tty": true,
                                        "env": [
                                            {
                                                "name": "PASSWORD",
                                                "value": "admin"
                                            }
                                        ],
                                        "securityContext": {
                                            "privileged": true
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/work",
                                                "name": "work"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "kind": "StatefulSet",
                    "apiVersion": "apps/v1"
                },
                "service-dev": {
                    "metadata": {
                        "name": "dev",
                        "namespace": "default"
                    },
                    "spec": {
                        "ports": [
                            {
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": 8888
                            }
                        ],
                        "selector": {
                            "app": "dev"
                        },
                        "type": "ClusterIP"
                    },
                    "kind": "Service",
                    "apiVersion": "v1"
                },
                "cluster-role-binding-admin": {
                    "metadata": {
                        "name": "dev-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "default",
                            "namespace": "default"
                        }
                    ],
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cluster-admin"
                    },
                    "kind": "ClusterRoleBinding",
                    "apiVersion": "rbac.authorization.k8s.io/v1"
                },
                "cluster-role-binding-delegator": {
                    "metadata": {
                        "name": "dev-delegator"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "default",
                            "namespace": "default"
                        }
                    ],
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "system:auth-delegator"
                    },
                    "kind": "ClusterRoleBinding",
                    "apiVersion": "rbac.authorization.k8s.io/v1"
                }
            },
            "out": {
                "patches": [],
                "namespace": "default",
                "resources": [
                    "resource-statefulset-dev.yaml",
                    "resource-service-dev.yaml",
                    "resource-cluster-role-binding-admin.yaml",
                    "resource-cluster-role-binding-delegator.yaml"
                ]
            }
        },
        "external-secrets-operator": {
            "app": {
                "external-secrets-operator": {}
            },
            "namespace": "external-secrets",
            "helm": {
                "release": "external-secrets",
                "name": "external-secrets",
                "version": "0.8.3",
                "repo": "https://charts.external-secrets.io",
                "namespace": "",
                "values": {
                    "webhook": {
                        "create": false
                    },
                    "certController": {
                        "create": false
                    }
                }
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "external-secrets",
                "resources": [
                    "resource-namespace-external-secrets.yaml",
                    "resource-cluster-role-binding-delegator.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "external-secrets",
                        "namespace": "external-secrets",
                        "valuesInline": {
                            "webhook": {
                                "create": false
                            },
                            "certController": {
                                "create": false
                            }
                        },
                        "name": "external-secrets",
                        "version": "0.8.3",
                        "repo": "https://charts.external-secrets.io",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-external-secrets": {
                    "metadata": {
                        "name": "external-secrets"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "cluster-role-binding-delegator": {
                    "metadata": {
                        "name": "external-secrets-delegator"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "external-secrets",
                            "namespace": "external-secrets"
                        }
                    ],
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "system:auth-delegator"
                    },
                    "kind": "ClusterRoleBinding",
                    "apiVersion": "rbac.authorization.k8s.io/v1"
                }
            }
        },
        "pod-identity-webhook": {
            "app": {
                "pod-identity-webhook": {}
            },
            "namespace": "default",
            "psm": {},
            "helm": {
                "release": "pod-identity-webhook",
                "name": "amazon-eks-pod-identity-webhook",
                "version": "1.2.0",
                "repo": "https://jkroepke.github.io/helm-charts",
                "namespace": "",
                "values": {
                    "pki": {
                        "certManager": {
                            "certificate": {
                                "duration": "2160h0m0s",
                                "renewBefore": "360h0m0s"
                            }
                        }
                    }
                }
            },
            "out": {
                "patches": [],
                "namespace": "default",
                "resources": [],
                "helmCharts": [
                    {
                        "releaseName": "pod-identity-webhook",
                        "namespace": "default",
                        "valuesInline": {
                            "pki": {
                                "certManager": {
                                    "certificate": {
                                        "duration": "2160h0m0s",
                                        "renewBefore": "360h0m0s"
                                    }
                                }
                            }
                        },
                        "name": "amazon-eks-pod-identity-webhook",
                        "version": "1.2.0",
                        "repo": "https://jkroepke.github.io/helm-charts",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {}
        },
        "karpenter": {
            "app": {
                "karpenter": {}
            },
            "namespace": "karpenter",
            "psm": {},
            "resource": {
                "karpenter": {
                    "url": "karpenter.yaml",
                    "kind": ""
                },
                "namespace-karpenter": {
                    "metadata": {
                        "name": "karpenter"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            },
            "out": {
                "patches": [],
                "namespace": "karpenter",
                "resources": [
                    "karpenter.yaml",
                    "resource-namespace-karpenter.yaml"
                ]
            }
        },
        "knative": {
            "app": {
                "knative": {}
            },
            "namespace": "",
            "psm": {
                "namespace-knative-serving": {
                    "metadata": {
                        "name": "knative-serving"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "deployment-webhook": {
                    "metadata": {
                        "name": "webhook",
                        "namespace": "knative-serving"
                    },
                    "kind": "Deployment",
                    "apiVersion": "apps/v1"
                },
                "deployment-domainmappingwebhook": {
                    "metadata": {
                        "name": "domainmapping-webhook",
                        "namespace": "knative-serving"
                    },
                    "kind": "Deployment",
                    "apiVersion": "apps/v1"
                },
                "deployment-domain-mapping": {
                    "metadata": {
                        "name": "domain-mapping",
                        "namespace": "knative-serving"
                    },
                    "kind": "Deployment",
                    "apiVersion": "apps/v1"
                },
                "deployment-controller": {
                    "metadata": {
                        "name": "controller",
                        "namespace": "knative-serving"
                    },
                    "kind": "Deployment",
                    "apiVersion": "apps/v1"
                },
                "deployment-autoscaler": {
                    "metadata": {
                        "name": "autoscaler",
                        "namespace": "knative-serving"
                    },
                    "kind": "Deployment",
                    "apiVersion": "apps/v1"
                },
                "deployment-activator": {
                    "metadata": {
                        "name": "activator",
                        "namespace": "knative-serving"
                    },
                    "kind": "Deployment",
                    "apiVersion": "apps/v1"
                },
                "config-map-config-defaults": {
                    "metadata": {
                        "name": "config-defaults",
                        "namespace": "knative-serving"
                    },
                    "data": {
                        "revision-timeout-seconds": "1800",
                        "max-revision-timeout-seconds": "1800"
                    },
                    "kind": "ConfigMap",
                    "apiVersion": "v1"
                },
                "config-map-config-domain": {
                    "metadata": {
                        "name": "config-domain",
                        "namespace": "knative-serving"
                    },
                    "data": {
                        "defn.run": ""
                    },
                    "kind": "ConfigMap",
                    "apiVersion": "v1"
                },
                "config-map-config-features": {
                    "metadata": {
                        "name": "config-features",
                        "namespace": "knative-serving"
                    },
                    "data": {
                        "kubernetes.podspec-affinity": "enabled",
                        "kubernetes.podspec-tolerations": "enabled"
                    },
                    "kind": "ConfigMap",
                    "apiVersion": "v1"
                },
                "config-map-config-network": {
                    "metadata": {
                        "name": "config-network",
                        "namespace": "knative-serving"
                    },
                    "data": {
                        "ingress.class": "kourier.ingress.networking.knative.dev"
                    },
                    "kind": "ConfigMap",
                    "apiVersion": "v1"
                }
            },
            "resource": {
                "knative-serving": {
                    "url": "https://github.com/knative/serving/releases/download/knative-v1.10.0/serving-core.yaml",
                    "kind": ""
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-namespace-knative-serving.yaml"
                    },
                    {
                        "path": "patch-deployment-webhook.yaml"
                    },
                    {
                        "path": "patch-deployment-domainmappingwebhook.yaml"
                    },
                    {
                        "path": "patch-deployment-domain-mapping.yaml"
                    },
                    {
                        "path": "patch-deployment-controller.yaml"
                    },
                    {
                        "path": "patch-deployment-autoscaler.yaml"
                    },
                    {
                        "path": "patch-deployment-activator.yaml"
                    },
                    {
                        "path": "patch-config-map-config-defaults.yaml"
                    },
                    {
                        "path": "patch-config-map-config-domain.yaml"
                    },
                    {
                        "path": "patch-config-map-config-features.yaml"
                    },
                    {
                        "path": "patch-config-map-config-network.yaml"
                    }
                ],
                "resources": [
                    "https://github.com/knative/serving/releases/download/knative-v1.10.0/serving-core.yaml"
                ]
            }
        },
        "cert-manager": {
            "helm": {
                "release": "cert-manager",
                "name": "cert-manager",
                "version": "1.12.2",
                "repo": "https://charts.jetstack.io",
                "namespace": "cert-manager",
                "values": {
                    "ingressShim": {
                        "defaultIssuerName": "zerossl-production",
                        "defaultIssuerKind": "ClusterIssuer"
                    },
                    "global": {
                        "logLevel": 4
                    }
                }
            },
            "app": {
                "cert-manager": {}
            },
            "namespace": "",
            "psm": {},
            "out": {
                "patches": [],
                "resources": [
                    "resource-namespace-cert-manager.yaml",
                    "https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.crds.yaml",
                    "resource-clusterissuer-cilium.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "cert-manager",
                        "namespace": "cert-manager",
                        "valuesInline": {
                            "ingressShim": {
                                "defaultIssuerName": "zerossl-production",
                                "defaultIssuerKind": "ClusterIssuer"
                            },
                            "global": {
                                "logLevel": 4
                            }
                        },
                        "name": "cert-manager",
                        "version": "1.12.2",
                        "repo": "https://charts.jetstack.io",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "namespace-cert-manager": {
                    "metadata": {
                        "name": "cert-manager"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "cert-manager-crds": {
                    "url": "https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.crds.yaml",
                    "kind": ""
                },
                "clusterissuer-cilium": {
                    "apiVersion": "cert-manager.io/v1",
                    "kind": "ClusterIssuer",
                    "metadata": {
                        "name": "cilium-ca"
                    },
                    "spec": {
                        "ca": {
                            "secretName": "cilium-ca"
                        }
                    }
                }
            }
        },
        "cilium": {
            "app": {
                "cilium": {}
            },
            "namespace": "kube-system",
            "helm": {
                "release": "cilium",
                "name": "cilium",
                "version": "1.13.4",
                "repo": "https://helm.cilium.io",
                "namespace": "kube-system",
                "values": {
                    "operator": {
                        "replicas": 1
                    },
                    "hubble": {
                        "relay": {
                            "enabled": true
                        },
                        "ui": {
                            "enabled": true
                        },
                        "tls": {
                            "auto": {
                                "method": "certmanager",
                                "certManagerIssuerRef": {
                                    "name": "cilium-ca",
                                    "kind": "ClusterIssuer",
                                    "group": "cert-manager.io"
                                }
                            }
                        }
                    }
                }
            },
            "psm": {},
            "out": {
                "patches": [],
                "namespace": "kube-system",
                "resources": [
                    "resource-ingress-hubble-ui.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "cilium",
                        "namespace": "kube-system",
                        "valuesInline": {
                            "operator": {
                                "replicas": 1
                            },
                            "hubble": {
                                "relay": {
                                    "enabled": true
                                },
                                "ui": {
                                    "enabled": true
                                },
                                "tls": {
                                    "auto": {
                                        "method": "certmanager",
                                        "certManagerIssuerRef": {
                                            "name": "cilium-ca",
                                            "kind": "ClusterIssuer",
                                            "group": "cert-manager.io"
                                        }
                                    }
                                }
                            }
                        },
                        "name": "cilium",
                        "version": "1.13.4",
                        "repo": "https://helm.cilium.io",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {
                "ingress-hubble-ui": {
                    "apiVersion": "networking.k8s.io/v1",
                    "kind": "Ingress",
                    "metadata": {
                        "name": "hubble-ui",
                        "annotations": {
                            "external-dns.alpha.kubernetes.io/hostname": "hubble.defn.run",
                            "traefik.ingress.kubernetes.io/router.tls": "true",
                            "traefik.ingress.kubernetes.io/router.entrypoints": "websecure"
                        }
                    },
                    "spec": {
                        "ingressClassName": "traefik",
                        "rules": [
                            {
                                "host": "hubble.defn.run",
                                "http": {
                                    "paths": [
                                        {
                                            "path": "/",
                                            "pathType": "Prefix",
                                            "backend": {
                                                "service": {
                                                    "name": "hubble-ui",
                                                    "port": {
                                                        "number": 80
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
        },
        "nginx": {
            "app": {
                "nginx": {}
            },
            "namespace": "nginx",
            "helm": {
                "release": "nginx",
                "name": "nginx",
                "version": "15.0.2",
                "repo": "https://charts.bitnami.com/bitnami",
                "namespace": "nginx",
                "values": {}
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-service-nginx.yaml"
                    }
                ],
                "namespace": "nginx",
                "resources": [
                    "resource-namespace-nginx.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "nginx",
                        "namespace": "nginx",
                        "valuesInline": {},
                        "name": "nginx",
                        "version": "15.0.2",
                        "repo": "https://charts.bitnami.com/bitnami",
                        "includeCRDs": true
                    }
                ]
            },
            "psm": {
                "service-nginx": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "nginx",
                        "namespace": "nginx"
                    },
                    "spec": {
                        "type": "ClusterIP"
                    }
                }
            },
            "resource": {
                "namespace-nginx": {
                    "metadata": {
                        "name": "nginx"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "traefik": {
            "app": {
                "traefik": {}
            },
            "namespace": "traefik",
            "helm": {
                "release": "traefik",
                "name": "traefik",
                "version": "23.1.0",
                "repo": "https://traefik.github.io/charts",
                "namespace": "traefik",
                "values": {
                    "logs": {
                        "general": {
                            "level": "DEBUG"
                        },
                        "access": {
                            "enabled": true
                        }
                    },
                    "providers": {
                        "kubernetesIngress": {
                            "publishedService": {
                                "enabled": true
                            },
                            "allowExternalNameServices": true
                        },
                        "kubernetesCRD": {
                            "allowExternalNameServices": true,
                            "allowCrossNamespace": true
                        }
                    }
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-ingressroute-traefik-dashboard.yaml"
                    },
                    {
                        "path": "patch-service-tailscale.yaml"
                    }
                ],
                "namespace": "traefik",
                "resources": [
                    "resource-namespace-traefik.yaml",
                    "resource-tlsstore-traefik.yaml",
                    "resource-serverstransport-insecure.yaml",
                    "resource-ingressroute-http-to-https.yaml",
                    "resource-middleware-http-to-https.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "traefik",
                        "namespace": "traefik",
                        "valuesInline": {
                            "logs": {
                                "general": {
                                    "level": "DEBUG"
                                },
                                "access": {
                                    "enabled": true
                                }
                            },
                            "providers": {
                                "kubernetesIngress": {
                                    "publishedService": {
                                        "enabled": true
                                    },
                                    "allowExternalNameServices": true
                                },
                                "kubernetesCRD": {
                                    "allowExternalNameServices": true,
                                    "allowCrossNamespace": true
                                }
                            }
                        },
                        "name": "traefik",
                        "version": "23.1.0",
                        "repo": "https://traefik.github.io/charts",
                        "includeCRDs": true
                    }
                ]
            },
            "psm": {
                "ingressroute-traefik-dashboard": {
                    "apiVersion": "traefik.io/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "name": "traefik-dashboard",
                        "namespace": "traefik"
                    },
                    "spec": {
                        "entryPoints": [
                            "websecure"
                        ],
                        "routes": [
                            {
                                "match": "Host(`traefik.defn.run`) \u0026\u0026 (PathPrefix(`/api`) || PathPrefix(`/dashboard`))",
                                "kind": "Rule",
                                "services": [
                                    {
                                        "name": "api@internal",
                                        "kind": "TraefikService"
                                    }
                                ],
                                "middlewares": [
                                    {
                                        "name": "http-to-https"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "service-tailscale": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "traefik",
                        "namespace": "traefik",
                        "annotations": {
                            "external-dns.alpha.kubernetes.io/hostname": "traefik.defn.run"
                        }
                    },
                    "spec": {
                        "type": "LoadBalancer",
                        "loadBalancerClass": "tailscale"
                    }
                }
            },
            "resource": {
                "namespace-traefik": {
                    "metadata": {
                        "name": "traefik"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "tlsstore-traefik": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "TLSStore",
                    "metadata": {
                        "name": "default",
                        "namespace": "traefik"
                    },
                    "spec": {
                        "defaultCertificate": {
                            "secretName": "defn-run-wildcard"
                        }
                    }
                },
                "serverstransport-insecure": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "ServersTransport",
                    "metadata": {
                        "name": "insecure",
                        "namespace": "traefik"
                    },
                    "spec": {
                        "insecureSkipVerify": true
                    }
                },
                "ingressroute-http-to-https": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "IngressRoute",
                    "metadata": {
                        "name": "traefik-http-to-https",
                        "namespace": "traefik"
                    },
                    "spec": {
                        "entryPoints": [
                            "web"
                        ],
                        "routes": [
                            {
                                "match": "HostRegexp(`{subdomain:[a-z0-9-]+}.defn.run`)",
                                "kind": "Rule",
                                "services": [
                                    {
                                        "name": "noop@internal",
                                        "kind": "TraefikService"
                                    }
                                ],
                                "middlewares": [
                                    {
                                        "name": "http-to-https"
                                    }
                                ]
                            }
                        ]
                    }
                },
                "middleware-http-to-https": {
                    "apiVersion": "traefik.containo.us/v1alpha1",
                    "kind": "Middleware",
                    "metadata": {
                        "name": "http-to-https"
                    },
                    "spec": {
                        "redirectScheme": {
                            "scheme": "https",
                            "permanent": false
                        }
                    }
                }
            }
        },
        "caddy": {
            "app": {
                "caddy": {}
            },
            "namespace": "caddy",
            "helm": {
                "release": "caddy",
                "name": "caddy",
                "version": "0.2.4",
                "repo": "https://charts.alekc.dev",
                "namespace": "caddy",
                "values": {
                    "listenPort": 80,
                    "https": {
                        "enabled": true,
                        "port": 443
                    },
                    "config": {
                        "global": "auto_https disable_certs\n\nlocal_certs\n\nlog {\n    output stdout\n}",
                        "caddyFile": "https://*.defn.run {\n    tls /certs/tls.crt /certs/tls.key\n    reverse_proxy {http.request.host.labels.2}.default.svc.cluster.local:80 {\n        header_up -Host\n        header_up X-defn-label0\t\"{http.request.host.labels.0}\"\n        header_up X-defn-label1\t\"{http.request.host.labels.1}\"\n        header_up X-defn-label2\t\"{http.request.host.labels.2}\"\n    }\n}"
                    },
                    "volumes": [
                        {
                            "name": "certs",
                            "secret": {
                                "secretName": "defn-run-wildcard",
                                "optional": false
                            }
                        }
                    ],
                    "volumeMounts": [
                        {
                            "name": "certs",
                            "mountPath": "/certs"
                        }
                    ]
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-service-tailscale.yaml"
                    }
                ],
                "namespace": "caddy",
                "resources": [
                    "resource-namespace-caddy.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "caddy",
                        "namespace": "caddy",
                        "valuesInline": {
                            "listenPort": 80,
                            "https": {
                                "enabled": true,
                                "port": 443
                            },
                            "config": {
                                "global": "auto_https disable_certs\n\nlocal_certs\n\nlog {\n    output stdout\n}",
                                "caddyFile": "https://*.defn.run {\n    tls /certs/tls.crt /certs/tls.key\n    reverse_proxy {http.request.host.labels.2}.default.svc.cluster.local:80 {\n        header_up -Host\n        header_up X-defn-label0\t\"{http.request.host.labels.0}\"\n        header_up X-defn-label1\t\"{http.request.host.labels.1}\"\n        header_up X-defn-label2\t\"{http.request.host.labels.2}\"\n    }\n}"
                            },
                            "volumes": [
                                {
                                    "name": "certs",
                                    "secret": {
                                        "secretName": "defn-run-wildcard",
                                        "optional": false
                                    }
                                }
                            ],
                            "volumeMounts": [
                                {
                                    "name": "certs",
                                    "mountPath": "/certs"
                                }
                            ]
                        },
                        "name": "caddy",
                        "version": "0.2.4",
                        "repo": "https://charts.alekc.dev",
                        "includeCRDs": true
                    }
                ]
            },
            "psm": {
                "service-tailscale": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "name": "caddy",
                        "annotations": {
                            "external-dns.alpha.kubernetes.io/hostname": "caddy.defn.run"
                        }
                    },
                    "spec": {
                        "type": "LoadBalancer",
                        "loadBalancerClass": "tailscale"
                    }
                }
            },
            "resource": {
                "namespace-caddy": {
                    "metadata": {
                        "name": "caddy"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            }
        },
        "tfo": {
            "app": {
                "tfo": {}
            },
            "namespace": "tf-system",
            "psm": {},
            "resource": {
                "tfo": {
                    "url": "https://raw.githubusercontent.com/isaaguilar/terraform-operator/master/deploy/bundles/v0.10.0/v0.10.0.yaml",
                    "kind": ""
                }
            },
            "out": {
                "patches": [],
                "namespace": "tf-system",
                "resources": [
                    "https://raw.githubusercontent.com/isaaguilar/terraform-operator/master/deploy/bundles/v0.10.0/v0.10.0.yaml"
                ]
            }
        },
        "bonchon": {
            "app": {
                "bonchon": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "tfo-demo-bonchon": {
                    "apiVersion": "tf.isaaguilar.com/v1alpha2",
                    "kind": "Terraform",
                    "metadata": {
                        "name": "bonchon",
                        "namespace": "default"
                    },
                    "spec": {
                        "terraformVersion": "1.0.0",
                        "terraformModule": {
                            "source": "https://github.com/defn/dev/m.git//tf/fried-chicken?ref=main"
                        },
                        "serviceAccount": "default",
                        "scmAuthMethods": [],
                        "ignoreDelete": true,
                        "keepLatestPodsOnly": true,
                        "outputsToOmit": [
                            "0"
                        ],
                        "backend": "terraform {\n    backend \"kubernetes\" {\n        in_cluster_config = true\n        secret_suffix     = \"bonchon\"\n        namespace         = \"default\"\n    }\n}"
                    }
                },
                "pre-sync-hook-dry-brine-rocky-chicken": {
                    "metadata": {
                        "name": "dry-brine-rocky-chicken",
                        "namespace": "default",
                        "annotations": {
                            "argocd.argoproj.io/hook": "PreSync"
                        }
                    },
                    "spec": {
                        "backoffLimit": 0,
                        "template": {
                            "spec": {
                                "serviceAccountName": "default",
                                "containers": [
                                    {
                                        "name": "meh",
                                        "image": "defn/dev:kubectl",
                                        "command": [
                                            "bash",
                                            "-c"
                                        ],
                                        "args": [
                                            "test \"completed\" == \"$(kubectl get tf \"rocky\" -o json | jq -r '.status.phase')\""
                                        ]
                                    }
                                ],
                                "restartPolicy": "Never"
                            }
                        }
                    },
                    "kind": "Job",
                    "apiVersion": "batch/v1"
                },
                "pre-sync-hook-dry-brine-rosie-chicken": {
                    "metadata": {
                        "name": "dry-brine-rosie-chicken",
                        "namespace": "default",
                        "annotations": {
                            "argocd.argoproj.io/hook": "PreSync"
                        }
                    },
                    "spec": {
                        "backoffLimit": 0,
                        "template": {
                            "spec": {
                                "serviceAccountName": "default",
                                "containers": [
                                    {
                                        "name": "meh",
                                        "image": "defn/dev:kubectl",
                                        "command": [
                                            "bash",
                                            "-c"
                                        ],
                                        "args": [
                                            "test \"completed\" == \"$(kubectl get tf \"rosie\" -o json | jq -r '.status.phase')\""
                                        ]
                                    }
                                ],
                                "restartPolicy": "Never"
                            }
                        }
                    },
                    "kind": "Job",
                    "apiVersion": "batch/v1"
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-tfo-demo-bonchon.yaml",
                    "resource-pre-sync-hook-dry-brine-rocky-chicken.yaml",
                    "resource-pre-sync-hook-dry-brine-rosie-chicken.yaml"
                ]
            }
        },
        "sysbox": {
            "app": {
                "sysbox": {}
            },
            "namespace": "",
            "psm": {
                "daemonset-vault-set-vault-token": {
                    "apiVersion": "apps/v1",
                    "kind": "DaemonSet",
                    "metadata": {
                        "name": "sysbox-deploy-k8s",
                        "namespace": "kube-system"
                    },
                    "spec": {
                        "template": {
                            "spec": {
                                "tolerations": [
                                    {
                                        "key": "env",
                                        "operator": "Exists"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "resource": {
                "sysbox": {
                    "url": "https://raw.githubusercontent.com/nestybox/sysbox/master/sysbox-k8s-manifests/sysbox-install.yaml",
                    "kind": ""
                }
            },
            "out": {
                "patches": [
                    {
                        "path": "patch-daemonset-vault-set-vault-token.yaml"
                    }
                ],
                "resources": [
                    "https://raw.githubusercontent.com/nestybox/sysbox/master/sysbox-k8s-manifests/sysbox-install.yaml"
                ]
            }
        },
        "defn-shared": {
            "app": {
                "defn-shared": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "externalsecret-external-dns": {
                    "apiVersion": "external-secrets.io/v1beta1",
                    "kind": "ExternalSecret",
                    "metadata": {
                        "name": "external-dns",
                        "namespace": "external-dns"
                    },
                    "spec": {
                        "refreshInterval": "1h",
                        "secretStoreRef": {
                            "kind": "ClusterSecretStore",
                            "name": "dev"
                        },
                        "dataFrom": [
                            {
                                "extract": {
                                    "key": "dev/amanibhavam-global"
                                }
                            }
                        ],
                        "target": {
                            "name": "external-dns",
                            "creationPolicy": "Owner"
                        }
                    }
                },
                "cluster-role-binding-admin": {
                    "metadata": {
                        "name": "default-admin"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "default",
                            "namespace": "default"
                        }
                    ],
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cluster-admin"
                    },
                    "kind": "ClusterRoleBinding",
                    "apiVersion": "rbac.authorization.k8s.io/v1"
                },
                "externalsecret-zerossl-production": {
                    "apiVersion": "external-secrets.io/v1beta1",
                    "kind": "ExternalSecret",
                    "metadata": {
                        "name": "zerossl-production",
                        "namespace": "cert-manager"
                    },
                    "spec": {
                        "refreshInterval": "1h",
                        "secretStoreRef": {
                            "kind": "ClusterSecretStore",
                            "name": "dev"
                        },
                        "dataFrom": [
                            {
                                "extract": {
                                    "key": "dev/amanibhavam-global"
                                }
                            }
                        ],
                        "target": {
                            "name": "zerossl-production",
                            "creationPolicy": "Owner"
                        }
                    }
                },
                "clusterpolicy-clusterissuer-zerossl-production": {
                    "apiVersion": "kyverno.io/v1",
                    "kind": "ClusterPolicy",
                    "metadata": {
                        "name": "zerossl-production-clusterissuer"
                    },
                    "spec": {
                        "generateExistingOnPolicyUpdate": true,
                        "rules": [
                            {
                                "name": "create-cluster-issuer",
                                "match": {
                                    "any": [
                                        {
                                            "resources": {
                                                "names": [
                                                    "zerossl-production"
                                                ],
                                                "kinds": [
                                                    "Secret"
                                                ],
                                                "namespaces": [
                                                    "cert-manager"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generate": {
                                    "synchronize": true,
                                    "apiVersion": "cert-manager.io/v1",
                                    "kind": "ClusterIssuer",
                                    "name": "zerossl-production",
                                    "data": {
                                        "spec": {
                                            "acme": {
                                                "server": "https://acme.zerossl.com/v2/DV90",
                                                "email": "{{request.object.data.zerossl_email | base64_decode(@)}}",
                                                "privateKeySecretRef": {
                                                    "name": "zerossl-production-acme"
                                                },
                                                "externalAccountBinding": {
                                                    "keyID": "{{request.object.data.zerossl_eab_kid | base64_decode(@)}}",
                                                    "keySecretRef": {
                                                        "name": "zerossl-production",
                                                        "key": "zerossl-eab-hmac"
                                                    }
                                                },
                                                "solvers": [
                                                    {
                                                        "selector": {},
                                                        "dns01": {
                                                            "cloudflare": {
                                                                "email": "{{request.object.data.cloudflare_email | base64_decode(@)}}",
                                                                "apiTokenSecretRef": {
                                                                    "name": "zerossl-production",
                                                                    "key": "cloudflare-api-token"
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-externalsecret-external-dns.yaml",
                    "resource-cluster-role-binding-admin.yaml",
                    "resource-externalsecret-zerossl-production.yaml",
                    "resource-clusterpolicy-clusterissuer-zerossl-production.yaml"
                ]
            }
        },
        "defn": {
            "app": {
                "defn": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "namespace-defn": {
                    "metadata": {
                        "name": "defn"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                },
                "certificate-defn-run-wildcard-traefik": {
                    "apiVersion": "cert-manager.io/v1",
                    "kind": "Certificate",
                    "metadata": {
                        "name": "defn-run-wildcard",
                        "namespace": "traefik"
                    },
                    "spec": {
                        "secretName": "defn-run-wildcard",
                        "dnsNames": [
                            "*.defn.run",
                            "*.default.defn.run"
                        ],
                        "issuerRef": {
                            "name": "zerossl-production",
                            "kind": "ClusterIssuer",
                            "group": "cert-manager.io"
                        }
                    }
                },
                "workflow-hello": {
                    "apiVersion": "argoproj.io/v1alpha1",
                    "kind": "Workflow",
                    "metadata": {
                        "name": "hello",
                        "namespace": "defn"
                    },
                    "spec": {
                        "entrypoint": "whalesay",
                        "arguments": {
                            "parameters": [
                                {
                                    "name": "message",
                                    "value": "world"
                                }
                            ]
                        },
                        "templates": [
                            {
                                "name": "whalesay",
                                "inputs": {
                                    "parameters": [
                                        {
                                            "name": "message"
                                        }
                                    ]
                                },
                                "container": {
                                    "image": "docker/whalesay",
                                    "command": [
                                        "cowsay"
                                    ],
                                    "args": [
                                        "{{inputs.parameters.message}}"
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-namespace-defn.yaml",
                    "resource-certificate-defn-run-wildcard-traefik.yaml",
                    "resource-workflow-hello.yaml"
                ]
            }
        },
        "global-vc0": {
            "app": {
                "global-vc0": {}
            },
            "namespace": "global-vc0",
            "helm": {
                "release": "vcluster",
                "name": "vcluster",
                "version": "0.15.2",
                "repo": "https://charts.loft.sh",
                "namespace": "",
                "values": {
                    "vcluster": {
                        "image": "rancher/k3s:v1.24.13-k3s1"
                    },
                    "syncer": {
                        "extraArgs": [
                            "--tls-san=vcluster.global-vc0.svc.cluster.local",
                            "--enforce-toleration=env=global-vc0:NoSchedule"
                        ]
                    },
                    "sync": {
                        "nodes": {
                            "enabled": true,
                            "nodeSelector": "env=global"
                        },
                        "pods": {
                            "ephemeralContainers": true
                        },
                        "persistentvolumes": {
                            "enabled": true
                        },
                        "ingresses": {
                            "enabled": true
                        }
                    },
                    "tolerations": [
                        {
                            "key": "env",
                            "value": "global",
                            "operator": "Equal"
                        }
                    ],
                    "affinity": {
                        "nodeAffinity": {
                            "requiredDuringSchedulingIgnoredDuringExecution": {
                                "nodeSelectorTerms": [
                                    {
                                        "matchExpressions": [
                                            {
                                                "key": "env",
                                                "operator": "In",
                                                "values": [
                                                    "global"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "fallbackHostDns": true,
                    "multiNamespaceMode": {
                        "enabled": false
                    },
                    "service": {
                        "type": "LoadBalancer",
                        "loadBalancerClass": "tailscale"
                    }
                }
            },
            "psm": {},
            "resource": {
                "namespace-vcluster": {
                    "metadata": {
                        "name": "global-vc0"
                    },
                    "kind": "Namespace",
                    "apiVersion": "v1"
                }
            },
            "out": {
                "patches": [],
                "namespace": "global-vc0",
                "resources": [
                    "resource-namespace-vcluster.yaml"
                ],
                "helmCharts": [
                    {
                        "releaseName": "vcluster",
                        "namespace": "global-vc0",
                        "valuesInline": {
                            "vcluster": {
                                "image": "rancher/k3s:v1.24.13-k3s1"
                            },
                            "syncer": {
                                "extraArgs": [
                                    "--tls-san=vcluster.global-vc0.svc.cluster.local",
                                    "--enforce-toleration=env=global-vc0:NoSchedule"
                                ]
                            },
                            "sync": {
                                "nodes": {
                                    "enabled": true,
                                    "nodeSelector": "env=global"
                                },
                                "pods": {
                                    "ephemeralContainers": true
                                },
                                "persistentvolumes": {
                                    "enabled": true
                                },
                                "ingresses": {
                                    "enabled": true
                                }
                            },
                            "tolerations": [
                                {
                                    "key": "env",
                                    "value": "global",
                                    "operator": "Equal"
                                }
                            ],
                            "affinity": {
                                "nodeAffinity": {
                                    "requiredDuringSchedulingIgnoredDuringExecution": {
                                        "nodeSelectorTerms": [
                                            {
                                                "matchExpressions": [
                                                    {
                                                        "key": "env",
                                                        "operator": "In",
                                                        "values": [
                                                            "global"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            },
                            "fallbackHostDns": true,
                            "multiNamespaceMode": {
                                "enabled": false
                            },
                            "service": {
                                "type": "LoadBalancer",
                                "loadBalancerClass": "tailscale"
                            }
                        },
                        "name": "vcluster",
                        "version": "0.15.2",
                        "repo": "https://charts.loft.sh",
                        "includeCRDs": true
                    }
                ]
            }
        },
        "k3d-global": {
            "app": {
                "k3d-global": {}
            },
            "namespace": "",
            "psm": {},
            "helm": {
                "release": "bootstrap",
                "name": "any-resource",
                "version": "0.1.0",
                "repo": "https://kiwigrid.github.io",
                "namespace": "",
                "values": {
                    "anyResources": {
                        "coredns": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-coredns\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/coredns\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "kyverno": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-kyverno\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/kyverno\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - ServerSideApply=true\n",
                        "cert-manager": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-cert-manager\n  annotations:\n    argocd.argoproj.io/sync-wave: \"3\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/cert-manager\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "pod-identity-webhook": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-pod-identity-webhook\n  annotations:\n    argocd.argoproj.io/sync-wave: \"10\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/pod-identity-webhook\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "external-secrets-operator": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-external-secrets-operator\n  annotations:\n    argocd.argoproj.io/sync-wave: \"10\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/external-secrets-operator\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "k3d-global-secrets-store": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-secrets-store\n  annotations:\n    argocd.argoproj.io/sync-wave: \"20\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/k3d-global-secrets-store\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "defn-shared": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-defn-shared\n  annotations:\n    argocd.argoproj.io/sync-wave: \"30\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/defn-shared\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "external-dns": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-external-dns\n  annotations:\n    argocd.argoproj.io/sync-wave: \"30\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/external-dns\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "argo-workflows": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-argo-workflows\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n    namespace: argo-workflows\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/argo-workflows\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n",
                        "tfo": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-tfo\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/tfo\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "knative": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-knative\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/knative\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "kourier": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-kourier\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/kourier\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "defn": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-defn\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/defn\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "traefik": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-traefik\n  annotations:\n    argocd.argoproj.io/sync-wave: \"50\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/traefik\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "hello": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-hello\n  annotations:\n    argocd.argoproj.io/sync-wave: \"60\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/hello\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "global-vc0": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-global-vc0\n  annotations:\n    argocd.argoproj.io/sync-wave: \"60\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/global-vc0\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "argo-cd": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-argo-cd\n  annotations:\n    argocd.argoproj.io/sync-wave: \"1000\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/argo-cd\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "cilium": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-cilium\n  annotations:\n    argocd.argoproj.io/sync-wave: \"1000\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/cilium\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n"
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [],
                "helmCharts": [
                    {
                        "releaseName": "bootstrap",
                        "valuesInline": {
                            "anyResources": {
                                "coredns": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-coredns\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/coredns\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "kyverno": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-kyverno\n  annotations:\n    argocd.argoproj.io/sync-wave: \"2\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/kyverno\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - ServerSideApply=true\n",
                                "cert-manager": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-cert-manager\n  annotations:\n    argocd.argoproj.io/sync-wave: \"3\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/cert-manager\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "pod-identity-webhook": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-pod-identity-webhook\n  annotations:\n    argocd.argoproj.io/sync-wave: \"10\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/pod-identity-webhook\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "external-secrets-operator": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-external-secrets-operator\n  annotations:\n    argocd.argoproj.io/sync-wave: \"10\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/external-secrets-operator\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "k3d-global-secrets-store": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-secrets-store\n  annotations:\n    argocd.argoproj.io/sync-wave: \"20\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/k3d-global-secrets-store\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "defn-shared": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-defn-shared\n  annotations:\n    argocd.argoproj.io/sync-wave: \"30\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/defn-shared\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "external-dns": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-external-dns\n  annotations:\n    argocd.argoproj.io/sync-wave: \"30\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/external-dns\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "argo-workflows": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-argo-workflows\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n    namespace: argo-workflows\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/argo-workflows\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n",
                                "tfo": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-tfo\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/tfo\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "knative": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-knative\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/knative\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "kourier": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-kourier\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/kourier\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "defn": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-defn\n  annotations:\n    argocd.argoproj.io/sync-wave: \"40\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/defn\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "traefik": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-traefik\n  annotations:\n    argocd.argoproj.io/sync-wave: \"50\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/traefik\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "hello": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-hello\n  annotations:\n    argocd.argoproj.io/sync-wave: \"60\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/hello\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "global-vc0": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-global-vc0\n  annotations:\n    argocd.argoproj.io/sync-wave: \"60\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/global-vc0\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "argo-cd": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-argo-cd\n  annotations:\n    argocd.argoproj.io/sync-wave: \"1000\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/argo-cd\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "cilium": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global-cilium\n  annotations:\n    argocd.argoproj.io/sync-wave: \"1000\"\nspec:\n  project: default\n  destination:\n    name: k3d-global\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/cilium\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n"
                            }
                        },
                        "name": "any-resource",
                        "version": "0.1.0",
                        "repo": "https://kiwigrid.github.io",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {}
        },
        "vcluster-global-vc0": {
            "app": {
                "vcluster-global-vc0": {}
            },
            "namespace": "",
            "psm": {},
            "helm": {
                "release": "bootstrap",
                "name": "any-resource",
                "version": "0.1.0",
                "repo": "https://kiwigrid.github.io",
                "namespace": "",
                "values": {
                    "anyResources": {
                        "external-secrets-operator": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0-external-secrets-operator\n  annotations:\n    argocd.argoproj.io/sync-wave: \"10\"\nspec:\n  project: default\n  destination:\n    name: vcluster-global-vc0\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/external-secrets-operator\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "vcluster-global-vc0-secrets-store": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0-secrets-store\n  annotations:\n    argocd.argoproj.io/sync-wave: \"20\"\nspec:\n  project: default\n  destination:\n    name: vcluster-global-vc0\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/vcluster-global-vc0-secrets-store\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                        "coder": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0-coder\n  annotations:\n    argocd.argoproj.io/sync-wave: \"30\"\nspec:\n  project: default\n  destination:\n    name: vcluster-global-vc0\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/coder\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n"
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [],
                "helmCharts": [
                    {
                        "releaseName": "bootstrap",
                        "valuesInline": {
                            "anyResources": {
                                "external-secrets-operator": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0-external-secrets-operator\n  annotations:\n    argocd.argoproj.io/sync-wave: \"10\"\nspec:\n  project: default\n  destination:\n    name: vcluster-global-vc0\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/external-secrets-operator\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "vcluster-global-vc0-secrets-store": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0-secrets-store\n  annotations:\n    argocd.argoproj.io/sync-wave: \"20\"\nspec:\n  project: default\n  destination:\n    name: vcluster-global-vc0\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/vcluster-global-vc0-secrets-store\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n",
                                "coder": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0-coder\n  annotations:\n    argocd.argoproj.io/sync-wave: \"30\"\nspec:\n  project: default\n  destination:\n    name: vcluster-global-vc0\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/coder\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions: []\n"
                            }
                        },
                        "name": "any-resource",
                        "version": "0.1.0",
                        "repo": "https://kiwigrid.github.io",
                        "includeCRDs": true
                    }
                ]
            },
            "resource": {}
        },
        "k3d-global-secrets-store": {
            "app": {
                "k3d-global-secrets-store": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "cluster-secret-store-dev": {
                    "apiVersion": "external-secrets.io/v1beta1",
                    "kind": "ClusterSecretStore",
                    "metadata": {
                        "name": "dev"
                    },
                    "spec": {
                        "provider": {
                            "vault": {
                                "server": "http://169.254.32.1:8200",
                                "path": "kv",
                                "version": "v2",
                                "auth": {
                                    "kubernetes": {
                                        "mountPath": "k3d-global",
                                        "role": "external-secrets"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-cluster-secret-store-dev.yaml"
                ]
            }
        },
        "vcluster-global-vc0-secrets-store": {
            "app": {
                "vcluster-global-vc0-secrets-store": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "cluster-secret-store-dev": {
                    "apiVersion": "external-secrets.io/v1beta1",
                    "kind": "ClusterSecretStore",
                    "metadata": {
                        "name": "dev"
                    },
                    "spec": {
                        "provider": {
                            "vault": {
                                "server": "http://169.254.32.1:8200",
                                "path": "kv",
                                "version": "v2",
                                "auth": {
                                    "kubernetes": {
                                        "mountPath": "vcluster-global-vc0",
                                        "role": "external-secrets"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-cluster-secret-store-dev.yaml"
                ]
            }
        },
        "rocky": {
            "app": {
                "rocky": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "pre-sync-hook-egg": {
                    "apiVersion": "tf.isaaguilar.com/v1alpha2",
                    "kind": "Terraform",
                    "metadata": {
                        "name": "rocky-egg",
                        "namespace": "default",
                        "annotations": {
                            "argocd.argoproj.io/hook": "PreSync",
                            "argocd.argoproj.io/sync-wave": "0"
                        }
                    },
                    "spec": {
                        "terraformVersion": "1.0.0",
                        "terraformModule": {
                            "source": "https://github.com/ppm.git//app/tf/m/egg?ref=main"
                        },
                        "taskOptions": [
                            {
                                "for": [
                                    "*"
                                ],
                                "env": [
                                    {
                                        "name": "TF_VAR_egg",
                                        "value": "rocky"
                                    }
                                ]
                            }
                        ],
                        "serviceAccount": "default",
                        "scmAuthMethods": [],
                        "ignoreDelete": true,
                        "keepLatestPodsOnly": true,
                        "backend": "terraform {\n\tbackend \"kubernetes\" {\n\t\tin_cluster_config = true\n\t\tsecret_suffix     = \"rocky-egg\"\n\t\tnamespace         = \"default\"\n\t}\n}"
                    }
                },
                "pre-sync-hook-hatch-egg": {
                    "metadata": {
                        "name": "hatch-rocky-egg",
                        "namespace": "default",
                        "annotations": {
                            "argocd.argoproj.io/hook": "PreSync",
                            "argocd.argoproj.io/sync-wave": "1"
                        }
                    },
                    "spec": {
                        "backoffLimit": 0,
                        "template": {
                            "spec": {
                                "serviceAccountName": "default",
                                "containers": [
                                    {
                                        "name": "meh",
                                        "image": "defn/dev:kubectl",
                                        "command": [
                                            "bash",
                                            "-c"
                                        ],
                                        "args": [
                                            "test \"completed\" == \"$(kubectl get tf rocky-egg -o json | jq -r '.status.phase')\""
                                        ]
                                    }
                                ],
                                "restartPolicy": "Never"
                            }
                        }
                    },
                    "kind": "Job",
                    "apiVersion": "batch/v1"
                },
                "tfo-demo-rocky": {
                    "apiVersion": "tf.isaaguilar.com/v1alpha2",
                    "kind": "Terraform",
                    "metadata": {
                        "name": "rocky",
                        "namespace": "default"
                    },
                    "spec": {
                        "terraformVersion": "1.0.0",
                        "terraformModule": {
                            "source": "https://github.com/defn/dev/m.git//tf/chicken?ref=main"
                        },
                        "taskOptions": [
                            {
                                "for": [
                                    "*"
                                ],
                                "env": [
                                    {
                                        "name": "TF_VAR_chicken",
                                        "value": "rocky"
                                    }
                                ]
                            }
                        ],
                        "serviceAccount": "default",
                        "scmAuthMethods": [],
                        "ignoreDelete": true,
                        "keepLatestPodsOnly": true,
                        "outputsToOmit": [
                            "0"
                        ],
                        "backend": "terraform {\n  backend \"kubernetes\" {\n    in_cluster_config = true\n    secret_suffix     = \"rocky\"\n    namespace         = \"default\"\n  }\n}"
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-pre-sync-hook-egg.yaml",
                    "resource-pre-sync-hook-hatch-egg.yaml",
                    "resource-tfo-demo-rocky.yaml"
                ]
            }
        },
        "rosie": {
            "app": {
                "rosie": {}
            },
            "namespace": "",
            "psm": {},
            "resource": {
                "pre-sync-hook-egg": {
                    "apiVersion": "tf.isaaguilar.com/v1alpha2",
                    "kind": "Terraform",
                    "metadata": {
                        "name": "rosie-egg",
                        "namespace": "default",
                        "annotations": {
                            "argocd.argoproj.io/hook": "PreSync",
                            "argocd.argoproj.io/sync-wave": "0"
                        }
                    },
                    "spec": {
                        "terraformVersion": "1.0.0",
                        "terraformModule": {
                            "source": "https://github.com/ppm.git//app/tf/m/egg?ref=main"
                        },
                        "taskOptions": [
                            {
                                "for": [
                                    "*"
                                ],
                                "env": [
                                    {
                                        "name": "TF_VAR_egg",
                                        "value": "rosie"
                                    }
                                ]
                            }
                        ],
                        "serviceAccount": "default",
                        "scmAuthMethods": [],
                        "ignoreDelete": true,
                        "keepLatestPodsOnly": true,
                        "backend": "terraform {\n\tbackend \"kubernetes\" {\n\t\tin_cluster_config = true\n\t\tsecret_suffix     = \"rosie-egg\"\n\t\tnamespace         = \"default\"\n\t}\n}"
                    }
                },
                "pre-sync-hook-hatch-egg": {
                    "metadata": {
                        "name": "hatch-rosie-egg",
                        "namespace": "default",
                        "annotations": {
                            "argocd.argoproj.io/hook": "PreSync",
                            "argocd.argoproj.io/sync-wave": "1"
                        }
                    },
                    "spec": {
                        "backoffLimit": 0,
                        "template": {
                            "spec": {
                                "serviceAccountName": "default",
                                "containers": [
                                    {
                                        "name": "meh",
                                        "image": "defn/dev:kubectl",
                                        "command": [
                                            "bash",
                                            "-c"
                                        ],
                                        "args": [
                                            "test \"completed\" == \"$(kubectl get tf rosie-egg -o json | jq -r '.status.phase')\""
                                        ]
                                    }
                                ],
                                "restartPolicy": "Never"
                            }
                        }
                    },
                    "kind": "Job",
                    "apiVersion": "batch/v1"
                },
                "tfo-demo-rosie": {
                    "apiVersion": "tf.isaaguilar.com/v1alpha2",
                    "kind": "Terraform",
                    "metadata": {
                        "name": "rosie",
                        "namespace": "default"
                    },
                    "spec": {
                        "terraformVersion": "1.0.0",
                        "terraformModule": {
                            "source": "https://github.com/defn/dev/m.git//tf/chicken?ref=main"
                        },
                        "taskOptions": [
                            {
                                "for": [
                                    "*"
                                ],
                                "env": [
                                    {
                                        "name": "TF_VAR_chicken",
                                        "value": "rosie"
                                    }
                                ]
                            }
                        ],
                        "serviceAccount": "default",
                        "scmAuthMethods": [],
                        "ignoreDelete": true,
                        "keepLatestPodsOnly": true,
                        "outputsToOmit": [
                            "0"
                        ],
                        "backend": "terraform {\n  backend \"kubernetes\" {\n    in_cluster_config = true\n    secret_suffix     = \"rosie\"\n    namespace         = \"default\"\n  }\n}"
                    }
                }
            },
            "out": {
                "patches": [],
                "resources": [
                    "resource-pre-sync-hook-egg.yaml",
                    "resource-pre-sync-hook-hatch-egg.yaml",
                    "resource-tfo-demo-rosie.yaml"
                ]
            }
        }
    },
    "gen": {
        "k": {
            "hello/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: default\nresources:\n  - resource-ingressroute-default.defn.run.yaml\n  - resource-kservice-hello.yaml\n  - resource-kservice-bye.yaml\n",
            "events/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: default\nresources:\n  - events.yaml\n",
            "demo1/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - https://bit.ly/demokuma\n",
            "demo2/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - https://raw.githubusercontent.com/kumahq/kuma-counter-demo/master/demo.yaml\n",
            "coredns/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-configmap-coredns.yaml\n",
            "argo-cd/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-service-argocd-server.yaml\n  - path: patch-configmap-argocd-cm.yaml\nnamespace: argocd\nresources:\n  - resource-namespace-argocd.yaml\n  - https://raw.githubusercontent.com/argoproj/argo-cd/v2.7.1/manifests/install.yaml\n  - resource-ingress-argo-cd.yaml\n",
            "argo-events/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: argo-events\nresources:\n  - resource-namespace-argo-events.yaml\nhelmCharts:\n  - releaseName: argo-events\n    namespace: argo-events\n    valuesInline: {}\n    name: argo-events\n    version: 2.0.6\n    repo: https://argoproj.github.io/argo-helm\n    includeCRDs: true\n",
            "argo-workflows/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-namespace-argo-workflows.yaml\nhelmCharts:\n  - releaseName: argo-workflows\n    namespace: argo-workflows\n    valuesInline:\n      controller:\n        workflowNamespaces:\n          - argo-workflows\n          - defn\n    name: argo-workflows\n    version: 0.29.2\n    repo: https://argoproj.github.io/argo-helm\n    includeCRDs: true\n",
            "coder/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: coder\nresources:\n  - resource-namespace-coder.yaml\n  - resource-ingress-coder.yaml\n  - resource-externalsecret-coder.yaml\nhelmCharts:\n  - releaseName: coder\n    namespace: coder\n    valuesInline:\n      coder:\n        service:\n          type: ClusterIP\n        env:\n          - name: CODER_ACCESS_URL\n            valueFrom:\n              secretKeyRef:\n                name: coder\n                key: CODER_ACCESS_URL\n    name: coder\n    version: 0.24.1\n    repo: https://helm.coder.com/v2\n    includeCRDs: true\n",
            "kyverno/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: kyverno\nresources:\n  - resource-namespace-kyverno.yaml\n  - resource-clusterrole-create-clusterissuers.yaml\nhelmCharts:\n  - releaseName: kyverno\n    namespace: kyverno\n    valuesInline:\n      replicaCount: 1\n    name: kyverno\n    version: 3.0.1\n    repo: https://kyverno.github.io/kyverno\n    includeCRDs: true\n",
            "keda/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: keda\nresources:\n  - resource-namespace-keda.yaml\nhelmCharts:\n  - releaseName: keda\n    namespace: keda\n    valuesInline: {}\n    name: keda\n    version: 2.8.2\n    repo: https://kedacore.github.io/charts\n    includeCRDs: true\n",
            "external-dns/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: external-dns\nresources:\n  - resource-namespace-external-dns.yaml\nhelmCharts:\n  - releaseName: external-dns\n    namespace: external-dns\n    valuesInline:\n      logLevel: debug\n      sources:\n        - service\n        - ingress\n      provider: cloudflare\n      cloudflare:\n        email: cloudflare@defn.us\n        proxied: false\n      domainFilters:\n        - defn.run\n    name: external-dns\n    version: 6.20.3\n    repo: https://charts.bitnami.com/bitnami\n    includeCRDs: true\n",
            "vault/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-statefulset-vault-set-vault-token.yaml\nnamespace: vault\nresources:\n  - resource-namespace-vault.yaml\nhelmCharts:\n  - releaseName: vault\n    namespace: vault\n    valuesInline:\n      server:\n        dataStorage:\n          size: 1Gi\n        standalone:\n          config: |\n            disable_mlock = true\n            ui = true\n\n            listener \"tcp\" {\n              tls_disable = 1\n              address = \"[::]:8200\"\n              cluster_address = \"[::]:8201\"\n            }\n\n            storage \"file\" {\n              path = \"/vault/data\"\n            }\n\n            seal \"transit\" {\n              address = \"http://vault.default.svc:8200\"\n              disable_renewal = \"false\"\n              key_name = \"autounseal-remo\"\n              mount_path = \"transit/\"\n              tls_skip_verify = \"true\"\n            }\n    name: vault\n    version: 0.20.1\n    repo: https://helm.releases.hashicorp.com\n    includeCRDs: true\n",
            "kourier/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-service-kourier-set-cluster-ip.yaml\nresources:\n  - https://github.com/knative-sandbox/net-kourier/releases/download/knative-v1.10.0/kourier.yaml\n  - resource-ingress-default-wildcard.yaml\n",
            "dev/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: default\nresources:\n  - resource-statefulset-dev.yaml\n  - resource-service-dev.yaml\n  - resource-cluster-role-binding-admin.yaml\n  - resource-cluster-role-binding-delegator.yaml\n",
            "external-secrets-operator/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: external-secrets\nresources:\n  - resource-namespace-external-secrets.yaml\n  - resource-cluster-role-binding-delegator.yaml\nhelmCharts:\n  - releaseName: external-secrets\n    namespace: external-secrets\n    valuesInline:\n      webhook:\n        create: false\n      certController:\n        create: false\n    name: external-secrets\n    version: 0.8.3\n    repo: https://charts.external-secrets.io\n    includeCRDs: true\n",
            "pod-identity-webhook/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: default\nresources: []\nhelmCharts:\n  - releaseName: pod-identity-webhook\n    namespace: default\n    valuesInline:\n      pki:\n        certManager:\n          certificate:\n            duration: 2160h0m0s\n            renewBefore: 360h0m0s\n    name: amazon-eks-pod-identity-webhook\n    version: 1.2.0\n    repo: https://jkroepke.github.io/helm-charts\n    includeCRDs: true\n",
            "karpenter/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: karpenter\nresources:\n  - karpenter.yaml\n  - resource-namespace-karpenter.yaml\n",
            "knative/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-namespace-knative-serving.yaml\n  - path: patch-deployment-webhook.yaml\n  - path: patch-deployment-domainmappingwebhook.yaml\n  - path: patch-deployment-domain-mapping.yaml\n  - path: patch-deployment-controller.yaml\n  - path: patch-deployment-autoscaler.yaml\n  - path: patch-deployment-activator.yaml\n  - path: patch-config-map-config-defaults.yaml\n  - path: patch-config-map-config-domain.yaml\n  - path: patch-config-map-config-features.yaml\n  - path: patch-config-map-config-network.yaml\nresources:\n  - https://github.com/knative/serving/releases/download/knative-v1.10.0/serving-core.yaml\n",
            "cert-manager/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-namespace-cert-manager.yaml\n  - https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.crds.yaml\n  - resource-clusterissuer-cilium.yaml\nhelmCharts:\n  - releaseName: cert-manager\n    namespace: cert-manager\n    valuesInline:\n      ingressShim:\n        defaultIssuerName: zerossl-production\n        defaultIssuerKind: ClusterIssuer\n      global:\n        logLevel: 4\n    name: cert-manager\n    version: 1.12.2\n    repo: https://charts.jetstack.io\n    includeCRDs: true\n",
            "cilium/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: kube-system\nresources:\n  - resource-ingress-hubble-ui.yaml\nhelmCharts:\n  - releaseName: cilium\n    namespace: kube-system\n    valuesInline:\n      operator:\n        replicas: 1\n      hubble:\n        relay:\n          enabled: true\n        ui:\n          enabled: true\n        tls:\n          auto:\n            method: certmanager\n            certManagerIssuerRef:\n              name: cilium-ca\n              kind: ClusterIssuer\n              group: cert-manager.io\n    name: cilium\n    version: 1.13.4\n    repo: https://helm.cilium.io\n    includeCRDs: true\n",
            "nginx/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-service-nginx.yaml\nnamespace: nginx\nresources:\n  - resource-namespace-nginx.yaml\nhelmCharts:\n  - releaseName: nginx\n    namespace: nginx\n    valuesInline: {}\n    name: nginx\n    version: 15.0.2\n    repo: https://charts.bitnami.com/bitnami\n    includeCRDs: true\n",
            "traefik/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-ingressroute-traefik-dashboard.yaml\n  - path: patch-service-tailscale.yaml\nnamespace: traefik\nresources:\n  - resource-namespace-traefik.yaml\n  - resource-tlsstore-traefik.yaml\n  - resource-serverstransport-insecure.yaml\n  - resource-ingressroute-http-to-https.yaml\n  - resource-middleware-http-to-https.yaml\nhelmCharts:\n  - releaseName: traefik\n    namespace: traefik\n    valuesInline:\n      logs:\n        general:\n          level: DEBUG\n        access:\n          enabled: true\n      providers:\n        kubernetesIngress:\n          publishedService:\n            enabled: true\n          allowExternalNameServices: true\n        kubernetesCRD:\n          allowExternalNameServices: true\n          allowCrossNamespace: true\n    name: traefik\n    version: 23.1.0\n    repo: https://traefik.github.io/charts\n    includeCRDs: true\n",
            "caddy/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-service-tailscale.yaml\nnamespace: caddy\nresources:\n  - resource-namespace-caddy.yaml\nhelmCharts:\n  - releaseName: caddy\n    namespace: caddy\n    valuesInline:\n      listenPort: 80\n      https:\n        enabled: true\n        port: 443\n      config:\n        global: |-\n          auto_https disable_certs\n\n          local_certs\n\n          log {\n              output stdout\n          }\n        caddyFile: |-\n          https://*.defn.run {\n              tls /certs/tls.crt /certs/tls.key\n              reverse_proxy {http.request.host.labels.2}.default.svc.cluster.local:80 {\n                  header_up -Host\n                  header_up X-defn-label0\t\"{http.request.host.labels.0}\"\n                  header_up X-defn-label1\t\"{http.request.host.labels.1}\"\n                  header_up X-defn-label2\t\"{http.request.host.labels.2}\"\n              }\n          }\n      volumes:\n        - name: certs\n          secret:\n            secretName: defn-run-wildcard\n            optional: false\n      volumeMounts:\n        - name: certs\n          mountPath: /certs\n    name: caddy\n    version: 0.2.4\n    repo: https://charts.alekc.dev\n    includeCRDs: true\n",
            "tfo/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: tf-system\nresources:\n  - https://raw.githubusercontent.com/isaaguilar/terraform-operator/master/deploy/bundles/v0.10.0/v0.10.0.yaml\n",
            "bonchon/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-tfo-demo-bonchon.yaml\n  - resource-pre-sync-hook-dry-brine-rocky-chicken.yaml\n  - resource-pre-sync-hook-dry-brine-rosie-chicken.yaml\n",
            "sysbox/kustomization.yaml": "#ManagedBy: cue\n\npatches:\n  - path: patch-daemonset-vault-set-vault-token.yaml\nresources:\n  - https://raw.githubusercontent.com/nestybox/sysbox/master/sysbox-k8s-manifests/sysbox-install.yaml\n",
            "defn-shared/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-externalsecret-external-dns.yaml\n  - resource-cluster-role-binding-admin.yaml\n  - resource-externalsecret-zerossl-production.yaml\n  - resource-clusterpolicy-clusterissuer-zerossl-production.yaml\n",
            "defn/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-namespace-defn.yaml\n  - resource-certificate-defn-run-wildcard-traefik.yaml\n  - resource-workflow-hello.yaml\n",
            "global-vc0/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nnamespace: global-vc0\nresources:\n  - resource-namespace-vcluster.yaml\nhelmCharts:\n  - releaseName: vcluster\n    namespace: global-vc0\n    valuesInline:\n      vcluster:\n        image: rancher/k3s:v1.24.13-k3s1\n      syncer:\n        extraArgs:\n          - --tls-san=vcluster.global-vc0.svc.cluster.local\n          - --enforce-toleration=env=global-vc0:NoSchedule\n      sync:\n        nodes:\n          enabled: true\n          nodeSelector: env=global\n        pods:\n          ephemeralContainers: true\n        persistentvolumes:\n          enabled: true\n        ingresses:\n          enabled: true\n      tolerations:\n        - key: env\n          value: global\n          operator: Equal\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: env\n                    operator: In\n                    values:\n                      - global\n      fallbackHostDns: true\n      multiNamespaceMode:\n        enabled: false\n      service:\n        type: LoadBalancer\n        loadBalancerClass: tailscale\n    name: vcluster\n    version: 0.15.2\n    repo: https://charts.loft.sh\n    includeCRDs: true\n",
            "k3d-global/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources: []\nhelmCharts:\n  - releaseName: bootstrap\n    valuesInline:\n      anyResources:\n        coredns: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-coredns\n            annotations:\n              argocd.argoproj.io/sync-wave: \"2\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/coredns\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        kyverno: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-kyverno\n            annotations:\n              argocd.argoproj.io/sync-wave: \"2\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/kyverno\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions:\n                - ServerSideApply=true\n        cert-manager: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-cert-manager\n            annotations:\n              argocd.argoproj.io/sync-wave: \"3\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/cert-manager\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        pod-identity-webhook: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-pod-identity-webhook\n            annotations:\n              argocd.argoproj.io/sync-wave: \"10\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/pod-identity-webhook\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        external-secrets-operator: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-external-secrets-operator\n            annotations:\n              argocd.argoproj.io/sync-wave: \"10\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/external-secrets-operator\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        k3d-global-secrets-store: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-secrets-store\n            annotations:\n              argocd.argoproj.io/sync-wave: \"20\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/k3d-global-secrets-store\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        defn-shared: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-defn-shared\n            annotations:\n              argocd.argoproj.io/sync-wave: \"30\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/defn-shared\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        external-dns: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-external-dns\n            annotations:\n              argocd.argoproj.io/sync-wave: \"30\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/external-dns\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        argo-workflows: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-argo-workflows\n            annotations:\n              argocd.argoproj.io/sync-wave: \"40\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n              namespace: argo-workflows\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/argo-workflows\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions:\n                - CreateNamespace=true\n        tfo: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-tfo\n            annotations:\n              argocd.argoproj.io/sync-wave: \"40\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/tfo\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        knative: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-knative\n            annotations:\n              argocd.argoproj.io/sync-wave: \"40\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/knative\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        kourier: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-kourier\n            annotations:\n              argocd.argoproj.io/sync-wave: \"40\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/kourier\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        defn: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-defn\n            annotations:\n              argocd.argoproj.io/sync-wave: \"40\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/defn\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        traefik: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-traefik\n            annotations:\n              argocd.argoproj.io/sync-wave: \"50\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/traefik\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        hello: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-hello\n            annotations:\n              argocd.argoproj.io/sync-wave: \"60\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/hello\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        global-vc0: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-global-vc0\n            annotations:\n              argocd.argoproj.io/sync-wave: \"60\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/global-vc0\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        argo-cd: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-argo-cd\n            annotations:\n              argocd.argoproj.io/sync-wave: \"1000\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/argo-cd\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        cilium: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: k3d-global-cilium\n            annotations:\n              argocd.argoproj.io/sync-wave: \"1000\"\n          spec:\n            project: default\n            destination:\n              name: k3d-global\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/cilium\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n    name: any-resource\n    version: 0.1.0\n    repo: https://kiwigrid.github.io\n    includeCRDs: true\n",
            "vcluster-global-vc0/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources: []\nhelmCharts:\n  - releaseName: bootstrap\n    valuesInline:\n      anyResources:\n        external-secrets-operator: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: vcluster-global-vc0-external-secrets-operator\n            annotations:\n              argocd.argoproj.io/sync-wave: \"10\"\n          spec:\n            project: default\n            destination:\n              name: vcluster-global-vc0\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/external-secrets-operator\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        vcluster-global-vc0-secrets-store: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: vcluster-global-vc0-secrets-store\n            annotations:\n              argocd.argoproj.io/sync-wave: \"20\"\n          spec:\n            project: default\n            destination:\n              name: vcluster-global-vc0\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/vcluster-global-vc0-secrets-store\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n        coder: |\n          apiVersion: argoproj.io/v1alpha1\n          kind: Application\n          metadata:\n            namespace: argocd\n            name: vcluster-global-vc0-coder\n            annotations:\n              argocd.argoproj.io/sync-wave: \"30\"\n          spec:\n            project: default\n            destination:\n              name: vcluster-global-vc0\n            source:\n              repoURL: https://github.com/defn/dev\n              targetRevision: main\n              path: m/r/coder\n            syncPolicy:\n              automated:\n                prune: true\n                selfHeal: true\n              syncOptions: []\n    name: any-resource\n    version: 0.1.0\n    repo: https://kiwigrid.github.io\n    includeCRDs: true\n",
            "k3d-global-secrets-store/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-cluster-secret-store-dev.yaml\n",
            "vcluster-global-vc0-secrets-store/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-cluster-secret-store-dev.yaml\n",
            "rocky/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-pre-sync-hook-egg.yaml\n  - resource-pre-sync-hook-hatch-egg.yaml\n  - resource-tfo-demo-rocky.yaml\n",
            "rosie/kustomization.yaml": "#ManagedBy: cue\n\npatches: []\nresources:\n  - resource-pre-sync-hook-egg.yaml\n  - resource-pre-sync-hook-hatch-egg.yaml\n  - resource-tfo-demo-rosie.yaml\n",
            "argo-cd/patch-service-argocd-server.yaml": "#ManagedBy: cue\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: argocd-server\n  annotations:\n    traefik.ingress.kubernetes.io/service.serverstransport: traefik-insecure@kubernetescrd\n",
            "argo-cd/patch-configmap-argocd-cm.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: argocd-cm\ndata:\n  kustomize.buildOptions: --enable-helm\n  application.resourceTrackingMethod: annotation\n  resource.customizations.health.networking.k8s.io_Ingress: |-\n    hs = {}\n    hs.status = \"Healthy\"\n    return hs\n  resource.customizations.health.tf.isaaguilar.com_Terraform: |-\n    hs = {}\n    hs.status = \"Progressing\"\n    hs.message = \"\"\n    if obj.status ~= nil then\n        if obj.status.phase ~= nil then\n              if obj.status.phase == \"completed\" then\n                   hs.status = \"Healthy\"\n             end\n\n              if obj.status.stage ~= nil then\n                if obj.status.stage.reason ~= nil then\n                      hs.message = obj.status.stage.reason\n                end\n              end\n        end\n    end\n    return hs\n  resource.customizations.health.argoproj.io_Application: |-\n    hs = {}\n    hs.status = \"Progressing\"\n    hs.message = \"\"\n    if obj.status ~= nil then\n        if obj.status.health ~= nil then\n        hs.status = obj.status.health.status\n        if obj.status.health.message ~= nil then\n            hs.message = obj.status.health.message\n        end\n        end\n    end\n    return hs\n  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |\n    jsonPointers:\n      - /webhooks/0/clientConfig/caBundle\n      - /webhooks/0/rules\n  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |\n    jsonPointers:\n      - /webhooks/0/rules\n  resource.customizations.ignoreDifferences.apps_Deployment: |\n    jsonPointers:\n      - /spec/template/spec/tolerations\n  resource.customizations.ignoreDifferences.kyverno.io_ClusterPolicy: |\n    jqPathExpressions:\n      - .spec.rules[] | select(.name|test(\"autogen-.\"))\nkind: ConfigMap\napiVersion: v1\n",
            "vault/patch-statefulset-vault-set-vault-token.yaml": "#ManagedBy: cue\n\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: vault\n  namespace: vault\nspec:\n  template:\n    spec:\n      containers:\n        - name: vault\n          env:\n            - name: VAULT_TOKEN\n              valueFrom:\n                secretKeyRef:\n                  name: vault-unseal\n                  key: VAULT_TOKEN\n",
            "kourier/patch-service-kourier-set-cluster-ip.yaml": "#ManagedBy: cue\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: kourier\n  namespace: kourier-system\nspec:\n  type: ClusterIP\n",
            "knative/patch-namespace-knative-serving.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: knative-serving\nkind: Namespace\napiVersion: v1\n",
            "knative/patch-deployment-webhook.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: webhook\n  namespace: knative-serving\nkind: Deployment\napiVersion: apps/v1\n",
            "knative/patch-deployment-domainmappingwebhook.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: domainmapping-webhook\n  namespace: knative-serving\nkind: Deployment\napiVersion: apps/v1\n",
            "knative/patch-deployment-domain-mapping.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: domain-mapping\n  namespace: knative-serving\nkind: Deployment\napiVersion: apps/v1\n",
            "knative/patch-deployment-controller.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: controller\n  namespace: knative-serving\nkind: Deployment\napiVersion: apps/v1\n",
            "knative/patch-deployment-autoscaler.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: autoscaler\n  namespace: knative-serving\nkind: Deployment\napiVersion: apps/v1\n",
            "knative/patch-deployment-activator.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: activator\n  namespace: knative-serving\nkind: Deployment\napiVersion: apps/v1\n",
            "knative/patch-config-map-config-defaults.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: config-defaults\n  namespace: knative-serving\ndata:\n  revision-timeout-seconds: \"1800\"\n  max-revision-timeout-seconds: \"1800\"\nkind: ConfigMap\napiVersion: v1\n",
            "knative/patch-config-map-config-domain.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: config-domain\n  namespace: knative-serving\ndata:\n  defn.run: \"\"\nkind: ConfigMap\napiVersion: v1\n",
            "knative/patch-config-map-config-features.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: config-features\n  namespace: knative-serving\ndata:\n  kubernetes.podspec-affinity: enabled\n  kubernetes.podspec-tolerations: enabled\nkind: ConfigMap\napiVersion: v1\n",
            "knative/patch-config-map-config-network.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: config-network\n  namespace: knative-serving\ndata:\n  ingress.class: kourier.ingress.networking.knative.dev\nkind: ConfigMap\napiVersion: v1\n",
            "nginx/patch-service-nginx.yaml": "#ManagedBy: cue\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\n  namespace: nginx\nspec:\n  type: ClusterIP\n",
            "traefik/patch-ingressroute-traefik-dashboard.yaml": "#ManagedBy: cue\n\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-dashboard\n  namespace: traefik\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: Host(`traefik.defn.run`) \u0026\u0026 (PathPrefix(`/api`) || PathPrefix(`/dashboard`))\n      kind: Rule\n      services:\n        - name: api@internal\n          kind: TraefikService\n      middlewares:\n        - name: http-to-https\n",
            "traefik/patch-service-tailscale.yaml": "#ManagedBy: cue\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: traefik\n  namespace: traefik\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: traefik.defn.run\nspec:\n  type: LoadBalancer\n  loadBalancerClass: tailscale\n",
            "caddy/patch-service-tailscale.yaml": "#ManagedBy: cue\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: caddy\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: caddy.defn.run\nspec:\n  type: LoadBalancer\n  loadBalancerClass: tailscale\n",
            "sysbox/patch-daemonset-vault-set-vault-token.yaml": "#ManagedBy: cue\n\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: sysbox-deploy-k8s\n  namespace: kube-system\nspec:\n  template:\n    spec:\n      tolerations:\n        - key: env\n          operator: Exists\n",
            "hello/resource-ingressroute-default.defn.run.yaml": "#ManagedBy: cue\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: default.defn.run\n  namespace: default\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - match: HostRegexp(`{subdomain:[a-z0-9-]+}.default.defn.run`)\n      kind: Rule\n      services:\n        - name: kourier-internal\n          namespace: kourier-system\n          kind: Service\n          port: 80\n          scheme: http\n",
            "hello/resource-kservice-hello.yaml": "#ManagedBy: cue\n\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: hello\n  namespace: default\nspec:\n  template:\n    spec:\n      containerConcurrency: 0\n      containers:\n        - name: whoami\n          image: containous/whoami:latest\n          ports:\n            - containerPort: 80\n  traffic:\n    - latestRevision: true\n      percent: 100\n",
            "hello/resource-kservice-bye.yaml": "#ManagedBy: cue\n\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: bye\n  namespace: default\nspec:\n  template:\n    spec:\n      containerConcurrency: 0\n      containers:\n        - name: whoami\n          image: containous/whoami:latest\n          ports:\n            - containerPort: 80\n  traffic:\n    - latestRevision: true\n      percent: 100\n",
            "coredns/resource-configmap-coredns.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: coredns-custom\n  namespace: kube-system\ndata:\n  ts.net.server: |2-\n      ts.net {\n        forward . 100.100.100.100\n       }\nkind: ConfigMap\napiVersion: v1\n",
            "argo-cd/resource-namespace-argocd.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: argocd\nkind: Namespace\napiVersion: v1\n",
            "argo-cd/resource-ingress-argo-cd.yaml": "#ManagedBy: cue\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argo-cd\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: argocd.defn.run\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\nspec:\n  ingressClassName: traefik\n  rules:\n    - host: argocd.defn.run\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: argocd-server\n                port:\n                  number: 443\n",
            "argo-events/resource-namespace-argo-events.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: argo-events\nkind: Namespace\napiVersion: v1\n",
            "argo-workflows/resource-namespace-argo-workflows.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: argo-workflows\nkind: Namespace\napiVersion: v1\n",
            "coder/resource-namespace-coder.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: coder\nkind: Namespace\napiVersion: v1\n",
            "coder/resource-ingress-coder.yaml": "#ManagedBy: cue\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: coder\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: coder.defn.run\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\nspec:\n  ingressClassName: traefik\n  rules:\n    - host: coder.defn.run\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: coder\n                port:\n                  number: 80\n",
            "coder/resource-externalsecret-coder.yaml": "#ManagedBy: cue\n\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: coder\n  namespace: coder\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    kind: ClusterSecretStore\n    name: dev\n  dataFrom:\n    - extract:\n        key: dev/amanibhavam-global-coder\n  target:\n    name: coder\n    creationPolicy: Owner\n",
            "kyverno/resource-namespace-kyverno.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: kyverno\nkind: Namespace\napiVersion: v1\n",
            "kyverno/resource-clusterrole-create-clusterissuers.yaml": "#ManagedBy: cue\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: kyverno:generate-clusterissuers\n  labels:\n    app.kubernetes.io/instance: kyverno\n    app.kubernetes.io/name: kyverno\nrules:\n  - apiGroups:\n      - cert-manager.io\n    resources:\n      - clusterissuers\n    verbs:\n      - create\n      - update\n      - patch\n      - delete\n",
            "keda/resource-namespace-keda.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: keda\nkind: Namespace\napiVersion: v1\n",
            "external-dns/resource-namespace-external-dns.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: external-dns\nkind: Namespace\napiVersion: v1\n",
            "vault/resource-namespace-vault.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: vault\nkind: Namespace\napiVersion: v1\n",
            "kourier/resource-ingress-default-wildcard.yaml": "#ManagedBy: cue\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: default-wildcard\n  namespace: kourier-system\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: '*.default.defn.run'\nspec:\n  ingressClassName: traefik\n  rules:\n    - host: wildcard.default.defn.run\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: kourier-internal\n                port:\n                  number: 80\n",
            "dev/resource-statefulset-dev.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: dev\n  namespace: default\nspec:\n  serviceName: dev\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dev\n  template:\n    metadata:\n      labels:\n        app: dev\n    spec:\n      volumes:\n        - name: work\n          emptyDir: {}\n      containers:\n        - name: code-server\n          image: 169.254.32.1:5000/workspace\n          imagePullPolicy: Always\n          command:\n            - /usr/bin/tini\n            - --\n          args:\n            - bash\n            - -c\n            - exec ~/bin/e code-server --bind-addr 0.0.0.0:8888 --disable-telemetry\n          tty: true\n          env:\n            - name: PASSWORD\n              value: admin\n          securityContext:\n            privileged: true\n          volumeMounts:\n            - mountPath: /work\n              name: work\nkind: StatefulSet\napiVersion: apps/v1\n",
            "dev/resource-service-dev.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: dev\n  namespace: default\nspec:\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8888\n  selector:\n    app: dev\n  type: ClusterIP\nkind: Service\napiVersion: v1\n",
            "dev/resource-cluster-role-binding-admin.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: dev-admin\nsubjects:\n  - kind: ServiceAccount\n    name: default\n    namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\n",
            "dev/resource-cluster-role-binding-delegator.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: dev-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: default\n    namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\n",
            "external-secrets-operator/resource-namespace-external-secrets.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: external-secrets\nkind: Namespace\napiVersion: v1\n",
            "external-secrets-operator/resource-cluster-role-binding-delegator.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: external-secrets-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: external-secrets\n    namespace: external-secrets\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\n",
            "karpenter/resource-namespace-karpenter.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: karpenter\nkind: Namespace\napiVersion: v1\n",
            "cert-manager/resource-namespace-cert-manager.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: cert-manager\nkind: Namespace\napiVersion: v1\n",
            "cert-manager/resource-clusterissuer-cilium.yaml": "#ManagedBy: cue\n\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: cilium-ca\nspec:\n  ca:\n    secretName: cilium-ca\n",
            "cilium/resource-ingress-hubble-ui.yaml": "#ManagedBy: cue\n\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hubble-ui\n  annotations:\n    external-dns.alpha.kubernetes.io/hostname: hubble.defn.run\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\n    traefik.ingress.kubernetes.io/router.entrypoints: websecure\nspec:\n  ingressClassName: traefik\n  rules:\n    - host: hubble.defn.run\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: hubble-ui\n                port:\n                  number: 80\n",
            "nginx/resource-namespace-nginx.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: nginx\nkind: Namespace\napiVersion: v1\n",
            "traefik/resource-namespace-traefik.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: traefik\nkind: Namespace\napiVersion: v1\n",
            "traefik/resource-tlsstore-traefik.yaml": "#ManagedBy: cue\n\napiVersion: traefik.containo.us/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n  namespace: traefik\nspec:\n  defaultCertificate:\n    secretName: defn-run-wildcard\n",
            "traefik/resource-serverstransport-insecure.yaml": "#ManagedBy: cue\n\napiVersion: traefik.containo.us/v1alpha1\nkind: ServersTransport\nmetadata:\n  name: insecure\n  namespace: traefik\nspec:\n  insecureSkipVerify: true\n",
            "traefik/resource-ingressroute-http-to-https.yaml": "#ManagedBy: cue\n\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-http-to-https\n  namespace: traefik\nspec:\n  entryPoints:\n    - web\n  routes:\n    - match: HostRegexp(`{subdomain:[a-z0-9-]+}.defn.run`)\n      kind: Rule\n      services:\n        - name: noop@internal\n          kind: TraefikService\n      middlewares:\n        - name: http-to-https\n",
            "traefik/resource-middleware-http-to-https.yaml": "#ManagedBy: cue\n\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: http-to-https\nspec:\n  redirectScheme:\n    scheme: https\n    permanent: false\n",
            "caddy/resource-namespace-caddy.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: caddy\nkind: Namespace\napiVersion: v1\n",
            "bonchon/resource-tfo-demo-bonchon.yaml": "#ManagedBy: cue\n\napiVersion: tf.isaaguilar.com/v1alpha2\nkind: Terraform\nmetadata:\n  name: bonchon\n  namespace: default\nspec:\n  terraformVersion: 1.0.0\n  terraformModule:\n    source: https://github.com/defn/dev/m.git//tf/fried-chicken?ref=main\n  serviceAccount: default\n  scmAuthMethods: []\n  ignoreDelete: true\n  keepLatestPodsOnly: true\n  outputsToOmit:\n    - \"0\"\n  backend: |-\n    terraform {\n        backend \"kubernetes\" {\n            in_cluster_config = true\n            secret_suffix     = \"bonchon\"\n            namespace         = \"default\"\n        }\n    }\n",
            "bonchon/resource-pre-sync-hook-dry-brine-rocky-chicken.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: dry-brine-rocky-chicken\n  namespace: default\n  annotations:\n    argocd.argoproj.io/hook: PreSync\nspec:\n  backoffLimit: 0\n  template:\n    spec:\n      serviceAccountName: default\n      containers:\n        - name: meh\n          image: defn/dev:kubectl\n          command:\n            - bash\n            - -c\n          args:\n            - test \"completed\" == \"$(kubectl get tf \"rocky\" -o json | jq -r '.status.phase')\"\n      restartPolicy: Never\nkind: Job\napiVersion: batch/v1\n",
            "bonchon/resource-pre-sync-hook-dry-brine-rosie-chicken.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: dry-brine-rosie-chicken\n  namespace: default\n  annotations:\n    argocd.argoproj.io/hook: PreSync\nspec:\n  backoffLimit: 0\n  template:\n    spec:\n      serviceAccountName: default\n      containers:\n        - name: meh\n          image: defn/dev:kubectl\n          command:\n            - bash\n            - -c\n          args:\n            - test \"completed\" == \"$(kubectl get tf \"rosie\" -o json | jq -r '.status.phase')\"\n      restartPolicy: Never\nkind: Job\napiVersion: batch/v1\n",
            "defn-shared/resource-externalsecret-external-dns.yaml": "#ManagedBy: cue\n\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: external-dns\n  namespace: external-dns\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    kind: ClusterSecretStore\n    name: dev\n  dataFrom:\n    - extract:\n        key: dev/amanibhavam-global\n  target:\n    name: external-dns\n    creationPolicy: Owner\n",
            "defn-shared/resource-cluster-role-binding-admin.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: default-admin\nsubjects:\n  - kind: ServiceAccount\n    name: default\n    namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\n",
            "defn-shared/resource-externalsecret-zerossl-production.yaml": "#ManagedBy: cue\n\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: zerossl-production\n  namespace: cert-manager\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    kind: ClusterSecretStore\n    name: dev\n  dataFrom:\n    - extract:\n        key: dev/amanibhavam-global\n  target:\n    name: zerossl-production\n    creationPolicy: Owner\n",
            "defn-shared/resource-clusterpolicy-clusterissuer-zerossl-production.yaml": "#ManagedBy: cue\n\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: zerossl-production-clusterissuer\nspec:\n  generateExistingOnPolicyUpdate: true\n  rules:\n    - name: create-cluster-issuer\n      match:\n        any:\n          - resources:\n              names:\n                - zerossl-production\n              kinds:\n                - Secret\n              namespaces:\n                - cert-manager\n      generate:\n        synchronize: true\n        apiVersion: cert-manager.io/v1\n        kind: ClusterIssuer\n        name: zerossl-production\n        data:\n          spec:\n            acme:\n              server: https://acme.zerossl.com/v2/DV90\n              email: '{{request.object.data.zerossl_email | base64_decode(@)}}'\n              privateKeySecretRef:\n                name: zerossl-production-acme\n              externalAccountBinding:\n                keyID: '{{request.object.data.zerossl_eab_kid | base64_decode(@)}}'\n                keySecretRef:\n                  name: zerossl-production\n                  key: zerossl-eab-hmac\n              solvers:\n                - selector: {}\n                  dns01:\n                    cloudflare:\n                      email: '{{request.object.data.cloudflare_email | base64_decode(@)}}'\n                      apiTokenSecretRef:\n                        name: zerossl-production\n                        key: cloudflare-api-token\n",
            "defn/resource-namespace-defn.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: defn\nkind: Namespace\napiVersion: v1\n",
            "defn/resource-certificate-defn-run-wildcard-traefik.yaml": "#ManagedBy: cue\n\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: defn-run-wildcard\n  namespace: traefik\nspec:\n  secretName: defn-run-wildcard\n  dnsNames:\n    - '*.defn.run'\n    - '*.default.defn.run'\n  issuerRef:\n    name: zerossl-production\n    kind: ClusterIssuer\n    group: cert-manager.io\n",
            "defn/resource-workflow-hello.yaml": "#ManagedBy: cue\n\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  name: hello\n  namespace: defn\nspec:\n  entrypoint: whalesay\n  arguments:\n    parameters:\n      - name: message\n        value: world\n  templates:\n    - name: whalesay\n      inputs:\n        parameters:\n          - name: message\n      container:\n        image: docker/whalesay\n        command:\n          - cowsay\n        args:\n          - '{{inputs.parameters.message}}'\n",
            "global-vc0/resource-namespace-vcluster.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: global-vc0\nkind: Namespace\napiVersion: v1\n",
            "k3d-global-secrets-store/resource-cluster-secret-store-dev.yaml": "#ManagedBy: cue\n\napiVersion: external-secrets.io/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: dev\nspec:\n  provider:\n    vault:\n      server: http://169.254.32.1:8200\n      path: kv\n      version: v2\n      auth:\n        kubernetes:\n          mountPath: k3d-global\n          role: external-secrets\n",
            "vcluster-global-vc0-secrets-store/resource-cluster-secret-store-dev.yaml": "#ManagedBy: cue\n\napiVersion: external-secrets.io/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: dev\nspec:\n  provider:\n    vault:\n      server: http://169.254.32.1:8200\n      path: kv\n      version: v2\n      auth:\n        kubernetes:\n          mountPath: vcluster-global-vc0\n          role: external-secrets\n",
            "rocky/resource-pre-sync-hook-egg.yaml": "#ManagedBy: cue\n\napiVersion: tf.isaaguilar.com/v1alpha2\nkind: Terraform\nmetadata:\n  name: rocky-egg\n  namespace: default\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n    argocd.argoproj.io/sync-wave: \"0\"\nspec:\n  terraformVersion: 1.0.0\n  terraformModule:\n    source: https://github.com/ppm.git//app/tf/m/egg?ref=main\n  taskOptions:\n    - for:\n        - '*'\n      env:\n        - name: TF_VAR_egg\n          value: rocky\n  serviceAccount: default\n  scmAuthMethods: []\n  ignoreDelete: true\n  keepLatestPodsOnly: true\n  backend: |-\n    terraform {\n    \tbackend \"kubernetes\" {\n    \t\tin_cluster_config = true\n    \t\tsecret_suffix     = \"rocky-egg\"\n    \t\tnamespace         = \"default\"\n    \t}\n    }\n",
            "rocky/resource-pre-sync-hook-hatch-egg.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: hatch-rocky-egg\n  namespace: default\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n    argocd.argoproj.io/sync-wave: \"1\"\nspec:\n  backoffLimit: 0\n  template:\n    spec:\n      serviceAccountName: default\n      containers:\n        - name: meh\n          image: defn/dev:kubectl\n          command:\n            - bash\n            - -c\n          args:\n            - test \"completed\" == \"$(kubectl get tf rocky-egg -o json | jq -r '.status.phase')\"\n      restartPolicy: Never\nkind: Job\napiVersion: batch/v1\n",
            "rocky/resource-tfo-demo-rocky.yaml": "#ManagedBy: cue\n\napiVersion: tf.isaaguilar.com/v1alpha2\nkind: Terraform\nmetadata:\n  name: rocky\n  namespace: default\nspec:\n  terraformVersion: 1.0.0\n  terraformModule:\n    source: https://github.com/defn/dev/m.git//tf/chicken?ref=main\n  taskOptions:\n    - for:\n        - '*'\n      env:\n        - name: TF_VAR_chicken\n          value: rocky\n  serviceAccount: default\n  scmAuthMethods: []\n  ignoreDelete: true\n  keepLatestPodsOnly: true\n  outputsToOmit:\n    - \"0\"\n  backend: |-\n    terraform {\n      backend \"kubernetes\" {\n        in_cluster_config = true\n        secret_suffix     = \"rocky\"\n        namespace         = \"default\"\n      }\n    }\n",
            "rosie/resource-pre-sync-hook-egg.yaml": "#ManagedBy: cue\n\napiVersion: tf.isaaguilar.com/v1alpha2\nkind: Terraform\nmetadata:\n  name: rosie-egg\n  namespace: default\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n    argocd.argoproj.io/sync-wave: \"0\"\nspec:\n  terraformVersion: 1.0.0\n  terraformModule:\n    source: https://github.com/ppm.git//app/tf/m/egg?ref=main\n  taskOptions:\n    - for:\n        - '*'\n      env:\n        - name: TF_VAR_egg\n          value: rosie\n  serviceAccount: default\n  scmAuthMethods: []\n  ignoreDelete: true\n  keepLatestPodsOnly: true\n  backend: |-\n    terraform {\n    \tbackend \"kubernetes\" {\n    \t\tin_cluster_config = true\n    \t\tsecret_suffix     = \"rosie-egg\"\n    \t\tnamespace         = \"default\"\n    \t}\n    }\n",
            "rosie/resource-pre-sync-hook-hatch-egg.yaml": "#ManagedBy: cue\n\nmetadata:\n  name: hatch-rosie-egg\n  namespace: default\n  annotations:\n    argocd.argoproj.io/hook: PreSync\n    argocd.argoproj.io/sync-wave: \"1\"\nspec:\n  backoffLimit: 0\n  template:\n    spec:\n      serviceAccountName: default\n      containers:\n        - name: meh\n          image: defn/dev:kubectl\n          command:\n            - bash\n            - -c\n          args:\n            - test \"completed\" == \"$(kubectl get tf rosie-egg -o json | jq -r '.status.phase')\"\n      restartPolicy: Never\nkind: Job\napiVersion: batch/v1\n",
            "rosie/resource-tfo-demo-rosie.yaml": "#ManagedBy: cue\n\napiVersion: tf.isaaguilar.com/v1alpha2\nkind: Terraform\nmetadata:\n  name: rosie\n  namespace: default\nspec:\n  terraformVersion: 1.0.0\n  terraformModule:\n    source: https://github.com/defn/dev/m.git//tf/chicken?ref=main\n  taskOptions:\n    - for:\n        - '*'\n      env:\n        - name: TF_VAR_chicken\n          value: rosie\n  serviceAccount: default\n  scmAuthMethods: []\n  ignoreDelete: true\n  keepLatestPodsOnly: true\n  outputsToOmit:\n    - \"0\"\n  backend: |-\n    terraform {\n      backend \"kubernetes\" {\n        in_cluster_config = true\n        secret_suffix     = \"rosie\"\n        namespace         = \"default\"\n      }\n    }\n"
        },
        "e": {
            "k3d-global.yaml": "# ManagedBy: cue\n\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: k3d-global\nspec:\n  project: default\n  destination:\n    name: in-cluster\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/k3d-global\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n",
            "vcluster-global-vc0.yaml": "# ManagedBy: cue\n\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  namespace: argocd\n  name: vcluster-global-vc0\nspec:\n  project: default\n  destination:\n    name: in-cluster\n  source:\n    repoURL: https://github.com/defn/dev\n    targetRevision: main\n    path: m/r/vcluster-global-vc0\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n"
        }
    }
}
