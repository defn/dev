SHELL := /bin/bash

PRIV_KEY := sa-signer.key
PUB_KEY := sa-signer.key.pub
PKCS_KEY := sa-signer-pkcs8.pub

INFRA_NAME := $(shell cue export --out json -e class.cluster_name | jq -r .)

k3s_url := $(shell cat ~/.kube/config | grep server: | awk '{print $$NF}')

secrets:
	$(MAKE) clean
	$(MAKE) irsa
	$(MAKE) k3s-secrets
	aws s3 sync openid s3://$(shell uname -n)-oidc-origin/openid
	aws cloudfront create-invalidation --distribution-id $$(env AWS_DEFAULT_REGION=us-west-2 aws resourcegroupstaggingapi get-resources --tag-filters Key=Name,Values=${INFRA_NAME}-oidc --region=us-east-1 | jq -r '.ResourceTagMappingList[].ResourceARN' | cut -d/ -f2) --paths '/*' || true

clean:
	rm -f system.admin.key system.admin.pem system.ca.pem
	rm -f openid/.well-known/openid-configuration

irsa:
	sudo cat /etc/rancher/k3s/k3s.yaml | awk -F': ' '/client-certificate-data/ {print $$2}' | base64 -d > system.admin.pem && chmod 600 system.admin.pem
	sudo cat /etc/rancher/k3s/k3s.yaml | awk -F': ' '/client-key-data/ {print $$2}' | base64 -d > system.admin.key && chmod 600 system.admin.key
	sudo cat /etc/rancher/k3s/k3s.yaml | awk -F': ' '/certificate-authority-data/ {print $$2}' | base64 -d > system.ca.pem && chmod 600 system.ca.pem
	mkdir -p openid/.well-known
	curl -sSL --cert system.admin.pem --key system.admin.key --cacert system.ca.pem ${k3s_url}/openid/v1/jwks | jq . > openid/.well-known/jwks.json
	cue export -e class.discovery --out=json | jq . > openid/.well-known/openid-configuration
	rm -vf system.*

k3s-secrets: ca.key ca.crt
	-kubectl --context $(shell uname -n) create namespace cert-manager
	-kubectl --context $(shell uname -n) create secret generic -n kube-system cilium-ca --from-file=ca.key --from-file=ca.crt
	-kubectl --context $(shell uname -n) create secret generic -n cert-manager cilium-ca --from-file=tls.key=ca.key --from-file=tls.crt=ca.crt

ca.key ca.crt:
	step certificate create cilium-ca ca.crt ca.key --profile root-ca --not-after 8760h --no-password --insecure --kty RSA --size 4096 --force

label:
	kubectl get nodes -o json | jq -r '.items[].metadata.name' | runmany 'kubectl label --overwrite node $$1 node.kubernetes.io/instance-type=t3.medium'
