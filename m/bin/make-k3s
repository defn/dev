#!/usr/bin/env bash

set -eu

cd ~/m

cluster_name=
infra_pod_cidr=
infra_service_cidr=

function make_init {
	# create k3s registry
	docker run -d -p 5000:5000 --restart=always --name registry registry:2 || true
}

function make_linkerd {
	# CA
	step certificate create root.linkerd.cluster.local ca.crt ca.key --profile root-ca --no-password --insecure

	# signing cluster
	step certificate create identity.linkerd.cluster.local cluster.crt cluster.key --profile intermediate-ca --not-after 8760h --no-password --insecure --ca ca.crt --ca-key ca.key

	# install linkerd cluster
	linkerd --context ${cluster_name} install --crds | k --context ${cluster_name} apply -f -
	linkerd --context ${cluster_name} install --identity-trust-anchors-file ca.crt --identity-issuer-certificate-file cluster.crt --identity-issuer-key-file cluster.key | k --context ${cluster_name} apply -f -
	linkerd --context ${cluster_name} check

	# install viz cluster
	linkerd --context ${cluster_name} viz install --set dashboard.enforcedHostRegexp=^ | k --context ${cluster_name} apply -f -

	# install mc cluster
	linkerd --context ${cluster_name} multicluster install --gateway=false | k --context ${cluster_name} apply -f -
	linkerd --context ${cluster_name} multicluster check
}

function make_down {
	sudo ip link delete cilium_host || true
	sudo ip link delete cilium_net || true
	sudo ip link delete cilium_vxlan || true

	sudo iptables-save | grep -iv cilium | sudo iptables-restore
	sudo ip6tables-save | grep -iv cilium | sudo ip6tables-restore

	/usr/local/bin/k3s-uninstall.sh || true
}

function make_argocd {
	kubectl config use-context ${cluster_name}

	(
		cp $HOME/.kube/config $HOME/.kube/config.argocd
		export KUBECONFIG=$HOME/.kube/config.argocd
		eval "$(kubectl config view -o json | jq -r --arg cluster ${cluster_name} --arg namespace argocd '.contexts[] | select(.name == $cluster).context | "kubectl config set-context \(.cluster)-argocd --cluster=\(.cluster) --user=\(.user) --namespace=\($namespace)"')"
		kubectl config use-context ${cluster_name}-argocd
	)
}

function make_up {
	rm -vf ~/.kube/config*

	set +x
	local TOKEN="$(curl -sSL -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")"
	local container_ip="$(curl -sSL -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)"
	set -x
	sudo mkdir -p /etc/rancher/k3s
	sudo cp registries.yaml /etc/rancher/k3s/
	k3sup install --local --context ${cluster_name} --local-path ~/.kube/config --merge \
		--k3s-version "$(cd c/${cluster_name} && cue export --out json -e infra.infra_k3s_version | jq -r . | cut -d: -f2 | sed 's#-#+#')" \
		--k3s-extra-args "--node-ip "${container_ip}" --disable-network-policy --disable=traefik --flannel-backend=none --kube-apiserver-arg=--service-account-issuer=$(cd c/${cluster_name} && cue export --out json -e class.discovery_url | jq -r .)/openid --kube-apiserver-arg=--api-audiences=https://kubernetes.default.svc.cluster.local,sts.amazonaws.com --tls-san=${cluster_name} --cluster-cidr=${infra_pod_cidr} --service-cidr=${infra_service_cidr}" 

	# oidc
	(cd c/${cluster_name} && make secrets)

	kubectl --context ${cluster_name} replace -f k/crd/${cluster_name}.yaml
	kubectl --context ${cluster_name} apply -f k/r/${cluster_name}-manual-cilium-bootstrap/main.yaml
	kubectl --context ${cluster_name} create ns argocd || true
	kubectl --context ${cluster_name} apply -f k/r/${cluster_name}-cluster-argo-cd/main.yaml

	make_argocd

	# switch back to the default config
	kubectl config use-context ${cluster_name}

	env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-server
	env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-repo-server

	# patch argocd admin password
	env KUBECONFIG=$HOME/.kube/config.argocd kubectl patch secret argocd-secret -p '{"stringData": { "admin.password": "'$(htpasswd -bnBC 10 "" admin | tr -d ':\n')'"}}'

	# add k3s to argocd
	while true; do
		if env KUBECONFIG=$HOME/.kube/config.argocd argocd cluster add ${cluster_name} --yes --core --in-cluster --kube-context ${cluster_name}-argocd --name ${cluster_name}-cluster --upsert; then
			break
		fi
		sleep 5
	done

	# deploy the cluster app-of-apps
	kubectl --context ${cluster_name} apply -f e/${cluster_name}-cluster.yaml

	# background app-of-apps syncing
	while true; do
		# dont do this, see if argocd can deal
		break
		if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app sync --timeout 60 ${cluster_name}-cluster >/dev/null 2>&1; then break; fi
		sleep 30
	done &

	# last minute things
	make last

	# k9s, show all pods
	k9s -A
}

function main {
	local cmd
	cmd="$1"
	shift

	case "${cmd}" in
		init)
			true
			;;
		*)
			if [[ -n "${1:-}" ]]; then
				cluster_name="$1"
				shift
			else
				cluster_name="$(cd ~/m/c/$(uname -n)  && cue eval -e class.cluster_name | jq -r .)"
			fi
			infra_pod_cidr="$(cd ~/m/c/${cluster_name} && cue eval -e class.infra_pod_cidr | jq -r .)"
			infra_service_cidr="$(cd ~/m/c/${cluster_name} && cue eval -e infra.infra_service_cidr | jq -r .)"
			;;
	esac
			
	"make_${cmd}"
}

time main "$@"
uptime

# archive
function make_vc {
	for v in $(cd c/${cluster_name} && cue export --out json -e infra.parent.vclusters | jq -r '.[]'); do
		i="${v#vc}"
		# wait until vcluster is ready
		while true; do
			if vcluster --context ${cluster_name} connect vcluster -n "${cluster_name}-${v}-vcluster" --server=$(kubectl get --context ${cluster_name} -n ${cluster_name}-${v}-vcluster svc vcluster -o json | jq -r '.spec.clusterIP'):443 --update-current=false --kube-config-context-name ${cluster_name}-"${v}" --kube-config "$HOME"/.kube/config."${v}"; then
				break
			fi
			sleep 5
		done

		# add vcluster to argocd
		while true; do
			if env KUBECONFIG="$HOME/.kube/config.argocd:$HOME/.kube/config.${v}" argocd --kube-context ${cluster_name}-argocd cluster --core add "${cluster_name}-${v}" --yes; then break; fi
			sleep 5
		done
	done
}
