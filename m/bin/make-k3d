#!/usr/bin/env bash

set -eu
cd ~/m

infra_name="dfd"

function make_init {
	# create k3d registry
	k3d registry create registry --port 0.0.0.0:5000 || true
}

function make_linkerd {
	# CA
	step certificate create root.linkerd.cluster.local ca.crt ca.key --profile root-ca --no-password --insecure

	# signing cluster
	step certificate create identity.linkerd.cluster.local cluster.crt cluster.key --profile intermediate-ca --not-after 8760h --no-password --insecure --ca ca.crt --ca-key ca.key

	# install linkerd cluster
	linkerd --context k3d-${infra_name} install --crds | k --context k3d-${infra_name} apply -f -
	linkerd --context k3d-${infra_name} install --identity-trust-anchors-file ca.crt --identity-issuer-certificate-file cluster.crt --identity-issuer-key-file cluster.key | k --context k3d-${infra_name} apply -f -
	linkerd --context k3d-${infra_name} check

	# install viz cluster
	linkerd --context k3d-${infra_name} viz install --set dashboard.enforcedHostRegexp=^ | k --context k3d-${infra_name} apply -f -

	# install mc cluster
	linkerd --context k3d-${infra_name} multicluster install --gateway=false | k --context k3d-${infra_name} apply -f -
	linkerd --context k3d-${infra_name} multicluster check
}

function make_vc {
	for v in $(cd c/${infra_name} && cue export --out json -e infra.parent.vclusters | jq -r '.[]'); do
		i="${v#vc}"
		# wait until vcluster is ready
		while true; do
			if vcluster --context k3d-${infra_name} connect vcluster -n "k3d-${infra_name}-${v}-vcluster" --server=$(kubectl --context k3d-${infra_name} get nodes -o json | jq -r '.items[].metadata.annotations["k3s.io/internal-ip"]'):$((8443 + i)) --insecure --update-current=false --kube-config-context-name k3d-${infra_name}-"${v}" --kube-config "$HOME"/.kube/config."${v}"; then
				break
			fi
			sleep 5
		done

		# add vcluster to argocd
		while true; do
			if env KUBECONFIG="$HOME/.kube/config.argocd:$HOME/.kube/config.${v}" argocd --kube-context k3d-${infra_name}-argocd cluster --core add "k3d-${infra_name}-${v}" --yes; then break; fi
			sleep 5
		done
	done
}

function make_down {
	/usr/local/bin/k3s-uninstall.sh || true
}

function make_up {
	rm -vf ~/.kube/config*

	local TOKEN="$(curl -sSL -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")"
	local container_ip="$(curl -sSL -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/local-ipv4)"
	k3sup install --local --context k3d-${infra_name} --local-path ~/.kube/config --merge \
		--k3s-extra-args "--node-ip "${container_ip}" --disable-network-policy --disable=traefik --flannel-backend=none --kube-apiserver-arg=--service-account-issuer=https://raw.githubusercontent.com/defn/dev/main/m/c/${infra_name}/openid --kube-apiserver-arg=--api-audiences=https://kubernetes.default.svc.cluster.local,sts.amazonaws.com --tls-san=k3d-${infra_name}" 

	(cd c/${infra_name} && make secrets)

	kubectl --context k3d-${infra_name} apply -f k/r/k3d-${infra_name}-manual-cert-manager-crds/main.yaml
	kubectl --context k3d-${infra_name} apply -f k/r/k3d-${infra_name}-manual-linkerd-crds/main.yaml
	kubectl --context k3d-${infra_name} apply -f k/r/k3d-${infra_name}-manual-cilium-bootstrap/main.yaml
	kubectl --context k3d-${infra_name} apply -f k/r/k3d-${infra_name}-cluster-argo-cd/main.yaml

	# dedicated kubectl config for argocd
	cp $HOME/.kube/config $HOME/.kube/config.argocd
	(
		export KUBECONFIG=$HOME/.kube/config.argocd
		eval "$(kubectl config view -o json | jq -r --arg cluster k3d-${infra_name} --arg namespace argocd '.contexts[] | select(.name == $cluster).context | "kubectl config set-context \(.cluster)-argocd --cluster=\(.cluster) --user=\(.user) --namespace=\($namespace)"')"
		kubectl config use-context k3d-${infra_name}-argocd
	)

	# switch back to the default config
	kubectl config use-context k3d-${infra_name}

	env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-server
	env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-repo-server

	# patch argocd admin password
	env KUBECONFIG=$HOME/.kube/config.argocd kubectl patch secret argocd-secret -p '{"stringData": { "admin.password": "'$(htpasswd -bnBC 10 "" admin | tr -d ':\n')'"}}'

	# add k3d to argocd
	while true; do
		if env KUBECONFIG=$HOME/.kube/config.argocd argocd cluster add k3d-${infra_name} --name k3d-${infra_name}-cluster --yes --core --in-cluster; then
			break
		fi
		sleep 5
	done

	# deploy the cluster app-of-apps
	kubectl --context k3d-${infra_name} apply -f e/k3d-${infra_name}-cluster.yaml

	# background app-of-apps syncing
	while true; do
		if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app sync --timeout 60 k3d-${infra_name}-cluster >/dev/null 2>&1; then break; fi
		sleep 30
	done &

	make_vc
}

function main {
	local cmd
	cmd="$1"
	shift

	"make_${cmd}"
}

time main "${1:-up}"
uptime
