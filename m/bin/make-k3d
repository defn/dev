#!/usr/bin/env bash

set -eu
cd ~/m

infra_name="dfd"
# TODO remove
nme="${infra_name}"

function make_init {
	# create k3d registry
	k3d registry create registry --port 0.0.0.0:5000 || true
}

function make_vc {
	for v in $(cd c/dfd && cue export --out json -e infra.parent.vclusters | jq -r '.[]'); do
		i="${v#vc}"
		# wait until vcluster is ready
		while true; do
			if vcluster --context k3d-${infra_name} connect vcluster -n "k3d-${infra_name}-${v}-vcluster" --server=$(kubectl --context k3d-${infra_name} get nodes -o json | jq -r '.items[].metadata.annotations["k3s.io/internal-ip"]'):$((8443 + i)) --insecure --update-current=false --kube-config-context-name k3d-${infra_name}-"${v}" --kube-config "$HOME"/.kube/config."${v}"; then
				break
			fi
			sleep 5
		done

		# add vcluster to argocd
		while true; do
			if env KUBECONFIG="$HOME/.kube/config.argocd:$HOME/.kube/config.${v}" argocd --kube-context k3d-${infra_name}-argocd cluster --core add "k3d-${infra_name}-${v}" --yes; then break; fi
			sleep 5
		done
	done
}

function make_down {
	if true; then
		/usr/local/bin/k3s-uninstall.sh
	else
		k3d cluster delete dfd
	fi
}

function make_up {
	make_down
	make_dfd
}

function make_dfd {
	local restarted
	restarted=

	if true; then
		k3sup install --local --context k3d-${nme} --local-path ~/.kube/config --merge \
			--k3s-extra-args "--node-ip 172.31.38.198 --node-external-ip $(tailscale ip -4) --disable-network-policy --disable=traefik --flannel-backend=none --kube-apiserver-arg=--service-account-issuer=https://raw.githubusercontent.com/defn/dev/main/m/c/dfd/openid --kube-apiserver-arg=--api-audiences=https://kubernetes.default.svc.cluster.local,sts.amazonaws.com --tls-san=k3d-${nme}" 
	else
		if k3d cluster list dfd; then
			# restart k3d
			env KUBECONFIG=$HOME/.kube/config k3d cluster stop ${nme} || true
			env KUBECONFIG=$HOME/.kube/config k3d cluster start ${nme}
			restarted=1
		else
			# deploy k3d
			env KUBECONFIG=$HOME/.kube/config k3d cluster delete ${nme} || true
			rm -vf ~/.kube/config*
			env KUBECONFIG=$HOME/.kube/config \
			dfd cluster create ${nme} --config k3d.yaml \
				--k3s-arg "TAILSCALE_AUTHKEY=$(chamber -b secretsmanager read --quiet k3d-${nme} tailscale_authkey)=TAILSCALE_AUTHKEY@all"
			docker update --restart=no k3d-${nme}-server-0
		fi
	fi

	(cd c/${nme} && make secrets)

	if [[ -z "${restarted-}" ]]; then
		kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-manual-cert-manager-crds/main.yaml
		kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-manual-linkerd-crds/main.yaml
		kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-manual-cilium-bootstrap/main.yaml
		kubectl --context k3d-${nme} apply -f k/r/k3d-${nme}-cluster-argo-cd/main.yaml
	fi

	# dedicated kubectl config for argocd
	cp $HOME/.kube/config $HOME/.kube/config.argocd
	(
		export KUBECONFIG=$HOME/.kube/config.argocd
		eval "$(kubectl config view -o json | jq -r --arg cluster k3d-${nme} --arg namespace argocd '.contexts[] | select(.name == $cluster).context | "kubectl config set-context \(.cluster)-argocd --cluster=\(.cluster) --user=\(.user) --namespace=\($namespace)"')"
		kubectl config use-context k3d-${nme}-argocd
	)

	# switch back to the default config
	kubectl config use-context k3d-${nme}

	env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-server
	env KUBECONFIG=$HOME/.kube/config.argocd kubectl -n argocd rollout status deployment/argocd-repo-server

	if [[ -z "${restarted-}" ]]; then
		# patch argocd admin password
		env KUBECONFIG=$HOME/.kube/config.argocd kubectl patch secret argocd-secret -p '{"stringData": { "admin.password": "'$(htpasswd -bnBC 10 "" admin | tr -d ':\n')'"}}'

		# add k3d to argocd
		while true; do
			if env KUBECONFIG=$HOME/.kube/config.argocd argocd cluster add k3d-${nme} --name k3d-${nme}-cluster --yes --core --in-cluster; then
				break
			fi
			sleep 5
		done

		# deploy the cluster app-of-apps
		kubectl --context k3d-${nme} apply -f e/k3d-${nme}-cluster.yaml

		# background app-of-apps syncing
		while true; do
			if env KUBECONFIG=$HOME/.kube/config.argocd argocd --core app sync --timeout 60 k3d-${nme}-cluster >/dev/null 2>&1; then break; fi
			sleep 30
		done &
	fi

	make_vc
}

function main {
	local cmd
	cmd="$1"
	shift

	"make_${cmd}"
}

time main "${1:-up}"
uptime
