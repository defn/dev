apiVersion: v1
kind: Namespace
metadata:
  name: harbor
---
apiVersion: v1
data:
  _REDIS_URL_CORE: redis://harbor-redis:6379/0?idle_timeout_seconds=30
  _REDIS_URL_REG: redis://harbor-redis:6379/2?idle_timeout_seconds=30
  CHART_CACHE_DRIVER: redis
  CONFIG_PATH: /etc/core/app.conf
  CORE_LOCAL_URL: http://127.0.0.1:8080
  CORE_URL: http://harbor-core:80
  DATABASE_TYPE: postgresql
  EXT_ENDPOINT: https://core.harbor.domain
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_URL: http://harbor-jobservice
  LOG_LEVEL: info
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory
  PORT: "8080"
  PORTAL_URL: http://harbor-portal
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_HOST: harbor-database
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_SSLMODE: disable
  POSTGRESQL_USERNAME: postgres
  QUOTA_UPDATE_PROVIDER: db
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_STORAGE_PROVIDER_NAME: filesystem
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
  TRIVY_ADAPTER_URL: http://harbor-trivy:8080
  WITH_TRIVY: "true"
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
apiVersion: v1
data:
  config.yml: |
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
apiVersion: v1
data:
  CORE_URL: http://harbor-core:80
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice-env
  namespace: harbor
---
apiVersion: v1
data:
  nginx.conf: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
apiVersion: v1
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
---
apiVersion: v1
data:
  CSRF_KEY: M09OemxYWUpMS3lZbGFUQ3ZVN2E5eDVSTjZNWkM1UXY=
  HARBOR_ADMIN_PASSWORD: SGFyYm9yMTIzNDU=
  POSTGRESQL_PASSWORD: Y2hhbmdlaXQ=
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
  secret: TmZlZWJvUUlsSVdiaWlGVg==
  secretKey: bm90LWEtc2VjdXJlLWtleQ==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRVE8zR0U0cndFREpha1J4bXBrbkhsREFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qTXhNVEExTURFd016SXdXaGNOTWpReApNVEEwTURFd016SXdXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURGWDNFcjJFM0IxNG4xSFhVTXJYRnBKTDdJbUlPRmhSWEwKTFN0TmpIaFBoRy9RL0tGdnUvYmxSdzRFWVJnZTExYlZGZ2tjZ0VvRmlIT05CZ2FDNUl5bldVZUlkOUhvMFhPQgp3RUV3a05QUkNyeXJYa2w4MWsrUlZ2Q04zbFZPV1BaOW10ZkI2WjFWUGtnYVVoWWhUUzZaN2xKRFFlYmMzSTlSCjJucFRxeGI5RUU2UmUzNUNFdlJJVE5xY0hIZ3ZXK0grM09lcmMrNlk1WWFvcXRudE5CVno3VTcxZGQ3UFdXOUcKRHJYZWNEa2RDaTlpV016MzJseWxpYUZpeFV4UlFxWDlqQ24wZDZLeDV3YTBGaXBJc1lDaEtCQkF0ajlva3JNcApxMFZzM0wrYkxXOUI3SERMdEtIWjBqaXpqODJFUjY1dHloZkpiMXFBL1RFZFNxVHNoQmFoQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVK0MyUWNUcXdyOERJZFJOWCtrQy9mL2VHcnRBdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRUFtbjRJbitKa3F0Y0tmYU15SmNLTG9zZ0tiVWFGVVZINzFzcWxiCmdreXYxeXVEWGh6L2xQOHQwV2FRSWM2OUJkdXYzRDNwa0ZOQklCRktYZjVyeGZNczVIeDdrVlArNVBjTWdHYXYKRDQzcVFSUUozUitaUFlRbG5VNFNVaTg2RE1LOC9VRmJvZXJvQVJ3bWJOdHVxdzU0OGl6dnZUVGIvWUp0bmt4RQp2clUyNHB5dEEzR2lSdENKR0djZnVwZjlybVR1d0JGamx0UjlmV3FNU1dBR1o4MnBrbU5EVFNZOUZVRk8vSElmCml4U2pURGExVkJETlQxUXJzRlVsNUUwQjRaQVVrZ0NrM0VBcytDOE5OeFh6WndBbjdkRkZYOGQ1N1IvZ1liK1AKYjBTUVNNblJ0WGJiK1owalQzUTZvdlcrU3R3TGNGY3M1TUZESG83dTZWMzJhazg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeFY5eEs5aE53ZGVKOVIxMURLMXhhU1MreUppRGhZVVZ5eTByVFl4NFQ0UnYwUHloCmI3djI1VWNPQkdFWUh0ZFcxUllKSElCS0JZaHpqUVlHZ3VTTXAxbEhpSGZSNk5GemdjQkJNSkRUMFFxOHExNUoKZk5aUGtWYndqZDVWVGxqMmZaclh3ZW1kVlQ1SUdsSVdJVTB1bWU1U1EwSG0zTnlQVWRwNlU2c1cvUkJPa1h0KwpRaEwwU0V6YW5CeDRMMXZoL3R6bnEzUHVtT1dHcUtyWjdUUVZjKzFPOVhYZXoxbHZSZzYxM25BNUhRb3ZZbGpNCjk5cGNwWW1oWXNWTVVVS2wvWXdwOUhlaXNlY0d0QllxU0xHQW9TZ1FRTFkvYUpLekthdEZiTnkvbXkxdlFleHcKeTdTaDJkSTRzNC9OaEVldWJjb1h5VzlhZ1AweEhVcWs3SVFXb1FJREFRQUJBb0lCQVFDTDdkbHZTei85WUpFWApMVll4c2JtSTRKczkzaHJJaTR6aTZkZ2NkNjFJT3MySGJjUUtVa2w5VFgzYmp2YXB6dU5wMk9DR3kxRXZVUWtTCi95V1lvTzR6S3ZHekI3ZlRCc09NUnNBdzdVeXVsSjBrSlltV0x0NWtYUzNZZHJzbCs1NXRlRnpreG5wYjEvY0kKYWcvMGRpTEcwUmFUUm1LbFROMXpHNkRFTnJUcW5lZ1hxUVc4eVBOWnAyQXRUa0JhbzgzMTdvMWFGbzNEbDJlWApHbkVaR1ZIOXU4WEFIVWZuYUplRUxnNWExczg0RjlJcU5MWnFzQmRiRDFiTjhsR00xQ2Y5aUkxcHF6UUFPVzVmCjZialViVDN4SFZxMlUyalRETjA5S2poQnU4L2VqLzMvYWJneHFJZHlOY0FxYlAzQ2x3SGhmaGVwa005K2xFOFYKSGpnQzBXelJBb0dCQVBVc09XL0t2SXBKSUpsTFM5QWplejI2YUNtSVYrQjF0K1JUbTRZMEZWYWhQMlpMRnVxNApuR2ZFanppdDFMQXZRR3ZrTDk5YlB6SGhGL1Q3QThtQWxQZUM5TXJ6SlQ1RjI5SUgwU2xLWlZqcU4vU1lieWJzCkJSTXd1K08xdTRRTGRCRlBFVjE5MjQ4eUVhN0w3ckdodnB3RUJkZmtFbkhUQ3dIRjJVR3MybGNWQW9HQkFNNFcKMGdrT2YrS2hNRnIzSXNhWlB2NDF6dW4xVUIrTytHUnRaQXRFVE1NdVR0WFVDUm1zTUJ0SmdwckhJaUNDSjUyUQpQOFNwTnhUL1diN05BaEpXalB0c3BLSW13ZHl2emxIUlVuaWRiS3FNSXUvQWR3TmhzZUlPYWtUaURsU3pUU2IyCjZ3TUZTcHMrWWVKckNyRUNSZDlPcjYreVJoa2hVazMzelliV0JhUmRBb0dBWnN4blBOZDkzR0d6R0hONDAwbTkKUi9HYjhTWW82b1dSV0Z3eURzQlIzaVA0S0ZUOXcrY3FOVncyVFNhZDBrM05yaTljWDBPc0tLYmYyNmxRT2pIKwp4QlVWdk83Y1E5TVl5MlRacjMxeEp5bjEwa29EK1FiblRkZVdRSEVYc2RMM2xMWlphcUQxNllHdDVtTzlycDlLCkE3S3dISWlWcjBJMUVFWTd4UXpMODgwQ2dZQlk5VTdLYkFEVjBhQXUwOWltQTBaR3N2RlMyZm93OVNUUkxNcnYKZGhid2RVL0FTeHQyZ25YdGdXaW42T2NaUXpWWWRRaWhtaTFWbWZlaVBabjBVbm5lbVlIaklIbTBDZ3MwRS9mVwphcFdhZEkwc0VsY05GYUdVSTRiSm53NXlqMGJ4VjhvUDdydktrVDN0WHlrcFNRTGlKblA5a2lWaCtaa3VZSlhOCjZ4cGFYUUtCZ0dpRUQ2R3kwK0F2Ym9YYTVjMms0a2E5UUZRclk1Y1Q3SXZBZHB2aFRTSnBOK2w5WFRVaFBobEYKOWR3ekxzVUdYbFJIa0JEd2Q5SUMraWE2ejZWSGFoUStQbjJBbUdwcDhNTWp6MnliQVJmL2R1YWpRc051WWZNRgptZGN5Wkp1Zkdna3VDZ2dsUE80MVRMamlKc2tGZTBZMkp5Vkh3QkV5OGt2Y1ZxV0lHY1N5Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  POSTGRES_PASSWORD: Y2hhbmdlaXQ=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  JOBSERVICE_SECRET: VUh3SU03Mm9ycm42UGVQTQ==
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTTP_SECRET: NHl1dGFMZlBtblBlV1BKeA==
  REGISTRY_REDIS_PASSWORD: ""
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTPASSWD: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJEIvWlhmSUVNd1R6cFdnVFBVZHF0aU82MVZGc2ZMamt2OW9yZG0zc0NQbVpOTnFuMUNhaFRx
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry-htpasswd
  namespace: harbor
type: Opaque
---
apiVersion: v1
data: null
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  gitHubToken: ""
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
spec:
  ports:
  - name: http-web
    port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: core
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
spec:
  ports:
  - port: 5432
  selector:
    app: harbor
    component: database
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
spec:
  ports:
  - name: http-jobservice
    port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: jobservice
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: portal
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
spec:
  ports:
  - port: 6379
  selector:
    app: harbor
    component: redis
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
spec:
  ports:
  - name: http-registry
    port: 5000
  - name: http-controller
    port: 8080
  selector:
    app: harbor
    component: registry
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
spec:
  ports:
  - name: http-trivy
    port: 8080
    protocol: TCP
  selector:
    app: harbor
    component: trivy
    release: harbor
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: core
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: core
      release: harbor
  template:
    metadata:
      annotations:
        checksum/configmap: c8548a620a464d3c00e1a2e878d013f2f9f974c21f7f8a290777e45f948f2d72
        checksum/secret: bed8448d0fd75e0c061967ea18e3e8531a039aa922989f1974277366026ed9f8
        checksum/secret-jobservice: b19a59adfe898cec043c040497221c0aa20f8875df5ee7b6cc7f9fd79cd4606a
      labels:
        app: harbor
        component: core
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: JOBSERVICE_SECRET
              name: harbor-jobservice
        envFrom:
        - configMapRef:
            name: harbor-core
        - secretRef:
            name: harbor-core
        image: goharbor/harbor-core:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /api/v2.0/ping
            port: 8080
            scheme: HTTP
          periodSeconds: 10
        name: core
        ports:
        - containerPort: 8080
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /api/v2.0/ping
            port: 8080
            scheme: HTTP
          periodSeconds: 10
        startupProbe:
          failureThreshold: 360
          httpGet:
            path: /api/v2.0/ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/core/app.conf
          name: config
          subPath: app.conf
        - mountPath: /etc/core/key
          name: secret-key
          subPath: key
        - mountPath: /etc/core/private_key.pem
          name: token-service-private-key
          subPath: tls.key
        - mountPath: /etc/core/ca
          name: ca-download
        - mountPath: /etc/core/token
          name: psc
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          items:
          - key: app.conf
            path: app.conf
          name: harbor-core
        name: config
      - name: secret-key
        secret:
          items:
          - key: secretKey
            path: key
          secretName: harbor-core
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret: null
      - emptyDir: {}
        name: psc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: jobservice
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: cc0e1292cee3c8425c958aeee30046a701a7b3e32ce7b5d3751cceebea93e2f3
        checksum/configmap-env: 52de7676d9ac66bda6ec9e57e3274d89d9b22ddea971c927ebb81964b680f5df
        checksum/secret: 3a3ac1d7e632adde9265411b8e18ec51975151076e4e65b3aaf00abdfb3cabf8
        checksum/secret-core: b6080051a5c50800b0cdff10443c4130205a623180e1ee5cbca1dc729833b636
      labels:
        app: harbor
        chart: harbor
        component: jobservice
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        envFrom:
        - configMapRef:
            name: harbor-jobservice-env
        - secretRef:
            name: harbor-jobservice
        image: goharbor/harbor-jobservice:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: jobservice
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/jobservice/config.yml
          name: jobservice-config
          subPath: config.yml
        - mountPath: /var/log/jobs
          name: job-logs
          subPath: null
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          name: harbor-jobservice
        name: jobservice-config
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: portal
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: portal
      release: harbor
  template:
    metadata:
      annotations:
        checksum/configmap: 81e3c496ae5701420a27d38fd5d8a908c1ba48909fbc7d774e6325c925e5b224
      labels:
        app: harbor
        component: portal
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - image: goharbor/harbor-portal:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: portal
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: portal-config
          subPath: nginx.conf
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
      - configMap:
          name: harbor-portal
        name: portal-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: registry
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: 99f1c1944b0b6834f93e591df51af8d3d24d3cc83ac0d6b7508cc2f96e8768c8
        checksum/secret-core: 7fd25a0db6a987f737692f789ece890367e4a04a1022ee7ff87108ba4f2b9753
        checksum/secret-jobservice: 1d8dbb1f15556d6c7dee9ea0335c6660b86cffe2472be0da846d29e98be7d802
      labels:
        app: harbor
        chart: harbor
        component: registry
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - args:
        - serve
        - /etc/registry/config.yml
        env: null
        envFrom:
        - secretRef:
            name: harbor-registry
        image: goharbor/registry-photon:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: registry
        ports:
        - containerPort: 5000
        - containerPort: 5001
        readinessProbe:
          httpGet:
            path: /
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/passwd
          name: registry-htpasswd
          subPath: passwd
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: JOBSERVICE_SECRET
              name: harbor-jobservice
        envFrom:
        - configMapRef:
            name: harbor-registryctl
        - secretRef:
            name: harbor-registry
        - secretRef:
            name: harbor-registryctl
        image: goharbor/harbor-registryctl:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: registryctl
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
        - mountPath: /etc/registryctl/config.yml
          name: registry-config
          subPath: ctl-config.yml
      securityContext:
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
      - name: registry-htpasswd
        secret:
          items:
          - key: REGISTRY_HTPASSWD
            path: passwd
          secretName: harbor-registry-htpasswd
      - configMap:
          name: harbor-registry
        name: registry-config
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: database
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: database
      release: harbor
  serviceName: harbor-database
  template:
    metadata:
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
      labels:
        app: harbor
        chart: harbor
        component: database
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        envFrom:
        - secretRef:
            name: harbor-database
        image: goharbor/harbor-db:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        name: database
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: database-data
          subPath: null
        - mountPath: /dev/shm
          name: shm-volume
      initContainers:
      - args:
        - -c
        - '[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata
          ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/*
          /var/lib/postgresql/data/pgdata/ || true'
        command:
        - /bin/sh
        image: goharbor/harbor-db:v2.9.1
        imagePullPolicy: IfNotPresent
        name: data-migrator
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: database-data
          subPath: null
      - args:
        - -c
        - chmod -R 700 /var/lib/postgresql/data/pgdata || true
        command:
        - /bin/sh
        image: goharbor/harbor-db:v2.9.1
        imagePullPolicy: IfNotPresent
        name: data-permissions-ensurer
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: database-data
          subPath: null
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 512Mi
        name: shm-volume
  volumeClaimTemplates:
  - metadata:
      annotations: null
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: database-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: redis
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: redis
      release: harbor
  serviceName: harbor-redis
  template:
    metadata:
      labels:
        app: harbor
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - image: goharbor/redis-photon:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 300
          periodSeconds: 10
          tcpSocket:
            port: 6379
        name: redis
        readinessProbe:
          initialDelaySeconds: 1
          periodSeconds: 10
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /var/lib/redis
          name: data
          subPath: null
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
  volumeClaimTemplates:
  - metadata:
      annotations: null
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: trivy
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: trivy
      release: harbor
  serviceName: harbor-trivy
  template:
    metadata:
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
      labels:
        app: harbor
        chart: harbor
        component: trivy
        heritage: Helm
        release: harbor
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
        - name: SCANNER_LOG_LEVEL
          value: info
        - name: SCANNER_TRIVY_CACHE_DIR
          value: /home/scanner/.cache/trivy
        - name: SCANNER_TRIVY_REPORTS_DIR
          value: /home/scanner/.cache/reports
        - name: SCANNER_TRIVY_DEBUG_MODE
          value: "false"
        - name: SCANNER_TRIVY_VULN_TYPE
          value: os,library
        - name: SCANNER_TRIVY_TIMEOUT
          value: 5m0s
        - name: SCANNER_TRIVY_GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              key: gitHubToken
              name: harbor-trivy
        - name: SCANNER_TRIVY_SEVERITY
          value: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        - name: SCANNER_TRIVY_IGNORE_UNFIXED
          value: "false"
        - name: SCANNER_TRIVY_SKIP_UPDATE
          value: "false"
        - name: SCANNER_TRIVY_OFFLINE_SCAN
          value: "false"
        - name: SCANNER_TRIVY_SECURITY_CHECKS
          value: vuln
        - name: SCANNER_TRIVY_INSECURE
          value: "false"
        - name: SCANNER_API_SERVER_ADDR
          value: :8080
        - name: SCANNER_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redisURL
              name: harbor-trivy
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redisURL
              name: harbor-trivy
        - name: SCANNER_JOB_QUEUE_REDIS_URL
          valueFrom:
            secretKeyRef:
              key: redisURL
              name: harbor-trivy
        image: goharbor/trivy-adapter-photon:v2.9.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /probe/healthy
            port: api-server
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
        name: trivy
        ports:
        - containerPort: 8080
          name: api-server
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /probe/ready
            port: api-server
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        volumeMounts:
        - mountPath: /home/scanner/.cache
          name: data
          readOnly: false
          subPath: null
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
  volumeClaimTemplates:
  - metadata:
      annotations: null
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
  namespace: harbor
spec:
  rules:
  - host: harbor.district.amanibhavam.defn.run
    http:
      paths:
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /api/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /service/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /v2/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /chartrepo/
        pathType: Prefix
      - backend:
          service:
            name: harbor-core
            port:
              number: 80
        path: /c/
        pathType: Prefix
      - backend:
          service:
            name: harbor-portal
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - harbor.district.amanibhavam.defn.run
    secretName: null
