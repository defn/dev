apiVersion: v1
kind: Namespace
metadata:
  name: pihole
---
apiVersion: v1
data:
  02-custom.conf: |
    addn-hosts=/etc/addn-hosts
  05-pihole-custom-cname.conf: ""
  addn-hosts: ""
kind: ConfigMap
metadata:
  labels:
    app: pihole
    chart: pihole-2.18.0
    heritage: Helm
    release: pihole
  name: pihole-custom-dnsmasq
  namespace: pihole
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/pihole/pihole@sha256:8bc45afe1625487aef62859a5bf02f3d7b3429e480f4e29e4689635ab86ec312
          env:
            - name: WEB_PORT
              value: "80"
            - name: VIRTUAL_HOST
              value: pi.hole
            - name: WEBPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: pihole-password
            - name: PIHOLE_DNS_
              value: cluster.infra_cidr_16).128.10;cluster.infra_cidr_16).128.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /admin/index.php
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
          name: pihole
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 53
              name: dns
              protocol: TCP
            - containerPort: 53
              name: dns-udp
              protocol: UDP
            - containerPort: 443
              name: https
              protocol: TCP
            - containerPort: 67
              name: client-udp
              protocol: UDP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /admin/index.php
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
          resources: {}
          securityContext:
            privileged: false
          volumeMounts:
            - mountPath: /etc/pihole
              name: config
            - mountPath: /etc/dnsmasq.d/02-custom.conf
              name: custom-dnsmasq
              subPath: 02-custom.conf
            - mountPath: /etc/addn-hosts
              name: custom-dnsmasq
              subPath: addn-hosts
      hostNetwork: false
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: pihole
        - configMap:
            defaultMode: 420
            name: pihole-custom-dnsmasq
          name: custom-dnsmasq
    metadata:
      annotations:
        checksum.config.adlists: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546
        checksum.config.blacklist: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546
        checksum.config.dnsmasqConfig: c790a30e43345241e42908cfedcb1fa59909514908b3c4aaf8fd251787d370f
        checksum.config.regex: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546
        checksum.config.staticDhcpConfig: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546
        checksum.config.whitelist: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546
      labels:
        app: pihole
        release: pihole
  replicas: 1
  selector:
    matchLabels:
      app: pihole
      release: pihole
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pihole
    chart: pihole-2.18.0
    heritage: Helm
    release: pihole
  name: pihole
  namespace: pihole
---
spec:
  ingressClassName: traefik
  rules:
    - host: pihole.district.amanibhavam.defn.run
      http:
        paths:
          - backend:
              service:
                name: pihole-web
                port:
                  number: 80
            path: /
            pathType: Prefix
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
  name: pihole-web
  namespace: pihole
---
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: pihole
    chart: pihole-2.18.0
    component: ""
    heritage: Helm
    release: pihole
  name: pihole
  namespace: pihole
---
spec:
  containers:
    - image: 169.254.32.1:5000/curlimages/curl@sha256:4a3396ae573c44932d06ba33f8696db4429c419da87cbdc82965ee96a37dd0af
      command:
        - sh
        - -c
        - curl http://pihole-web:80/
      imagePullPolicy: IfNotPresent
      name: hook1-container
  restartPolicy: Never
  terminationGracePeriodSeconds: 0
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  name: pihole-smoke-test
  namespace: pihole
---
apiVersion: v1
data:
  password: YWRtaW4=
kind: Secret
metadata:
  labels:
    app: pihole
    chart: pihole-2.18.0
    heritage: Helm
    release: pihole
  name: pihole-password
  namespace: pihole
type: Opaque
---
spec:
  clusterIP: 10.250.128.53.53
  ports:
    - name: dns
      port: 53
      protocol: TCP
      targetPort: dns
    - name: dns-udp
      port: 53
      protocol: UDP
      targetPort: dns-udp
  selector:
    app: pihole
    release: pihole
  type: ClusterIP
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
    chart: pihole-2.18.0
    heritage: Helm
    release: pihole
  name: pihole-dns
  namespace: pihole
---
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: pihole
    release: pihole
  type: ClusterIP
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
    chart: pihole-2.18.0
    heritage: Helm
    release: pihole
  name: pihole-web
  namespace: pihole
