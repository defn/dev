apiVersion: v1
kind: Namespace
metadata:
  name: harbor
---
apiVersion: v1
data:
  _REDIS_URL_CORE: redis://harbor-redis:6379/0?idle_timeout_seconds=30
  _REDIS_URL_REG: redis://harbor-redis:6379/2?idle_timeout_seconds=30
  CHART_CACHE_DRIVER: redis
  CONFIG_PATH: /etc/core/app.conf
  CORE_LOCAL_URL: http://127.0.0.1:8080
  CORE_URL: http://harbor-core:80
  DATABASE_TYPE: postgresql
  EXT_ENDPOINT: https://core.harbor.domain
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_URL: http://harbor-jobservice
  LOG_LEVEL: info
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory
  PORT: "8080"
  PORTAL_URL: http://harbor-portal
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_HOST: harbor-database
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_SSLMODE: disable
  POSTGRESQL_USERNAME: postgres
  QUOTA_UPDATE_PROVIDER: db
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_STORAGE_PROVIDER_NAME: filesystem
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
  TRIVY_ADAPTER_URL: http://harbor-trivy:8080
  WITH_TRIVY: "true"
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
apiVersion: v1
data:
  config.yml: |
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
apiVersion: v1
data:
  CORE_URL: http://harbor-core:80
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice-env
  namespace: harbor
---
apiVersion: v1
data:
  nginx.conf: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
apiVersion: v1
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-core@sha256:6412d679fdc3fd8834eb768e4c4ed6443e29718eb92476097b0f88eaab73cd23
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: JOBSERVICE_SECRET
                  name: harbor-jobservice
          envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
          name: core
          ports:
            - containerPort: 8080
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
          startupProbe:
            failureThreshold: 360
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            items:
              - key: app.conf
                path: app.conf
            name: harbor-core
          name: config
        - name: secret-key
          secret:
            items:
              - key: secretKey
                path: key
            secretName: harbor-core
        - name: token-service-private-key
          secret:
            secretName: harbor-core
        - name: ca-download
        - emptyDir: {}
          name: psc
    metadata:
      annotations:
        checksum/configmap: c8548a620a464d3c00e1a2e878d013f2f9f974c21f7f8a290777e45f948f2d72
        checksum/secret: 2a9134bc3f500d658f302233ae478257ae677f6e69353c9e196740965c51a499
        checksum/secret-jobservice: 61720b16b55a7be238bde535132e0b5d3dc0ad3c0ce327e094d84f40e4542e23
      labels:
        app: harbor
        component: core
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: core
      release: harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: core
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-jobservice@sha256:39435daedd0c80e923b1a558a8f67c5fb9d2e68476c6b5782287ea2464f0eccc
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
          envFrom:
            - configMapRef:
                name: harbor-jobservice-env
            - secretRef:
                name: harbor-jobservice
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: jobservice
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            name: harbor-jobservice
          name: jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: harbor-jobservice
    metadata:
      annotations:
        checksum/configmap: cc0e1292cee3c8425c958aeee30046a701a7b3e32ce7b5d3751cceebea93e2f3
        checksum/configmap-env: 52de7676d9ac66bda6ec9e57e3274d89d9b22ddea971c927ebb81964b680f5df
        checksum/secret: 87408fb1aaa027c4d14b1780c061ec522a08f2bd47f0b88059366be457ebc29b
        checksum/secret-core: 947bcec491c20eee2a9a2ada68ce13f83bebd873f504c87cbbf21c55e4396636
      labels:
        app: harbor
        chart: harbor
        component: jobservice
        heritage: Helm
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: jobservice
      release: harbor
  strategy:
    type: RollingUpdate
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-portal@sha256:2809c5735a70b33a6c7eccbad1cd6f6c171bc5c0ea5da9bcc6463e7749662c02
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: portal
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              name: portal-config
              subPath: nginx.conf
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - configMap:
            name: harbor-portal
          name: portal-config
    metadata:
      annotations:
        checksum/configmap: 81e3c496ae5701420a27d38fd5d8a908c1ba48909fbc7d774e6325c925e5b224
      labels:
        app: harbor
        component: portal
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: portal
      release: harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: portal
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/registry-photon@sha256:8a26e8cb78628a24b42547e2bc832b65198b36106cfe22a033c39e95ad4390de
          args:
            - serve
            - /etc/registry/config.yml
          envFrom:
            - secretRef:
                name: harbor-registry
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: registry
          ports:
            - containerPort: 5000
            - containerPort: 5001
          readinessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/passwd
              name: registry-htpasswd
              subPath: passwd
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
        - image: 169.254.32.1:5000/goharbor/harbor-registryctl@sha256:cce272836449c500ec6b0c4c05072ef6aaf26ca7f057c715d12f38f4d4c0cdef
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: JOBSERVICE_SECRET
                  name: harbor-jobservice
          envFrom:
            - configMapRef:
                name: harbor-registryctl
            - secretRef:
                name: harbor-registry
            - secretRef:
                name: harbor-registryctl
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: registryctl
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - name: registry-htpasswd
          secret:
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
            secretName: harbor-registry-htpasswd
        - configMap:
            name: harbor-registry
          name: registry-config
        - name: registry-data
          persistentVolumeClaim:
            claimName: harbor-registry
    metadata:
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: b328b4cb89b4a336b547022d27fc80e87f3fc60ba7e86a069568167fd3196eb8
        checksum/secret-core: 6c978e31a6e2f991a8ea3a36972f55b8aa0d4a5d8339fd84594cd34747b0a8e2
        checksum/secret-jobservice: 2cd56177cc60ac837e01f14f3357dc0fd4cebe945969629530e89b12ed4617a2
      labels:
        app: harbor
        chart: harbor
        component: registry
        heritage: Helm
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: registry
      release: harbor
  strategy:
    type: RollingUpdate
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
spec:
  rules:
    - host: harbor.district.amanibhavam.defn.run
      http:
        paths:
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /api/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /service/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /v2/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /chartrepo/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /c/
            pathType: Prefix
          - backend:
              service:
                name: harbor-portal
                port:
                  number: 80
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - harbor.district.amanibhavam.defn.run
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
  namespace: harbor
---
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
apiVersion: v1
data:
  CSRF_KEY: NlE0ZFZDcFBRVVJ2MzdjY3JoNlMzZ25JYmZ1UHV6eWk=
  HARBOR_ADMIN_PASSWORD: SGFyYm9yMTIzNDU=
  POSTGRESQL_PASSWORD: Y2hhbmdlaXQ=
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
  secret: SW9OZjNnNGF1c2J4MXN1Yw==
  secretKey: bm90LWEtc2VjdXJlLWtleQ==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQUxZaGxGUVVhei9WWnljY1IvSEFYSTB3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSXpNVEV3TkRJeU5ETXdPRm9YRFRJMApNVEV3TXpJeU5ETXdPRm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBd2M4Tk80K2xVeUV4ZUNZOEgyMW1KaVcydEUzVU4vbnUKUjlzSnltcUJGWTQ1QW84ZWI3SThIQmg1dW9qbzAwcGtKazJTa3ViS294dmo4QkR2SFNIbFNtam9NdHNtT0loSwpEc1R1V0xRQUh0ZkliMHNyUzNUZDF4SzVYV25RbkZVTFZZcG1QQ1YxUTZrQXdPckVvNUY3N2FFUkJZRmViV0pKCnlmOENVQ0djNlIyOXJzZ1Rha2c5ZlBXSGhNSElJbG1xMFFrUG43TXhQdXYwRDdGS0dlY0RxNDQreDNwMDRGQzIKNmh6MisyeWJhL2kvWXd4NysySXVXdEFsd056aEUrNVQzT09lamozaEJXa000Vlc5aGk2NW1jelRLOVVQTHl3MApzMDJjOUxwYlJoUWFxbkpmNXUySWF2dGxFTXFwSFBGRmZWU2hZdkxOcWZ1d0VUOGpxR1RzY1FJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk4ybXJTdjJjUGN2Yko1V1BhbXRaTlJ3cmw4RwpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFnNHV1SjhOcTlpTzVPbWpySWNKM0hUV2ppZnlxalQ0WW5wa2FmCnZQUTdnTHJ5SVhIVWREYi9JRnJReXRjTCsrY1haOWJ5K3NCZ0V4OXRPZzVlZzlGOXZEVHlyUkV6MWJzR0NDdisKVUJCcG1RVFdPL1E3bEV3dUdrcjY2TEFoUkNKYkVBYVV1bTF2Mi82VW5uOERYRktlYzRueFdxaDJiWG1wOFAxLwpyK1ZFQjRHWHBDMjljZjI0K0JNSlFwRU85TmFJYm9lOUFJOXJjUGtwcWFOWWJiTjFJeU1xSGFpdXVEVHJWVWgvCmtYQjRJNytxVVZwU3FvOXZOL1huUHk4UmpxekxyeHdNR1BTU3pKSTY4eCthTXJPZ0YrRFIyZHdJWjN2TlZWYVUKRjEwWFlzQWpFQ2tjY0hVQzNZYnNKd2dTUmRtVTMySG9BQkZtUXlqRXl5elZGNGxLCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBd2M4Tk80K2xVeUV4ZUNZOEgyMW1KaVcydEUzVU4vbnVSOXNKeW1xQkZZNDVBbzhlCmI3SThIQmg1dW9qbzAwcGtKazJTa3ViS294dmo4QkR2SFNIbFNtam9NdHNtT0loS0RzVHVXTFFBSHRmSWIwc3IKUzNUZDF4SzVYV25RbkZVTFZZcG1QQ1YxUTZrQXdPckVvNUY3N2FFUkJZRmViV0pKeWY4Q1VDR2M2UjI5cnNnVApha2c5ZlBXSGhNSElJbG1xMFFrUG43TXhQdXYwRDdGS0dlY0RxNDQreDNwMDRGQzI2aHoyKzJ5YmEvaS9Zd3g3CisySXVXdEFsd056aEUrNVQzT09lamozaEJXa000Vlc5aGk2NW1jelRLOVVQTHl3MHMwMmM5THBiUmhRYXFuSmYKNXUySWF2dGxFTXFwSFBGRmZWU2hZdkxOcWZ1d0VUOGpxR1RzY1FJREFRQUJBb0lCQVFEQWNneTl1K0Y2TGxlawo2cktBc216Z0xFckR0eFNua0xHZkFFMDBoWlV3QmsxdDBSZHo2aFB1QWcrOXZmMFM4YWVJc1RaK1VGV2VxUzhwClRtZGhFaXRRTytOMXZFNnpqQUdkc01iTHBkRUl6MVBqejB4cVhOMTdsc2doamRUcnB6YmQ5ZE9XbmN0WEtCWHIKZWpOUUNFSjZyNWpyVW82bEp4Z0dVQVhIODlpUFVKSndOSUpDQWM4UEZzclkzbU1WdTdhWXJyUFB4UHdoeWNZMwpJVHNUcGRESjdBNlczbUVmQWlOSktpMXJKa3JSRmZPN1JMc20vYkI3d3lpVmtNeFN3YXBTUXlWZGtWVElXZVZ4CmdKcHZocWVlTlpmaWwvSzhRbHVHdjFwV0oxTWQyV0xCdHo3Y0ZCcE1XbDE1ekhvaWhUTkQ1SUZEeFk2ZW42bU4KQmljZGlVN0JBb0dCQU5sMzFoV1VUN3Zra1JULy9QS3ZndDdPeWVPQURnRFBNcHhpTWhUSkhVNVJYa2NGSHl5TwpwNXh3ajBGcjAwYmFxWWgxazk4U2JIWXlHbUhOamp6Ui9ORXd4NFAzNTNYdHdZQUpNRm9TUUVsRGJwYkF4SmQ2CnlPdVdaaXVyVnVKYVFhd1NQeUY0ditEU2hBMmVlRUhwSkJQaHFUZHV4ZXlsci9pNXpSNFlaNnNWQW9HQkFPUW0KREs5V1p6ZDJTVS9TdzcrTFhBOGlkOFZVZDA0V09wLzZnaVJoZXM4a3l5NGxKOWZtUk9BVlZDZVBITDY4dEd2Mwpqa1ZvQVNrK2RUT1hMN3JTOEE3OFRyM3pLb1hlRld4Nmx6d1ZEdDk1TTUyOXdUZjVxcTJjWVorL1hjMTJqems1Ck1vaVVGdEFzN1hIVmtzcjRFb2hxajJaMW5xY1ArbTBaV3IrYWwrTHRBb0dCQUpyL3JlZ3RrSE1VWTAvN2NOZXMKdnZOOW9pbnpvSWQxSnRhTnFySmo4ZTViVW4zK0tZMEJsSGVOUnAzVGM0QWg1QW50KzlwWDhGU0NPNG1RRUJ4TApjdzNLM2JteTNSZVJ3WVEzaUczNmFqV055V25MdFpOZUlZekE0c3VuVU1MK242WThUeURWUnJYQWRmeWJBWTNBCjFVVVNaeUNxWkluYVFrVmVjTk5OZzc1TkFvR0FDZmxEMnJKclJyaHNFZ3BEdG03d01sVXVhVGo5RWpQVWtrUFEKUnFqZ1JvZjBQZXN2NTdkUVVYOTlNMUdGVHkxT3NkMmJvWnNmV2Q4NkhteEFrT2xCeDFYdVYwMTNFVzBaQUtvSApUSUFiSzFmUUV0aEZ4eDJxQVhieHFac2pEYVZlTTRFMW5WVGovbXZJWVk2Vm9UdmhDNGVsQnpTakgraUo2UlVQCnE0cWxreTBDZ1lFQTFPTCtha3Y0enUySVpkc0EwazBDT2FyQldPRWxCYmdDcUwzeVRLMDIxb3dNVy9LdlQ1aGkKTUQ2VlQvcUZYYVVEY2ZYUjRLU3R4UGY0a0o1aEhWelNUQXpqclpTcEdXamMrcVNobnF1eTJMSC9KZnVzWmp5Zgpxa0EwVUNMTVozVWNEdGZCTTlGSjlWeWY1VDBCK3d4eGRHYm9BVWQ4TG9IemJocG03UDhMSi9nPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  POSTGRES_PASSWORD: Y2hhbmdlaXQ=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  JOBSERVICE_SECRET: bjRRREdWbUxwYjVsaE5VbQ==
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTTP_SECRET: R1VTdDJ3Z2JQYml5T3hoVA==
  REGISTRY_REDIS_PASSWORD: ""
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTPASSWD: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJGJxR3VJQlNyMW93LmJaWTZHckdiQmVDVzByMGRyajJ5Zjc4MkJjZmdvUmJNRzZqMXZ4a3Rx
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry-htpasswd
  namespace: harbor
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  gitHubToken: ""
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
type: Opaque
---
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: core
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
spec:
  ports:
    - port: 5432
  selector:
    app: harbor
    component: database
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
---
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: jobservice
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: portal
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
spec:
  ports:
    - port: 6379
  selector:
    app: harbor
    component: redis
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
---
spec:
  ports:
    - name: http-registry
      port: 5000
    - name: http-controller
      port: 8080
  selector:
    app: harbor
    component: registry
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
spec:
  ports:
    - name: http-trivy
      port: 8080
      protocol: TCP
  selector:
    app: harbor
    component: trivy
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
---
spec:
  template:
    spec:
      initContainers:
        - image: 169.254.32.1:5000/goharbor/harbor-db@sha256:cff528fada933112112b502bbc042de6870e84395c076ad1b873416930d4d8fe
          args:
            - -c
            - '[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true'
          command:
            - /bin/sh
          imagePullPolicy: IfNotPresent
          name: data-migrator
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
        - image: 169.254.32.1:5000/goharbor/harbor-db@sha256:cff528fada933112112b502bbc042de6870e84395c076ad1b873416930d4d8fe
          args:
            - -c
            - chmod -R 700 /var/lib/postgresql/data/pgdata || true
          command:
            - /bin/sh
          imagePullPolicy: IfNotPresent
          name: data-permissions-ensurer
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-db@sha256:cff528fada933112112b502bbc042de6870e84395c076ad1b873416930d4d8fe
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: harbor-database
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 1
          name: database
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
            - mountPath: /dev/shm
              name: shm-volume
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
      volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 512Mi
          name: shm-volume
    metadata:
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
      labels:
        app: harbor
        chart: harbor
        component: database
        heritage: Helm
        release: harbor
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: database
      release: harbor
  serviceName: harbor-database
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: database-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: database
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/redis-photon@sha256:182e0164ff3ea80a7a939c2d5267aa977ad7ce648fb4ebe6230f1a4218873ead
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            tcpSocket:
              port: 6379
          name: redis
          readinessProbe:
            initialDelaySeconds: 1
            periodSeconds: 10
            tcpSocket:
              port: 6379
          volumeMounts:
            - mountPath: /var/lib/redis
              name: data
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
    metadata:
      labels:
        app: harbor
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: redis
      release: harbor
  serviceName: harbor-redis
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: redis
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/trivy-adapter-photon@sha256:dc5b882a7db4ed9aff1ba9df19342d580ea25db875a70b87bf5ea92109ee9a29
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
            - name: SCANNER_LOG_LEVEL
              value: info
            - name: SCANNER_TRIVY_CACHE_DIR
              value: /home/scanner/.cache/trivy
            - name: SCANNER_TRIVY_REPORTS_DIR
              value: /home/scanner/.cache/reports
            - name: SCANNER_TRIVY_DEBUG_MODE
              value: "false"
            - name: SCANNER_TRIVY_VULN_TYPE
              value: os,library
            - name: SCANNER_TRIVY_TIMEOUT
              value: 5m0s
            - name: SCANNER_TRIVY_GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  key: gitHubToken
                  name: harbor-trivy
            - name: SCANNER_TRIVY_SEVERITY
              value: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
            - name: SCANNER_TRIVY_IGNORE_UNFIXED
              value: "false"
            - name: SCANNER_TRIVY_SKIP_UPDATE
              value: "false"
            - name: SCANNER_TRIVY_OFFLINE_SCAN
              value: "false"
            - name: SCANNER_TRIVY_SECURITY_CHECKS
              value: vuln
            - name: SCANNER_TRIVY_INSECURE
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: :8080
            - name: SCANNER_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
            - name: SCANNER_JOB_QUEUE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /probe/healthy
              port: api-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
          name: trivy
          ports:
            - containerPort: 8080
              name: api-server
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /probe/ready
              port: api-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            - mountPath: /home/scanner/.cache
              name: data
              readOnly: false
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
    metadata:
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
      labels:
        app: harbor
        chart: harbor
        component: trivy
        heritage: Helm
        release: harbor
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: trivy
      release: harbor
  serviceName: harbor-trivy
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: trivy
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
