apiVersion: v1
kind: Namespace
metadata:
  name: harbor
---
apiVersion: v1
data:
  _REDIS_URL_CORE: redis://harbor-redis:6379/0?idle_timeout_seconds=30
  _REDIS_URL_REG: redis://harbor-redis:6379/2?idle_timeout_seconds=30
  CHART_CACHE_DRIVER: redis
  CONFIG_PATH: /etc/core/app.conf
  CORE_LOCAL_URL: http://127.0.0.1:8080
  CORE_URL: http://harbor-core:80
  DATABASE_TYPE: postgresql
  EXT_ENDPOINT: https://core.harbor.domain
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_URL: http://harbor-jobservice
  LOG_LEVEL: info
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory
  PORT: "8080"
  PORTAL_URL: http://harbor-portal
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_HOST: harbor-database
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_SSLMODE: disable
  POSTGRESQL_USERNAME: postgres
  QUOTA_UPDATE_PROVIDER: db
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_STORAGE_PROVIDER_NAME: filesystem
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
  TRIVY_ADAPTER_URL: http://harbor-trivy:8080
  WITH_TRIVY: "true"
  app.conf: |
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
apiVersion: v1
data:
  config.yml: |
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
apiVersion: v1
data:
  CORE_URL: http://harbor-core:80
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  NO_PROXY: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
  REGISTRY_CONTROLLER_URL: http://harbor-registry:8080
  REGISTRY_CREDENTIAL_USERNAME: harbor_registry_user
  REGISTRY_URL: http://harbor-registry:5000
  TOKEN_SERVICE_URL: http://harbor-core:80/service/token
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice-env
  namespace: harbor
---
apiVersion: v1
data:
  nginx.conf: |
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
apiVersion: v1
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-core@sha256:6412d679fdc3fd8834eb768e4c4ed6443e29718eb92476097b0f88eaab73cd23
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: JOBSERVICE_SECRET
                  name: harbor-jobservice
          envFrom:
            - configMapRef:
                name: harbor-core
            - secretRef:
                name: harbor-core
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
          name: core
          ports:
            - containerPort: 8080
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            periodSeconds: 10
          startupProbe:
            failureThreshold: 360
            httpGet:
              path: /api/v2.0/ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/core/app.conf
              name: config
              subPath: app.conf
            - mountPath: /etc/core/key
              name: secret-key
              subPath: key
            - mountPath: /etc/core/private_key.pem
              name: token-service-private-key
              subPath: tls.key
            - mountPath: /etc/core/ca
              name: ca-download
            - mountPath: /etc/core/token
              name: psc
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            items:
              - key: app.conf
                path: app.conf
            name: harbor-core
          name: config
        - name: secret-key
          secret:
            items:
              - key: secretKey
                path: key
            secretName: harbor-core
        - name: token-service-private-key
          secret:
            secretName: harbor-core
        - name: ca-download
          secret:
            secretName: harbor-ingress
        - emptyDir: {}
          name: psc
    metadata:
      annotations:
        checksum/configmap: c8548a620a464d3c00e1a2e878d013f2f9f974c21f7f8a290777e45f948f2d72
        checksum/secret: e785ee34537a596c58b856c1a148c2e53b1896fba761020dfcbf2c384ba9b0e5
        checksum/secret-jobservice: 3b5d2a65ebb8f967763d8b51c7b19bbdd40a3af22fcac673bc5ba041ddd53772
      labels:
        app: harbor
        component: core
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: core
      release: harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: core
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-jobservice@sha256:39435daedd0c80e923b1a558a8f67c5fb9d2e68476c6b5782287ea2464f0eccc
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
          envFrom:
            - configMapRef:
                name: harbor-jobservice-env
            - secretRef:
                name: harbor-jobservice
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: jobservice
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/jobservice/config.yml
              name: jobservice-config
              subPath: config.yml
            - mountPath: /var/log/jobs
              name: job-logs
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            name: harbor-jobservice
          name: jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: harbor-jobservice
    metadata:
      annotations:
        checksum/configmap: cc0e1292cee3c8425c958aeee30046a701a7b3e32ce7b5d3751cceebea93e2f3
        checksum/configmap-env: 52de7676d9ac66bda6ec9e57e3274d89d9b22ddea971c927ebb81964b680f5df
        checksum/secret: bd3a0404a376de666ed250c52b67995ee54b2ad74797d8b868ece7d670af1f37
        checksum/secret-core: 9c71e2bfc9a3e3400910156bb9cdec7ff8b00c0d833a4c25f93c5f4f0f1446e5
      labels:
        app: harbor
        chart: harbor
        component: jobservice
        heritage: Helm
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: jobservice
      release: harbor
  strategy:
    type: RollingUpdate
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-portal@sha256:2809c5735a70b33a6c7eccbad1cd6f6c171bc5c0ea5da9bcc6463e7749662c02
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: portal
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              name: portal-config
              subPath: nginx.conf
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - configMap:
            name: harbor-portal
          name: portal-config
    metadata:
      annotations:
        checksum/configmap: 81e3c496ae5701420a27d38fd5d8a908c1ba48909fbc7d774e6325c925e5b224
      labels:
        app: harbor
        component: portal
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: portal
      release: harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: portal
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/registry-photon@sha256:8a26e8cb78628a24b42547e2bc832b65198b36106cfe22a033c39e95ad4390de
          args:
            - serve
            - /etc/registry/config.yml
          envFrom:
            - secretRef:
                name: harbor-registry
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: registry
          ports:
            - containerPort: 5000
            - containerPort: 5001
          readinessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/passwd
              name: registry-htpasswd
              subPath: passwd
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
        - image: 169.254.32.1:5000/goharbor/harbor-registryctl@sha256:cce272836449c500ec6b0c4c05072ef6aaf26ca7f057c715d12f38f4d4c0cdef
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: JOBSERVICE_SECRET
                  name: harbor-jobservice
          envFrom:
            - configMapRef:
                name: harbor-registryctl
            - secretRef:
                name: harbor-registry
            - secretRef:
                name: harbor-registryctl
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 10
          name: registryctl
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsUser: 10000
      terminationGracePeriodSeconds: 120
      volumes:
        - name: registry-htpasswd
          secret:
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
            secretName: harbor-registry-htpasswd
        - configMap:
            name: harbor-registry
          name: registry-config
        - name: registry-data
          persistentVolumeClaim:
            claimName: harbor-registry
    metadata:
      annotations:
        checksum/configmap: 1dd422c1f80f9b0e00e1a2297e956c1da3fb1d6bc24892179accf38bc1e3be96
        checksum/secret: c854a58422a93ee228c1166142cff93681be158be387c71f663609d4be03dc20
        checksum/secret-core: 531ea0b2542d2aaa87158b063b94ecdac459a8724d52a6b4d0e4181d30d3ac5b
        checksum/secret-jobservice: ce72dbfc7743cd40de002bf73c794d0f195bf504b8ddc16a214f23bf8d8d5b0a
      labels:
        app: harbor
        chart: harbor
        component: registry
        heritage: Helm
        release: harbor
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: harbor
      component: registry
      release: harbor
  strategy:
    type: RollingUpdate
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
spec:
  rules:
    - host: core.harbor.domain
      http:
        paths:
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /api/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /service/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /v2/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /chartrepo/
            pathType: Prefix
          - backend:
              service:
                name: harbor-core
                port:
                  number: 80
            path: /c/
            pathType: Prefix
          - backend:
              service:
                name: harbor-portal
                port:
                  number: 80
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - core.harbor.domain
      secretName: harbor-ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
  namespace: harbor
---
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
apiVersion: v1
data:
  CSRF_KEY: ZWM0RmVxUWFzR2E0dkhCa1dCSlBIQTdvNExDcjZadE0=
  HARBOR_ADMIN_PASSWORD: SGFyYm9yMTIzNDU=
  POSTGRESQL_PASSWORD: Y2hhbmdlaXQ=
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
  secret: N2xzZDdMMlFhaVlFVElKcQ==
  secretKey: bm90LWEtc2VjdXJlLWtleQ==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQU5Db0tCM01OMDFsZWJFajhGVndBYjh3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSXpNVEV3TVRBM01qZ3lPRm9YRFRJMApNVEF6TVRBM01qZ3lPRm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBejJ0SzYyYmJRVi9oYktBRWM3ek1OQXdUZUxGcERFVi8KWTFDZmttcWJRYTJlSFM3OTB4SzRKV0luMExSeE43ODFhRUNXQWFGaHQ1UXpVakwvWTY3OHk3cWtQY3ZySG5nNwpzbEpDWEJ2emJrcktLd0tiTXhBTFVIVEU2ZXNJYzlPOXp3NXJiWll4RzdNa29sQkF1OEIvc25TZk9xM3llUEMwClJZcmZLeDBEUzV5dlEvMGFiaEJnRUduYlJwMGVhWk5SdzMzVHFJeFJvL29aZitkSkhYRm8rREVacHdPTmd2TTIKQ2gzL0pFeGhYdXZkQjhPekMvNTRSYjVkUUEyVFEyYkpDZVdMWElRdGdXcGtsZFpKbkJ6MEhFVG5WNjN3dVB5NQphMmROeENOYzlkL05wR1JLcVFEQ0VIYTA2ZW1qcVVxcC9UbldoQitCNEttcS9FVGtBUEQ5VlFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRlBoYkRoZVYwSHhwa2ZPS21TVXlBSm83aGN1cApNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUMxZXE2Z253dWRtUmN0VXhVbDAxQnJURkxqbmFzWlRWRmduUXROCmRsQWhQN2I4V1M2L3ZSaytFZDAwWmk1RnpQd1B1ZGxUWWZoM2krN0hma21KUDNrazdvWWJVT0YzQ1NsOXROK3cKMXNqMkNXbDF6aEU1WUthZVFpcTFwU0M5cjNUR3FzYTIxSDU3cTFyVWZMb0x3QS90NzhsSDBtZk01bTl5Y0lrVApDWGRhd2JNM3ZMeU10KzVWdTNvNWZUZ0R1QjYxRzAxVFlqd1pnYTFCelRsTXd5a0RMNk9zMzF1QXJQcjBpWktPCjNQRXAwV0ZTK2tsbmxYOFJ1cGJZS0U5aDB2MGpuTjI3MitBdit0S090eURXSU44ZmJ6TlVXK3ZpS21sbWoyRlYKTmNvcHJISHl1UTc3OGFoNDRUazhVQk5ieUtGSlVPS3U5Y3dpelJqQ1RKcG4wa1krCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBejJ0SzYyYmJRVi9oYktBRWM3ek1OQXdUZUxGcERFVi9ZMUNma21xYlFhMmVIUzc5CjB4SzRKV0luMExSeE43ODFhRUNXQWFGaHQ1UXpVakwvWTY3OHk3cWtQY3ZySG5nN3NsSkNYQnZ6YmtyS0t3S2IKTXhBTFVIVEU2ZXNJYzlPOXp3NXJiWll4RzdNa29sQkF1OEIvc25TZk9xM3llUEMwUllyZkt4MERTNXl2US8wYQpiaEJnRUduYlJwMGVhWk5SdzMzVHFJeFJvL29aZitkSkhYRm8rREVacHdPTmd2TTJDaDMvSkV4aFh1dmRCOE96CkMvNTRSYjVkUUEyVFEyYkpDZVdMWElRdGdXcGtsZFpKbkJ6MEhFVG5WNjN3dVB5NWEyZE54Q05jOWQvTnBHUksKcVFEQ0VIYTA2ZW1qcVVxcC9UbldoQitCNEttcS9FVGtBUEQ5VlFJREFRQUJBb0lCQUVVaG1vZlk4VXpadXhWcwpRKytiUm1nMmVpcm8zbjFEa0pDMloyanlkU3F2eGhvdDlsVnFVTXZNNmo1S1ZjM2h3ZGdzWnBMR2lmNFl1LzR5Cmx5SlBTVnhScWJvYkJCTlV1WGpXcDkxeFIzSkVKUnV1czdHU01HTXhlQXdLMVBkZDVFNWxuUEthYzJXckVKTzAKc2M2aCt5MnNad0cweGpMKzd1YWF3WVRxRjVZVVdoZ2pZR1FMOVpNTmY5SUc1Rjk2ZC9TRnFyTURmUm0yTCt2SQpwMUY5Q1kzOHNwa1JKUDloa3BzMmtKaDlQMm52YWxQZEZZa2JtaHZ5a2JabmR5L1Y1ajAwSHlEOFBXaGhyakphCjNML01KTE5DeUNOWkRvRlBUdDFHemFRd2kwYndRVjJJVGNTZlRxMGNYUlA5VVhkL2ZFR2NRRHF5NWxLd0d4eHYKYkFLVUhTRUNnWUVBOHUrVlFZaXBNd1FYZkxHNmNOckVTaUVPcUoza3JHWXVEeFB1UDdaTHVIRjUxV05VcFRJcApMRUpxMDVpUEMwUDFDT1c3R0t0WkZxWVQrOTg5R210Zi81QXQ2MVExV25INk5VRlFZNXEwUGRoU01VZGE1aFVjCkxrYnhUODlvbXRUQ1FzcVBBY2t5UUVNUWxiQ2U1ZFFLVGdJeDErM1ZzU1NrSmduUUZnRWxCQzBDZ1lFQTJwTEQKSTg0dWZhSjlRU0tBYWF2WFRJOVl4OFBtSlp1MHZ1TCtrVDl2aVdxU3ZZSzBaMFd2QmhROXYraWlXS2g4TmYzZgpZUTJBc2ZnMnhEeVk4bzF6ZlRsU3lFY1diMWJZMzNVN25hbHpvUkluNTFKSVFzbFFJS3ZMc0l1aVZBK29kN3p5CmZNVnlqMlNFSW5wU1ZLdnRYM0xXdjdpNFhyRWo3MkcrUDZ2blRza0NnWUVBdEt3QnNPOVdCcDd3YU1nMUJHRnUKd2tLN2lDT0ZRY0hzVjBKWFdnTFZaYUxmSFJmMmg3VTZjYlFqaHFKYkgrRzJocHR6L2ZEUkhNcis2YjhvemxFMAozL2YyYnFIOTIvb1FQek1IK2t1LzZJN004ZUZEZFFJV0owU1RpdXVSdkRTbkZNMVlkZGVRQzhMVXZyN1FMZFQ0CnBQTjA1a1gzT3ZzcEtURDdGS0pkU1RFQ2dZQmViK0xZYVpFMHZ5d1hKRzBQT3l2KzdFQ1RyMVNWRXoxNDdHTEoKSnZ0dUNCbjJ2NjVxb0hVS3oxd091dGpLTGFIZFFoOXRzNFBUWVVkb2FqWTdObHFiMUZTc0srckptR0NEekFkQwpDNkRtQ3c0cXFDYUlsS3FHTXpRQ3g1SVBkK1IyTjdFZHI4SGJxclpjbnpWTFdDMXJmQmJGSjI2aG15L0hraGU5Ck11eng0UUtCZ1FDbk9QMHRheUVOTEZSbkNDSGxCamkwVk0raUZSRXdiL1B6U0hQNG51VTU5NmJzUUtoK2c1aWoKZ2NXRWtYSzB3VmFWcVRxRUwzdlFkUHRQa0U1RzZBdzFDSGhCbVowNjJhczJjdjhObVphdXg3Nkg3R05SNnpWMgp5bnhkQUhpd1VhSFJDV0tsL1BqVitoRzBnMXdtMVNnd1lOcDJuTGVaV3hPRVZXRTNqbTk5VHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  POSTGRES_PASSWORD: Y2hhbmdlaXQ=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpaRXJzVDJ0bDQrQkh0MXpMRTVUN1l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl6TVRFd01UQTNNamd5T0ZvWERUSTBNVEF6TVRBMwpNamd5T0Zvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzYVM4WjMwMlJBQUNvUGtxN1ovaXArMDJ2T210V3h1ZXNHNXA4dWRzZStxclhBOUgKc3JzQ1BtNGYybTdmby9LZzhPc2plQzBLZEc4VUJnZklXZC9EOElxaDcwUVZTaDVRRElUMThUeDVRdEExWTJteAp3TUhtWUc3ZTM4ZC9zSm5TOHpEeGI4Skg3aDdBaGhFOFRTbEVURnl3TEgzYWY3M0h6Y2tmZkNOUmdPbVFwdGorCkE5NnJWeHNEUXp6cTRYMWtLb1BiSk13NklTcHRXMW9RY081UDRvZlZXSzBXV015OW9sS3hMRzFmN0tjd0ViUGYKSUQwMFZyTGhqWXVQZ2tyNHM5REF6Rm01OHNHakw4V25tSW91QjhwNXJ6T1lsNHRxalhoQlRlOEtQTStyQWtUcwpkSFZyU3h0c3drVmVTWkFENlZlaWdJd1MrUzQweS83UDZsSitNd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGUGpBWlBvS2hOcHU3Q09hNnpUUEZFem5tY2hHTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ0piUkNOQjlOUFp6elBERkNzQllyYkREcHFQMUVWQ3llMW4yVjY1L3MrSlFDUlpZZmNieVVkCjVmYktNWFBXR3hnZWhhMFMzcVlVOGlXQWppOVhOb0NaZTZrY3Z5TEtGZmxtL1FoMWpyOHFJTVBHNUdjS1MrOFAKOXV1U1VWOTJFa0ZzcjBZZjh6M1hHWFdoRTZlOGZMNmo3TjhsS0F3dmY1L0V4bUM4Y3Fqb2pOSHdMRlF6QWJNdQpBZ1lzMHR2RlpBdFZhaVZYVy9uZnhRdW5lS3RPS0Q3VVNKRC9kZ0o3QndqQ0RndER6N2JyeEJ4V3Mza21DZXpKCkxrMnYwdmI4Rm5PRElkeTFUbkdUb3F5WmFzVStWRVIvckRCakNCSmlWYzhjalI4L0ZHd3dtaVY2ekMzdWtLSXkKcGNlQkRJN0JKekVXa2ttdUI1YVppNGd0aWc3WTFpVlIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUtOMWdwaTQxWHFESTBWYzY1U20vekF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl6TVRFd01UQTNNamd5T0ZvWERUSTBNVEF6TVRBMwpNamd5T0Zvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE4Y3FVcitXdDE0ck5wcUhLSEg2bjRlTWFYVlEyRmY2cUZUVC8KM0U4V2dUcjJNV2FZbGVsc1Q3QjliOWJpdktzbjRxeUQ4dURUdGxTdVBBY1Jib2RuZDZwNFZBelBRV0FXa0wwSApEUm5QWkJvbWI0SEFGb2xrV1FBTjNQMndSVGJEdXovb2VHWk5DMFlpYThaVTVMcjlRdGUzNUpKZzVZRHc0aWZDCmpJcjRZTURLc2RHRmhrMGFwZHFtUzk3QmoyWHVrYUtFUDVERTJjN0Zqc09xYXRQWis2TElaYTdHNTVNcnhna0UKNktSem1lY0R4QTA3TDRXdGovQVVoUlpMaHNoOXVWVGEvS3d3SnVXS1R4V3NTR2tHa2FyN1dIemdMWGxSZTZyQwpwVHA4SWdNaFcvcFM2cEJiL0VQZFNBMUZHaWZVRWhOcmhFSWpWTzR1anVTaEdENzVkUUlEQVFBQm8zOHdmVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVUrTUJrK2dxRTJtN3NJNXJyTk04VVRPZVp5RVl3SFFZRApWUjBSQkJZd0ZJSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJpCklsVUQyZ05rd08yaTlBdmE2TTdRQWZSRzdPK1VhbDNrZ1hMNHVaVGVRNjlVSk4zbnl1MW1JR2VmRk93Q0JTV2IKL2VOSGo5cVdoOTlmSytlTGVSaUxnVi9peFRpQkt3ZTVCbUFZWTVFUXRVK3k0ajhnNTd1MzFYdWdqY2NjSkR5bAplYjZ2OEgvZHBqbkNFeGcyVWJZZUJsMm05dUcweTd3d3dnZkorOStQOU9WNVkxaWx5MG5LQTNQcnpYQ1h3SnRzCmJOVjhvTTljU2Vjb1hsY3E0VnFWRHhCalZCZE5FbTVJdW5OcDNqSjdGUFR6bjR0OVhaUG93MHE0a3FWaFRYTGoKakszbW01b01leW1ZbjBaYmd6L0tMaGJOZFdBbjgrYW8xS1poZ29JSHBQdTAxZ3pBVXJ6ZUFuUVpQeTk3SExRLwpGZnZwSW44OXAwNWhZd0NNekFNcQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOGNxVXIrV3QxNHJOcHFIS0hINm40ZU1hWFZRMkZmNnFGVFQvM0U4V2dUcjJNV2FZCmxlbHNUN0I5YjliaXZLc240cXlEOHVEVHRsU3VQQWNSYm9kbmQ2cDRWQXpQUVdBV2tMMEhEUm5QWkJvbWI0SEEKRm9sa1dRQU4zUDJ3UlRiRHV6L29lR1pOQzBZaWE4WlU1THI5UXRlMzVKSmc1WUR3NGlmQ2pJcjRZTURLc2RHRgpoazBhcGRxbVM5N0JqMlh1a2FLRVA1REUyYzdGanNPcWF0UForNkxJWmE3RzU1TXJ4Z2tFNktSem1lY0R4QTA3Ckw0V3RqL0FVaFJaTGhzaDl1VlRhL0t3d0p1V0tUeFdzU0drR2thcjdXSHpnTFhsUmU2ckNwVHA4SWdNaFcvcFMKNnBCYi9FUGRTQTFGR2lmVUVoTnJoRUlqVk80dWp1U2hHRDc1ZFFJREFRQUJBb0lCQVFDTkZmazJ2aDEzTlA0VQo2amtGOFgzQ21BTE5USk1XdUhmRVVoMnVEdFFCNmthM3dyYnNXcjBocnNreTFqK05lWTJYZmJTc3B6WENJWjFkClYzNTdjVFVWcFhuN0NWSnlRa0JJaXBRdnQ4ekZDMkU4RllqaFhhQVpNcWZrT0g5L2s1b1lqQXo1SERCK2tKa0wKTERwakVSMHd3TEVFQmNuV2dTdU51MGVSUEpINzJjRE10K3pPZ2dNL0pZWS90NDNabVc5bjd4T3FOdVFCUHFuTgpjMVNWd1JzNlpXdXVJUnZkZjFKbnJaZUlqSU1obk41dEZwMkFiK2VQNE8vZlNsRWNYdnBVbDdwNjRna3kwSjhECkUzTDlySUNpVWRIK1BKdlQ3c2drWlRmaStVZDdlWlU4RWwzdmo5cEtVUXF0dkxqQ1BZdTFGRkx4Q0FzMmQ4MHMKcEFiRVh5dE5Bb0dCQVBXQU83NEpVWkJwa2pVSFdxVDZnbmI5alpJWTFIRUJaYTlvYmhBM3FubEZZekJwMkkzSApwUWQvbzBFd1NFTGQvejh1bXlvb2NIMC8weGhPVlJsSFRpZmFsQUV6RVBuQjFQV25VY2JJWGlWRFoyMmN3MUdVCkg1aVkwc203UCtaeWJqaGxMWjFoTHVlUDR6TEl4SkhuRWxqWXl1WmN0NWNjdVhLeEYreE1TQ2RIQW9HQkFQd2gKdkErWTVJYTliUWdFVXkyMzI2eS8zZGNrNnZJYzlOOGwzV2srUlFvQ2NqNHVlek1hTi9zK3Z2QmtEckxEMFc5bgptaVlIRVJDaTlhaEk3QVkyNGJaT1BjRU1OSTIwTnJUVW9MNXE0b3Ria2J3N2JFTmlUR2dWYkl1dUx2alBzQUVQCk9UTERKZUF3UFYzVnB2cjcwNC9rVDYwaGhlWnpJdlp3ZHpCK01HOWpBb0dBRzBOb1h3eE40SW00ME9iR0xEZ2QKc1BVcmVhUUVRNkJ5R0c2eWVsNlVNZStBdW1tbXdPZ0E3YnBBK1FaUm9BdGpRekw3ekV5OVlVdHJOL0hMQlltagpwazFoemxoTGRGRVFRMCtYaDBuTkdycEhqQ2F5a2lhdTg1VlZJMDRHSktOa2xpSzJWQm5zeVk1ekhycXBDY0x0CmlLeGFyQVp6NVBZdHFnejhxU00zaUJVQ2dZRUE3NGxCT1BSQjBMendkQmhmeWVTT0lKNGNMY1VXTFRWVGN4bHYKTkFpRDROR1lKZmxVOUtUcElKcHBIc3VBcDFlZ2h4Mi9kbmRxUUFzQ0pvSTVNbUk3cUU3SEhydnd4ZHU3eWFyawptR1BGblM0KzA3MEV5elA5Y1RsQmFhYnZXMVU5V3BSUy9DWW91c2c1MVFjaFgvdVY4SE94T3NQSmlicERNaXlCCklDSVM5QThDZ1lFQWswbzMydi9waVRFa1RKY0lGT2lMNlJyZ2pCVGdQMURWRGxuZUprck5zakJ5VGRLWVYra2EKM3BWbmFLdWo4cU40WWErdVpsQysvZ3FzMHNZK1VJMHl3azhheDNNU2tJUGU2S3I5NlUrQ2NoK1JTTXBEcnJvVQpEdUpIdmVseUQ5K2ZoSDNVVmpHOHhzVzlMVjZ4QU1paG5qRW9pRjAyNjBQSWE1clZBSlZZK3hjPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-ingress
  namespace: harbor
type: kubernetes.io/tls
---
apiVersion: v1
data:
  JOBSERVICE_SECRET: bmVnWXZLSVlhTXVyY1FMaA==
  REGISTRY_CREDENTIAL_PASSWORD: aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTTP_SECRET: YjZpTDhZRkdoMm5iZ3FxTQ==
  REGISTRY_REDIS_PASSWORD: ""
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTPASSWD: aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJGJTMFpoVDlCaTZwRDVFaG1ZMGZEeXVzTWtFRi5NLlMxSUJPcWNObEVvSmhHZVZTc0NUcmZt
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry-htpasswd
  namespace: harbor
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registryctl
  namespace: harbor
type: Opaque
---
apiVersion: v1
data:
  gitHubToken: ""
  redisURL: cmVkaXM6Ly9oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
type: Opaque
---
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: core
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-core
  namespace: harbor
---
spec:
  ports:
    - port: 5432
  selector:
    app: harbor
    component: database
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
---
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: jobservice
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-jobservice
  namespace: harbor
---
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: harbor
    component: portal
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-portal
  namespace: harbor
---
spec:
  ports:
    - port: 6379
  selector:
    app: harbor
    component: redis
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
---
spec:
  ports:
    - name: http-registry
      port: 5000
    - name: http-controller
      port: 8080
  selector:
    app: harbor
    component: registry
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-registry
  namespace: harbor
---
spec:
  ports:
    - name: http-trivy
      port: 8080
      protocol: TCP
  selector:
    app: harbor
    component: trivy
    release: harbor
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
---
spec:
  template:
    spec:
      initContainers:
        - image: 169.254.32.1:5000/goharbor/harbor-db@sha256:cff528fada933112112b502bbc042de6870e84395c076ad1b873416930d4d8fe
          args:
            - -c
            - '[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true'
          command:
            - /bin/sh
          imagePullPolicy: IfNotPresent
          name: data-migrator
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
        - image: 169.254.32.1:5000/goharbor/harbor-db@sha256:cff528fada933112112b502bbc042de6870e84395c076ad1b873416930d4d8fe
          args:
            - -c
            - chmod -R 700 /var/lib/postgresql/data/pgdata || true
          command:
            - /bin/sh
          imagePullPolicy: IfNotPresent
          name: data-permissions-ensurer
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
      containers:
        - image: 169.254.32.1:5000/goharbor/harbor-db@sha256:cff528fada933112112b502bbc042de6870e84395c076ad1b873416930d4d8fe
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: harbor-database
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 1
          name: database
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-data
            - mountPath: /dev/shm
              name: shm-volume
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
      volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 512Mi
          name: shm-volume
    metadata:
      annotations:
        checksum/secret: 55b1e7be0855a53d12362dc11834f575bd16ba09cdd84b0551bda85635e15ac1
      labels:
        app: harbor
        chart: harbor
        component: database
        heritage: Helm
        release: harbor
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: database
      release: harbor
  serviceName: harbor-database
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: database-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: database
    heritage: Helm
    release: harbor
  name: harbor-database
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/redis-photon@sha256:182e0164ff3ea80a7a939c2d5267aa977ad7ce648fb4ebe6230f1a4218873ead
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            tcpSocket:
              port: 6379
          name: redis
          readinessProbe:
            initialDelaySeconds: 1
            periodSeconds: 10
            tcpSocket:
              port: 6379
          volumeMounts:
            - mountPath: /var/lib/redis
              name: data
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 999
        runAsUser: 999
      terminationGracePeriodSeconds: 120
    metadata:
      labels:
        app: harbor
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: redis
      release: harbor
  serviceName: harbor-redis
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: redis
    heritage: Helm
    release: harbor
  name: harbor-redis
  namespace: harbor
---
spec:
  template:
    spec:
      containers:
        - image: 169.254.32.1:5000/goharbor/trivy-adapter-photon@sha256:dc5b882a7db4ed9aff1ba9df19342d580ea25db875a70b87bf5ea92109ee9a29
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal
            - name: SCANNER_LOG_LEVEL
              value: info
            - name: SCANNER_TRIVY_CACHE_DIR
              value: /home/scanner/.cache/trivy
            - name: SCANNER_TRIVY_REPORTS_DIR
              value: /home/scanner/.cache/reports
            - name: SCANNER_TRIVY_DEBUG_MODE
              value: "false"
            - name: SCANNER_TRIVY_VULN_TYPE
              value: os,library
            - name: SCANNER_TRIVY_TIMEOUT
              value: 5m0s
            - name: SCANNER_TRIVY_GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  key: gitHubToken
                  name: harbor-trivy
            - name: SCANNER_TRIVY_SEVERITY
              value: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
            - name: SCANNER_TRIVY_IGNORE_UNFIXED
              value: "false"
            - name: SCANNER_TRIVY_SKIP_UPDATE
              value: "false"
            - name: SCANNER_TRIVY_OFFLINE_SCAN
              value: "false"
            - name: SCANNER_TRIVY_SECURITY_CHECKS
              value: vuln
            - name: SCANNER_TRIVY_INSECURE
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: :8080
            - name: SCANNER_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
            - name: SCANNER_STORE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
            - name: SCANNER_JOB_QUEUE_REDIS_URL
              valueFrom:
                secretKeyRef:
                  key: redisURL
                  name: harbor-trivy
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /probe/healthy
              port: api-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
          name: trivy
          ports:
            - containerPort: 8080
              name: api-server
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /probe/ready
              port: api-server
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            - mountPath: /home/scanner/.cache
              name: data
              readOnly: false
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
    metadata:
      annotations:
        checksum/secret: 81105cb33a8cb2937d69d3a39d46a94953951b6154c8518d288852bcf66b4d6d
      labels:
        app: harbor
        chart: harbor
        component: trivy
        heritage: Helm
        release: harbor
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: trivy
      release: harbor
  serviceName: harbor-trivy
  volumeClaimTemplates:
    - metadata:
        labels:
          app: harbor
          chart: harbor
          heritage: Helm
          release: harbor
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: harbor
    chart: harbor
    component: trivy
    heritage: Helm
    release: harbor
  name: harbor-trivy
  namespace: harbor
