cluster_apps = [
    "coder-amanibhavam-class-cluster-argo-cd",
    "coder-amanibhavam-class-cluster-cert-manager",
    "coder-amanibhavam-class-cluster-cilium",
    "coder-amanibhavam-class-cluster-coder",
    "coder-amanibhavam-class-cluster-descheduler",
    "coder-amanibhavam-class-cluster-env",
    "coder-amanibhavam-class-cluster-external-dns",
    "coder-amanibhavam-class-cluster-external-secrets",
    "coder-amanibhavam-class-cluster-issuer",
    "coder-amanibhavam-class-cluster-karpenter",
    "coder-amanibhavam-class-cluster-kyverno",
    "coder-amanibhavam-class-cluster-l5d-crds",
    "coder-amanibhavam-class-cluster-pod-identity",
    "coder-amanibhavam-class-cluster-postgres-operator",
    "coder-amanibhavam-class-cluster-reloader",
    "coder-amanibhavam-class-cluster-secrets",
    "coder-amanibhavam-class-cluster-tailscale",
    "coder-amanibhavam-class-cluster-tetragon",
    "coder-amanibhavam-class-cluster-traefik",
    "coder-amanibhavam-class-cluster-trust-manager",
    "coder-amanibhavam-class-cluster-xwing",
    "coder-amanibhavam-district-cluster-argo-cd",
    "coder-amanibhavam-district-cluster-argo-events",
    "coder-amanibhavam-district-cluster-argo-workflows",
    "coder-amanibhavam-district-cluster-buildkite",
    "coder-amanibhavam-district-cluster-cert-manager",
    "coder-amanibhavam-district-cluster-cilium",
    "coder-amanibhavam-district-cluster-coder",
    "coder-amanibhavam-district-cluster-deathstar",
    "coder-amanibhavam-district-cluster-descheduler",
    "coder-amanibhavam-district-cluster-env",
    "coder-amanibhavam-district-cluster-external-dns",
    "coder-amanibhavam-district-cluster-external-secrets",
    "coder-amanibhavam-district-cluster-harbor",
    "coder-amanibhavam-district-cluster-headlamp",
    "coder-amanibhavam-district-cluster-issuer",
    "coder-amanibhavam-district-cluster-karpenter",
    "coder-amanibhavam-district-cluster-kyverno",
    "coder-amanibhavam-district-cluster-l5d-crds",
    "coder-amanibhavam-district-cluster-pihole",
    "coder-amanibhavam-district-cluster-pod-identity",
    "coder-amanibhavam-district-cluster-postgres-operator",
    "coder-amanibhavam-district-cluster-reloader",
    "coder-amanibhavam-district-cluster-secrets",
    "coder-amanibhavam-district-cluster-tailscale",
    "coder-amanibhavam-district-cluster-tetragon",
    "coder-amanibhavam-district-cluster-tfo",
    "coder-amanibhavam-district-cluster-traefik",
    "coder-amanibhavam-district-cluster-trust-manager",
    "coder-amanibhavam-district0-cluster-argo-cd",
    "coder-amanibhavam-district0-cluster-env",
    "coder-amanibhavam-district0-cluster-external-secrets",
    "coder-amanibhavam-district0-cluster-kyverno",
    "coder-amanibhavam-district0-cluster-postgres-operator",
    "coder-amanibhavam-district0-cluster-secrets",
    "coder-amanibhavam-district1-cluster-env",
    "coder-amanibhavam-district1-cluster-kyverno",
    "coder-amanibhavam-school-cluster-argo-cd",
    "coder-amanibhavam-school-cluster-cert-manager",
    "coder-amanibhavam-school-cluster-cilium",
    "coder-amanibhavam-school-cluster-coder",
    "coder-amanibhavam-school-cluster-descheduler",
    "coder-amanibhavam-school-cluster-env",
    "coder-amanibhavam-school-cluster-external-dns",
    "coder-amanibhavam-school-cluster-external-secrets",
    "coder-amanibhavam-school-cluster-issuer",
    "coder-amanibhavam-school-cluster-karpenter",
    "coder-amanibhavam-school-cluster-kyverno",
    "coder-amanibhavam-school-cluster-l5d-crds",
    "coder-amanibhavam-school-cluster-pod-identity",
    "coder-amanibhavam-school-cluster-postgres-operator",
    "coder-amanibhavam-school-cluster-reloader",
    "coder-amanibhavam-school-cluster-secrets",
    "coder-amanibhavam-school-cluster-spaceship",
    "coder-amanibhavam-school-cluster-tailscale",
    "coder-amanibhavam-school-cluster-tetragon",
    "coder-amanibhavam-school-cluster-traefik",
    "coder-amanibhavam-school-cluster-trust-manager",
]

clusters_apps_parent_list = [
    "-".join(k.split("-")[:3])
    for k in cluster_apps
]

clusters_apps_parent = {
    clusters_apps_parent_list[i]: 1
    for i in range(
        0,
        len(clusters_apps_parent_list),
    )
}

clusters = list(clusters_apps_parent.keys())

filegroup(
    name = "gen_kustomize_build_sh",
    srcs = ["gen_kustomize_build.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_cue_import_sh",
    srcs = ["gen_cue_import.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_deploy_yaml_sh",
    srcs = ["gen_deploy_yaml.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_helm_chart_sh",
    srcs = ["gen_helm_chart.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_push_helm_chart_sh",
    srcs = ["gen_push_helm_chart.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_deploy_crd_sh",
    srcs = ["gen_deploy_crd.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_image_digest_sh",
    srcs = ["gen_image_digest.sh"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "deploy_cue",
    srcs = glob(["*.cue"]),
    visibility = ["//visibility:public"],
)

[
    [
        genrule(
            name = "kustomize_build_{}".format(k),
            srcs = glob(
                ["{}/*.yaml".format(k)],
                exclude = [],
                exclude_directories = 1,
            ) + [
                "//c/{}:kustomize_bundle_tgz".format("-".join(k.split("-")[:3])),
            ],
            outs = ["{}-kustomized-build.yaml".format(k)],
            cmd = "$(location :gen_kustomize_build_sh) app={} bundle=$(location //c/{}:kustomize_bundle_tgz) $@".format(
                k,
                "-".join(k.split("-")[:3]),
            ),
            tools = [
                ":gen_kustomize_build_sh",
                "//b/lib:lib_sh",
            ],
        ),
        genrule(
            name = "cue_import_{}".format(k),
            srcs = [":kustomize_build_{}".format(k)],
            outs = ["{}.cue".format(k)],
            cmd = "$(location :gen_cue_import_sh) app=$(location :kustomize_build_{}) $@".format(k),
            tools = [
                ":gen_cue_import_sh",
                "//b/lib:lib_sh",
            ],
        ),
        genrule(
            name = "image_digest_{}".format(k),
            srcs = [
                ":cue_import_{}".format(k),
                ":deploy_cue",
                "//cue.mod:cue_mod",
                "//cue.mod/gen/k8s.io:k8s_io",
            ],
            outs = ["image_digest_{}.cue".format(k)],
            cmd = "$(location :gen_image_digest_sh) app=$(location :cue_import_{}) cue=$(location //pkg/cue:flake_cue) $@".format(k),
            tools = [
                ":gen_image_digest_sh",
                "//b/lib:lib_sh",
                "//pkg/cue:flake_cue",
            ],
        ),
        genrule(
            name = "deploy_yaml_{}".format(k),
            srcs = [
                ":cue_import_{}".format(k),
                ":image_digest_{}".format(k),
                ":deploy_cue",
                "//cue.mod:cue_mod",
                "//cue.mod/gen/k8s.io:k8s_io",
            ],
            outs = ["{}.yaml".format(k)],
            cmd = "$(location :gen_deploy_yaml_sh) cue=$(location //pkg/cue:flake_cue) $@ $(location :cue_import_{}) $(location :image_digest_{})".format(k, k),
            tools = [
                ":gen_deploy_yaml_sh",
                "//b/lib:lib_sh",
                "//pkg/cue:flake_cue",
            ],
        ),
        genrule(
            name = "helm_chart_{}".format(k),
            srcs = [
                ":deploy_yaml_{}".format(k),
            ],
            outs = ["{}-chart.tgz".format(k)],
            cmd = "$(location :gen_helm_chart_sh) app=$(location :deploy_yaml_{}) $@".format(k),
            tools = [
                ":gen_helm_chart_sh",
                "//b/lib:lib_sh",
            ],
        ),
        genrule(
            name = "push_helm_chart_{}".format(k),
            srcs = [
                ":helm_chart_{}".format(k),
            ],
            outs = ["{}-deploy-chart.tgz".format(k)],
            cmd = "$(location :gen_push_helm_chart_sh) app=$(location :helm_chart_{}) registry=cache.defn.run:5000/library/helm name={} $@".format(k, k),
            tools = [
                ":gen_push_helm_chart_sh",
                "//b/lib:lib_sh",
            ],
        ),
    ]
    for k in cluster_apps
]

[
    [
        genrule(
            name = "deploy_crd_{}".format(c),
            srcs = [
                "deploy_cue",
                "//cue.mod:cue_mod",
                "//cue.mod/gen/k8s.io:k8s_io",
            ] + [
                "cue_import_{}".format(k)
                for k in cluster_apps
                if k.startswith("{}-".format(c))
            ],
            outs = ["{}-crd.yaml".format(c)],
            cmd = "$(location gen_deploy_crd_sh) $@ {}".format(
                " ".join([
                    "$(location cue_import_{})".format(k)
                    for k in cluster_apps
                    if k.startswith("{}-".format(c))
                ]),
            ),
            tools = [
                "gen_deploy_crd_sh",
                "//b/lib:lib_sh",
            ],
        ),
    ]
    for c in clusters
]
