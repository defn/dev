#ManagedBy: cue

apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: default
spec:
  amiFamily: Custom
  amiSelector:
    karpenter.sh/discovery: k3d-dfd
  subnetSelector:
    karpenter.sh/discovery: k3d-dfd
  securityGroupSelector:
    karpenter.sh/discovery: k3d-dfd
  instanceProfile: coder-amanibhavam-dev
  blockDeviceMappings:
    - deviceName: /dev/sda1
      ebs:
        volumeSize: 40Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  userData: |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"
    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"
    #!/bin/bash

    set -efu

    cat | sudo -u ubuntu bash <<'EOF'
    cd
    source .bash_profile

    infra_name=dfd
    sudo $(which tailscale) up --auth-key "$(cd m/pkg/chamber && nix develop --command chamber -b secretsmanager read --quiet k3d-${infra_name} tailscale_authkey)"

    ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa <<<y >/dev/null 2>&1
    cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

    TOKEN="$(curl -sSL -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")"
    instance="$(curl -sSL -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)"
    az="$(curl -sSL -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/placement/availability-zone)"

    container_ip=$(/sbin/ifconfig ens5 | grep 'inet ' | awk '{print $2}')

    while true; do
    	ts_ip=$(tailscale ip -4 || true)
    	if test -n "${ts_ip}"; then break; fi
    	sleep 1
    done

    (cd m/pkg/k3sup && nix develop --command k3sup join --user ubuntu --server-host coder-amanibhavam-dev --server-user ubuntu --k3s-extra-args "--disable-cloud-controller --kubelet-arg cloud-provider=external --kubelet-arg provider-id=aws:///${az}/${instance} --node-ip ${container_ip} --node-external-ip ${ts_ip}")
    EOF

    # download forked k3d
    #curl -o /tmp/dfd -sSL \
    #	https://github.com/amanibhavam/bin/raw/main/k3d
    #chmod 755 /tmp/dfd

    # download chamber
    #curl -o /tmp/chamber -sSL \
    #	https://github.com/segmentio/chamber/releases/download/v2.13.3/chamber-v2.13.3-linux-amd64
    #chmod 755 /tmp/chamber

    # docker exec -ti k3d-dfd-server-0 cat /var/lib/rancher/k3s/server/agent-token
    #/tmp/dfd node create "$instance" --role agent --image quay.io/defn/dev:latest-k3d --cluster https://k3d-dfd-server-0:6443 \
    #	--k3s-arg "TAILSCALE_AUTHKEY=$(/tmp/chamber -b secretsmanager read --quiet k3d-dfd tailscale_authkey)=TAILSCALE_AUTHKEY" \
    #	--token K10a97e6cf4aa4ee65f80b2e65aeff5c5cac70e1f3005c4bdd6fcf2a2783a2ee82a::server:EDrQtPPokKDRkJNXfBKx

    --BOUNDARY
