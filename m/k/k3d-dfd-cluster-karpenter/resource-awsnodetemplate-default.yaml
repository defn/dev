#ManagedBy: cue

apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: default
spec:
  amiFamily: Custom
  amiSelector:
    karpenter.sh/discovery: k3d-dfd
  subnetSelector:
    karpenter.sh/discovery: k3d-dfd
  securityGroupSelector:
    karpenter.sh/discovery: k3d-dfd
  instanceProfile: coder-amanibhavam-dev
  blockDeviceMappings:
    - deviceName: /dev/sda1
      ebs:
        volumeSize: 40Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  userData: |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="BOUNDARY"
    --BOUNDARY
    Content-Type: text/x-shellscript; charset="us-ascii"
    #!/bin/bash

    set -efu

    TOKEN="$(curl -sSL -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")"
    instance="$(curl -sSL -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)"

    # docker	
    apt install -y docker.io
    docker pull quay.io/defn/dev:latest-k3d

    # download forked k3d
    curl -o /tmp/dfd -sSL \
    	https://github.com/amanibhavam/bin/raw/main/k3d
    chmod 755 /tmp/dfd

    # download chamber
    curl -o /tmp/chamber -sSL \
    	https://github.com/segmentio/chamber/releases/download/v2.13.3/chamber-v2.13.3-linux-amd64
    chmod 755 /tmp/chamber

    # docker exec -ti  k3d-dfd-server-0 cat /var/lib/rancher/k3s/server/agent-token
    /tmp/dfd node create "$instance" --role agent --image quay.io/defn/dev:latest-k3d --cluster https://100.78.243.106:6443 \
    	--k3s-arg "TAILSCALE_AUTHKEY=$(/tmp/chamber -b secretsmanager read --quiet k3d-dfd tailscale_authkey)=TAILSCALE_AUTHKEY" \
    	--token K10a5501ccdd507b442c851c11172bbc3f9f1ac46895c169153d448f6b9826d7978::server:poPkbSDCfsqXUPsJOTFl

    --BOUNDARY
