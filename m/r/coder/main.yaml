apiVersion: v1
kind: Namespace
metadata:
  name: coder
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: coder
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: coder
    app.kubernetes.io/part-of: coder
    app.kubernetes.io/version: 0.22.0
    helm.sh/chart: coder-0.22.0
  name: coder
  namespace: coder
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: coder-workspace-perms
  namespace: coder
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: coder
  namespace: coder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: coder-workspace-perms
subjects:
- kind: ServiceAccount
  name: coder
  namespace: coder
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: coder
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: coder
    app.kubernetes.io/part-of: coder
    app.kubernetes.io/version: 0.22.0
    helm.sh/chart: coder-0.22.0
  name: coder
  namespace: coder
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: coder
    app.kubernetes.io/name: coder
  sessionAffinity: ClientIP
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: coder
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: coder
    app.kubernetes.io/part-of: coder
    app.kubernetes.io/version: 0.22.0
    helm.sh/chart: coder-0.22.0
  name: coder
  namespace: coder
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: coder
      app.kubernetes.io/name: coder
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/instance: coder
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: coder
        app.kubernetes.io/part-of: coder
        app.kubernetes.io/version: 0.22.0
        helm.sh/chart: coder-0.22.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - coder
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: CODER_HTTP_ADDRESS
          value: 0.0.0.0:8080
        - name: CODER_PROMETHEUS_ADDRESS
          value: 0.0.0.0:2112
        - name: KUBE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CODER_DERP_SERVER_RELAY_URL
          value: http://$(KUBE_POD_IP):8080
        - name: CODER_ACCESS_URL
          valueFrom:
            secretKeyRef:
              key: CODER_ACCESS_URL
              name: coder
        image: ghcr.io/coder/coder:v0.22.0
        imagePullPolicy: IfNotPresent
        lifecycle: {}
        livenessProbe:
          httpGet:
            path: /api/v2/buildinfo
            port: http
            scheme: HTTP
        name: coder
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /api/v2/buildinfo
            port: http
            scheme: HTTP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts: []
      restartPolicy: Always
      serviceAccountName: coder
      terminationGracePeriodSeconds: 60
      volumes: []
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: coder
  namespace: coder
spec:
  dataFrom:
  - extract:
      key: dev/amanibhavam-global-coder
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore
    name: dev
  target:
    creationPolicy: Owner
    name: coder
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: coder.defn.run
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
  name: coder
  namespace: coder
spec:
  ingressClassName: traefik
  rules:
  - host: coder.defn.run
    http:
      paths:
      - backend:
          service:
            name: coder
            port:
              number: 80
        path: /
        pathType: Prefix
