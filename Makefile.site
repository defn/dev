include Makefile.common

init-site:
	@aws --profile meh sts get-caller-identity
	@pass hello

restart: # Restart everything
	git pull
	$(MAKE) restart-inner

restart-inner:
	k3d cluster stop $(k3d_name)
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	k3d cluster start $(k3d_name)
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

restart-docker: # Restart Docker Desktop
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	#$(MAKE) dummy-docker

restart-cluster: # Restart k3d
	-k3d cluster stop $(k3d_name)
	-k3d cluster start $(k3d_name)
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

recreate: # Recreate k3d (restarts Docker)
	-k3d cluster delete $(k3d_name)
	-docker rm -f ignore
	$(MAKE) restart-docker
	$(MAKE) cluster

recreate-cluster: # Recreate k3d
	-k3d cluster delete $(k3d_name)
	-docker rm -f ignore
	$(MAKE) cluster

recreate-pod: # Recreate pod
	kubectl delete pod/dev-0
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

stop: # Stop k3d
	k3d cluster stop $(k3d_name)

initial-amd initial-arm:
	git push
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then cd work/dev && git pull && $(MAKE) image-inner; else $(MAKE) image-inner; fi

image-amd image-arm:
	git push
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then cd work/dev && git pull && $(MAKE) $@-inner; else $(MAKE) $@-inner; fi

image-amd-inner:
	env PATH="$$HOME/bin/fake:$$PATH" earthly --remote-cache=$(cache)defn/cache:images $(push) +amd64 --repo=$(repo)

image-arm-inner:
	env PATH="$$HOME/bin/fake:$$PATH" earthly --remote-cache=$(cache)defn/cache:images $(push) +arm64 --repo=$(repo)

update-amd update-arm:
	git push
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then cd work/dev && git pull && $(MAKE) $@-inner; else $(MAKE) $@-inner; fi

update-amd-inner:
	env PATH="$$HOME/bin/fake:$$PATH" earthly --remote-cache=$(cache)defn/cache:updates $(push) +amd64-update --repo=$(repo)

update-arm-inner:
	env PATH="$$HOME/bin/fake:$$PATH" earthly --remote-cache=$(cache)defn/cache:updates $(push) +arm64-update --repo=$(repo)

push-amd:
	$(MAKE) update-amd repo=

push-arm:
	$(MAKE) update-arm repo=

shell:
	docker run --rm -ti $(repo)defn/dev bash -l

cert-vault:
	touch meh.json; chmod 0600 meh.json
	-k --context pod create -n traefik secret generic default-certificate --from-file=meh.json
	v write pki/issue/gyre.defn.dev common_name="remo-defn.tiger-mamba.ts.net" ip_sans="169.254.32.1" alt_names="hello.demo.svc.cluster.local" tl=120h -format=json | jq .data > meh.json
	k --context pod patch -n traefik secret default-certificate --type='json' -p='[{"op" : "replace" ,"path" : "/data/tls.key" ,"value" : "'$$(cat meh.json | jq -r '.private_key | @base64')'"}]'
	k --context pod patch -n traefik secret default-certificate --type='json' -p='[{"op" : "replace" ,"path" : "/data/tls.crt" ,"value" : "'$$(cat meh.json | jq -r '.certificate | @base64')'"}]'
	rm -f meh.json

provision-digital-ocean:
	@git remote rm origin
	@git remote add origin git@github.com:defn/dev
	@git fetch origin
	@git branch --set-upstream-to origin/main
	@sudo apt purge -y nano
	$(MAKE) cluster
	docker cp ~/.password-store/ k3d-$(k3d_name)-server-0:/mnt/work/password-store
