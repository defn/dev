include Makefile.common

init-site:
	cd .password-store && git pull
	@aws --profile meh sts get-caller-identity
	@pass hello

deploy-site:
	-k create ns vault
	-n vault delete secret vault-unseal
	n vault create secret generic vault-unseal --from-literal=VAULT_TOKEN="$$(env VAULT_TOKEN="$$(v token create -policy="autounseal-remo" -wrap-ttl=60 -format json | jq -r '.wrap_info.token')" v unwrap -format json | jq -r '.auth.client_token')"
	-n vault delete pod vault-0
	$(MAKE) cert

restart: # Restart everything
	git pull
	$(MAKE) restart-inner

restart-inner:
	k3d cluster stop $(k3d_name)
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	k3d cluster start $(k3d_name)
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

restart-docker: # Restart Docker Desktop
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	#$(MAKE) dummy-docker

restart-cluster: # Restart k3d
	-k3d cluster stop $(k3d_name)
	-k3d cluster start $(k3d_name)
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

recreate: # Recreate k3d (restarts Docker)
	-k3d cluster delete $(k3d_name)
	-docker rm -f ignore
	$(MAKE) restart-docker
	$(MAKE) cluster

recreate-cluster: # Recreate k3d
	-k3d cluster delete $(k3d_name)
	-docker rm -f ignore
	$(MAKE) cluster

recreate-pod: # Recreate pod
	kubectl delete pod/dev-0
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

stop: # Stop k3d
	k3d cluster stop $(k3d_name)

images:
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then git pull; git push; cd work/dev && git pull && $(MAKE) $@; else repo=$(repo); earthly --remote-cache=$(cache)defn/cache:updates-$@ --no-output $(push) +images --repo=$${repo:-quay.io/}; fi

amd arm:
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then git pull; git push; cd work/dev && git pull && $(MAKE) $@; else repo=$(repo) earthly --remote-cache=$(cache)defn/cache:updates-$@ --no-output $(push) +"$@" --repo=$${repo:-}; fi

shell:
	docker run --rm -ti $(repo)defn/dev bash -l

cert-ts:
	sudo chown ubuntu /var/lib/tailscale/certs
	sudo chown ubuntu /var/lib/tailscale/certs/k3d-*
	-k --context pod create -n traefik secret generic default-certificate \
		--from-file=tls.key=/var/lib/tailscale/certs/k3d-immanent.tiger-mamba.ts.net.key \
		--from-file=tls.crt=/var/lib/tailscale/certs/k3d-immanent.tiger-mamba.ts.net.crt

cert:
	-k --context pod create ns traefik
	touch meh.json; chmod 0600 meh.json
	-k --context pod create -n traefik secret generic default-certificate --from-file=meh.json
	v write pki/issue/gyre.defn.dev common_name="$(DEFN_DEV_HOST)" alt_names="hello.demo.svc.cluster.local,*.remocal.net" ip_sans="169.254.32.1" ttl=120h -format=json | jq .data > meh.json
	k --context pod patch -n traefik secret default-certificate --type='json' -p='[{"op" : "replace" ,"path" : "/data/tls.key" ,"value" : "'$$(cat meh.json | jq -r '.private_key | @base64')'"}]'
	k --context pod patch -n traefik secret default-certificate --type='json' -p='[{"op" : "replace" ,"path" : "/data/tls.crt" ,"value" : "'$$(cat meh.json | jq -r '.certificate | @base64')'"}]'
	rm -f meh.json

provision-digital-ocean:
	-git clone git@github.com:jojomomojo/password-store work/password-store
	sudo curl -sSL -o /usr/local/bin/k3d https://github.com/k3d-io/k3d/releases/download/v5.4.4/k3d-linux-amd64
	sudo chmod 755 /usr/local/bin/k3d
	make cluster

