dev:
	@if flock -n ~/.home.lock -c '~/bin/e $(MAKE) init'; then true; fi

dev_inner:
	@while true; do if ~/bin/e $(MAKE) live 2>/dev/null >/dev/null; then ~/bin/e $(MAKE) up; fi; echo "$$(date) zzz"; sleep 5 ; done

init:
	sudo chown ubuntu:ubuntu /var/run/docker.sock work
	cd .password-store && git crypt unlock
	pass hello
	-git clone git@github.com:defn/dev work/dev
	$(MAKE) kubeconfig
	argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl -n argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')"
	argocd app create argocd --repo https://github.com/defn/dev --path k/argocd --dest-namespace argocd --dest-server https://kubernetes.default.svc --directory-recurse --validate=false
	argocd app create dev --repo https://github.com/defn/dev --path k/dev --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse --validate=false
	argocd app create wip --repo https://github.com/defn/dev --path k/wip --dest-namespace default --dest-server https://kubernetes.default.svc --directory-recurse --validate=false
	tilt up --context pod

asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

clean:
	docker images | grep none | awk '{print $$3}' | runmany 'docker rmi $$1'
	-docker system prune -f

prune:
	-$(MAKE) clean
	earthly prune --all
	$(MAKE) clean

images:
	earthly --push +images

updates:
	earthly --push +updates

amd64-update:
	earthly --push +amd64-update
	docker tag defn/dev:latest localhost:5555/defn/dev:latest
	docker push localhost:5555/defn/dev:latest

shell:
	docker run --rm -ti defn/dev bash -l

attach:
	code --folder-uri vscode-remote://k8s-container+context=k3d-k3s-default+namespace=default+podname=dev-0+name=dev+/home/ubuntu

registry:
	-k3d registry create --port 0.0.0.0:5555
	docker pull defn/dev
	docker tag defn/dev localhost:5555/defn/dev
	docker push localhost:5555/defn/dev

k3d:
	-k3d cluster delete
	k3d cluster create --config k3d.yaml \
		--no-lb \
		--k3s-arg "--disable=servicelb" \
		--k3s-arg "--disable=traefik" \
		--k3s-arg "--disable-network-policy" \
		--k3s-arg "--flannel-backend=none"
	curl -sSL -o bash https://github.com/robxu9/bash-static/releases/download/5.1.016-1.2.3/bash-linux-x86_64
	chmod 755 bash
	docker cp bash k3d-k3s-default-server-0:/bin/bash
	rm -f bash
	helm repo add cilium https://helm.cilium.io/
	helm repo update
	helm install cilium cilium/cilium --version 1.11.5 \
		--namespace kube-system \
		--set kubeProxyReplacement=partial \
		--set hostServices.enabled=false \
		--set externalIPs.enabled=true \
		--set nodePort.enabled=true \
		--set hostPort.enabled=true \
		--set bpf.masquerade=false \
		--set image.pullPolicy=IfNotPresent \
		--set ipam.mode=kubernetes \
		--set operator.replicas=1 \
		--set hubble.relay.enabled=true \
		--set hubble.ui.enabled=true
	docker exec k3d-k3s-default-server-0 mount bpffs /sys/fs/bpf -t bpf
	while true; do if docker exec k3d-k3s-default-server-0 mount --make-shared /sys/fs/bpf; then break; fi; sleep 1; done
	while true; do if docker exec k3d-k3s-default-server-0 mount --make-shared /run/cilium/cgroupv2; then break; fi; sleep 1; done
	kubectl -n kube-system rollout status deployment cilium-operator --watch
	kubectl -n kube-system rollout status deployment hubble-relay --watch
	kubectl -n kube-system rollout status deployment hubble-ui --watch
	kubectl -n kube-system rollout status daemonset cilium --watch
	kubectl apply -f k/dev/main.yaml
	$(MAKE) argocd
	kubectl rollout status statefulset dev --watch

kubeconfig:
	sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	kubectl config set-cluster pod --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials pod --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context pod --cluster=pod --user=pod
	skaffold config set --kube-context pod local-cluster true
	kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context argocd --cluster=pod --user=argocd --namespace argocd
	kubectl config use-context pod

argocd: k/argocd/main.yaml
	-kubectl create namespace argocd
	kubectl apply -n argocd -f k/argocd/main.yaml

k/argocd/main.yaml:
	curl -sSL -o $@ https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.0/manifests/install.yaml

up:
	chmod 700 ~/.gnupg ~/.ssh
	sudo chown ubuntu /var/run/docker.sock || true
	if ! docker info; then (cd fly && $(MAKE) login); exec ~/bin/e tilt up; else exec tail -f /dev/null; fi

down:
	-bash -c 'rm -vf "$${SSH_AUTH_SOCK}"'
	-cd ~/.password-store && sudo -u ubuntu git-crypt lock
	-echo yes | gh auth logout --hostname github.com
	-pkill [t]ilt
	-docker pause k3d-k3s-default-server-0

live:
	@env SSH_AUTH_SOCK="$(shell ls -td /tmp/vscode-ssh-auth-* 2>/dev/null | head -1)" ssh-add -L 2>/dev/null >/dev/null

monitor-loop:
	while true; do $(MAKE) monitor; sleep 30; done

monitor:
	@rm -f ~/.dead; \
		if ! $(MAKE) live 2>/dev/null >/dev/null; then \
			touch ~/.dead; \
			for a in $$(seq 1 60); do \
				if $(MAKE) live 2>/dev/null >/dev/null; then rm -f ~/.dead; break; fi; \
				echo "MAYBE DEAD $$a $$(date)"; sleep 5; done; \
		fi; \
		if test -f ~/.dead; then \
			~/bin/e $(MAKE) down; \
		fi; \
		ls -l ~/.alive || true; \
		if test -f ~/.alive && test "$$(find ~/.alive -mmin +30)"; then \
			~/bin/e $(MAKE) down; \
		fi

trigger:
	while true; do ~/bin/e $(MAKE) trigger-devcontainer; sleep 5; done

trigger-devcontainer:
        socat \
                TCP-LISTEN:2222,reuseaddr,fork,max-children=4 \
                EXEC:"'bash -c \"(flyctl scale --app defn count 1) 1>/dev/null 2>&1; socat - TCP:defn:22\"'",nofork
