repo ?=
cache ?=
push ?= --push
workdir ?= /home/ubuntu
tilt_port ?= 10350
name ?= $(shell uname -n | cut -d. -f1 | tr A-Z a-z | perl -pe 's{-\d+$$}{}')
k3d_name ?= $(name)
context ?= k3d-$(name)
podname ?= $(name)-0
control ?= $(shell echo $(name) | sed s/-0//)
domain ?= tiger-mamba.ts.net
image ?= defn.dev/defn/k3d

dummy_ip ?= 169.254.32.1

trust-ca:
	sudo security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db etc/ca.crt

macos:
	for ip in $(dummy_ip); do if ! ifconfig lo0 | grep "inet $$ip"; then sudo ifconfig lo0 alias "$$ip" netmask 255.255.255.255; fi; done;
	ifconfig lo0
	defaults write -g ApplePressAndHoldEnabled -bool false

unlock:
	cd ~/.password-store && git crypt unlock
	pass hello
	$(MAKE) vault-unseal

dev:
	@true

dev-meh:
	@if [[ ! -d work/password-store ]]; then if flock -n ~/.home.lock -c '~/bin/e $(MAKE) init'; then true; fi; fi

init:
	$(MAKE) init-inner
	$(MAKE) init-site

init-inner:
	if ! test -d work/.; then if test -d /work; then ln -nfs /work .; else mkdir -p work; fi; fi
	-git clone https://github.com/defn/dev work/dev
	-git clone https://github.com/jojomomojo/password-store work/password-store
	-cd work/password-store && git crypt unlock && git pull
	$(MAKE) vault-unseal
	$(MAKE) kubeconfig
	-sudo chgrp docker /var/run/docker.sock
	-sudo chmod 770 /var/run/docker.sock
	chmod 0700 ~/.gnupg/. ~/.gnupg2/.

deploy:
	if kubectl --context pod create namespace argocd; then $(MAKE) init-argocd; fi
	argocd cluster add k3d-$(control) --yes --upsert
	$(MAKE) init-sets
	argocd app sync k3d-$(control)-argocd
	$(MAKE) deploy-site

init-argocd:
	kustomize build --enable-helm k/argocd | kubectl --context argocd apply -f -
	kubectl --context argocd rollout status deployment argocd-server --watch
	sleep 10; $(MAKE) argocd-login

init-sets:
	cd "$${DEFN_DEV_WORKDIR:-$${HOME}}" && kubectl --context argocd apply -f e/k3d-$(control).yaml
	argocd app sync k3d-$(control)
	argocd app list

tilt:
	env tilt up --context pod --port $(tilt_port)

logout:
	-echo yes | gh auth logout --hostname github.com
	-argocd logout argocd-server.argocd.svc
	cd .password-store && git checkout vault && git clean -fd vault && (git crypt lock || true)
	-echo RELOADAGENT | gpg-connect-agent

login:
	chmod 700 ~/.password-store/home/.gnupg ~/.gnupg
	rsync -ia ~/.password-store/home/.gnupg/. ~/.gnupg/.
	chmod 700 ~/.password-store/home/.gnupg ~/.gnupg
	cd ~/.password-store && git pull
	$(MAKE) git-crypt-unlock
	$(MAKE) vault-unseal
	if ! gh auth status; then $(MAKE) github-login; fi
	$(MAKE) kubeconfig
	$(MAKE) argocd-login

github-login:
	gh auth login -p https -h github.com -w

argocd-login:
	argocd login --insecure argocd-server.argocd.svc --username admin --password adminadmin \
		|| (argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')" \
				&& argocd account update-password --new-password adminadmin --current-password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')")

gpg:
	if test -d /work; then ln -nfs /work .; fi
	if test -d /mnt/lost+found; then sudo install -d -m 0700 -o ubuntu -g ubuntu /mnt/work; ln -nfs /mnt/work .; fi
	-git clone https://github.com/jojomomojo/password-store work/password-store
	rsync -ia .password-store/home/.gnupg/. .gnupg/.
	chmod 700 .gnupg
	-gpg-agent --daemon
	gpg --import .password-store/keys/EBE020A544E04B9C67215280B8B6F42683E6CCEF/private.gpg
	$(MAKE) git-crypt-unlock

git-crypt-unlock:
	cd ~/.password-store && if ! git crypt unlock; then \
		gpg -d .git-crypt-key > key; \
		git crypt unlock key; \
		rm -f key; \
		fi

kubeconfig:
	sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo cp ~/etc/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	kubectl config set-cluster pod --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials pod --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context pod --cluster=pod --user=pod
	kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context argocd --cluster=pod --user=argocd --namespace argocd
	kubectl config use-context pod
	skaffold config set --kube-context pod local-cluster true
	#kumactl config control-planes add --overwrite --name pod --address http://kuma-control-plane-x-kuma-x-vc0.vc0.svc:5681
	if vcluster connect vcluster --kube-config ~/.kube/vcluster --kube-config-context-name vcluster --update-current=false --server vcluster.vcluster.svc.cluster.local; then \
		env KUBECONFIG=~/.kube/config:~/.kube/vcluster kubectl config view --flatten > ~/.kube/config.1; \
		mv ~/.kube/config.1 ~/.kube/config; \
		$(MAKE) argocd-login; \
		argocd cluster add vcluster --yes; \
		fi
	chmod 0600 ~/.kube/config
	-k3d kubeconfig merge -a -d
	-kubectl config set-cluster $(context) --server=https://$(context).$(domain):6443
	k config get-contexts

asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

gh:
	for a in $$(grep curl Earthfile | grep github.com | perl -pe 's{.*github.com/}{}; s{(.*?/.*?)/.*}{$$1}' | sort); do gh release list --repo "$$a" --exclude-drafts | cat | perl -pe 's{[ \t]+}{ }g' | awk '{print $$1,$$(NF-1)}' | sort | sed "s#^#$$a #"; done > .tool-versions-gh

attach:
	code --folder-uri vscode-remote://k8s-container+context=$(context)+namespace=default+podname=$(podname)+name=dev+$(workdir)

attach-remo:
	code --folder-uri vscode-remote://k8s-container+context=remo+namespace=default+podname=dev-0+name=dev+$(workdir)

join:
	cd d/k3d && $(MAKE) build name=$(context)
	@env DEFN_DEV_HOST=${context}.${domain} DEFN_DEV_IP="$$(host ${context}.${domain} | grep 'has address' | awk '{print $$NF}')" $(MAKE) $@-inner join="$$(kubectl config view -o jsonpath='{.clusters[?(@.name == "$(to)")].cluster.server}')" token="$(shell docker exec $(to)-server-0 cat /var/lib/rancher/k3s/server/node-token)" name=$(name)

cluster:
	cd d/k3d && $(MAKE) build name=$(context)
	@$(MAKE) $@-inner name=$(name)

join-inner:
	-k3d cluster delete "$(join)"
	-k3d node create $(name) --role agent --image $(image) --token "$(token)" --cluster "$(join)"

cluster-inner:
	-k3d cluster delete $(name)
	if [[ -x "$$(type -P tailscale)" ]]; then if tailscale ip 2>&1 | grep NeedsLogin; then sudo tailscale up; fi; fi
	k3d cluster create $(name) --config k3d.yaml --k3s-node-label env=$(name)@server:0 \
		-p    "80:8000@server:0" \
		-p   "443:8443@server:0"
	docker update --restart=no $(context)-server-0
	docker exec $(context)-server-0 touch /etc/passwd
	-cd tf/$(name) && make init plan apply

vault-unseal:
	pass Unseal_Key_1 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_3 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_5 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal

vault-seal:
	-env VAULT_TOKEN="$$(pass Initial_Root_Token)" VAULT_ADDR=http://localhost:8200 vault operator seal
	rm -f ~/.vault-token

vault-backup:
	-$(MAKE) vault-seal
	cd .password-store && git pull && git add vault && git add -u vault && (git commit -m 'vault backup' || true) && git push
	cd .password-store && git status -sb

live:
	@env SSH_AUTH_SOCK="$(shell ls -td /tmp/vscode-ssh-auth-* 2>/dev/null | head -1)" ssh-add -L 2>/dev/null >/dev/null

monitor-loop:
	while true; do $(MAKE) monitor; sleep 60; done

monitor:
	if test -f ~/.local/share/code-server/heartbeat && test "$$(find ~/.local/share/code-server/heartbeat -mmin +120)"; then \
		~/bin/e $(MAKE) logout; \
	fi
