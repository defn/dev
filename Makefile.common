repo ?=
cache ?=
push ?= --push
tilt_port ?= 7999
name ?= $(shell uname -n | cut -d. -f1 | tr A-Z a-z | perl -pe 's{-\d$$}{}')
k3d_name ?= $(name)
context ?= k3d-$(name)
podname ?= $(name)-0
control ?= $(shell echo $(name) | sed s/-0//)
domain ?= $(shell tailscale cert 2>&1 | grep 'For domain' | cut -d'"' -f2 | cut -d. -f2-)
app ?= $(shell pwd)/app
node ?= k3d-control-server-0
n ?=
k ?=
p ?= glibcLocales irssi k9s difftastic powerline-go grpcurl figlet lolcat htop screen jo vim entr wireguard-tools gron fzf jq git less wget rsync curl unzip pass socat terraform nomad vault packer shfmt shellcheck oras kn docker man groff aws-vault netcat-openbsd xdg-utils xz bind gnumake gnupg gpg-agent google-cloud-sdk awscli2
r ?= bash

dummy_ip ?= 169.254.32.1

DEFN_DEV_HOST      ?= "k3d-$(name).${domain}"
DEFN_DEV_HOST_API  ?= "$${DEFN_DEV_HOST_API:-127.0.0.1}"
DEFN_DEV_HOST_PORT ?= "$${DEFN_DEV_HOST_PORT:-6443}"

first = $(word 1, $(subst -, ,$@))
second = $(word 2, $(subst -, ,$@))
first_ = $(word 1, $(subst _, ,$@))
second_ = $(word 2, $(subst _, ,$@))

trust-ca:
	sudo security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db etc/ca.crt

macos:
	-gpg-agent --daemon
	for ip in $(dummy_ip); do if ! ifconfig lo0 | grep "inet $$ip"; then sudo ifconfig lo0 alias "$$ip" netmask 255.255.255.255; fi; done;
	ifconfig lo0
	defaults write -g ApplePressAndHoldEnabled -bool false
	-$(MAKE) registry
	-docker context create host --docker host=unix:///var/run/docker.sock

symlinks:
	mark -- configure symlinks
	sudo install -d -m 0700 -o ubuntu -g ubuntu /work
	ln -nfs /work ~
	ln -nfs work/app ~

perms:
	mark -- configure permissions
	if test -S /var/run/docker.sock; then sudo chgrp ubuntu /var/run/docker.sock; sudo chmod 770 /var/run/docker.sock; fi
	if test -S /run/containerd/containerd.sock; then sudo chgrp ubuntu /run/containerd/containerd.sock; sudo chmod 770 /run/containerd/containerd.sock; fi
	-chmod 0700 ~/.gnupg/. ~/.gnupg2/. ~/.password-store/home/.gnupg
	-if ! test -f ~/.kube/config; then touch ~/.kube/config; fi
	-chmod 0600 ~/.kube/config

build:
	$(MAKE) build-site

install:
	$(MAKE) nix
	cd && . /home/ubuntu/.nix-profile/etc/profile.d/nix.sh && $(MAKE) install-inner

install-inner:
	$(MAKE) symlinks perms

	mark -- configure password-store, gpg
	mkdir -p ~/work/password-store

	if ! is-fly; then \
	if [[ ! -d ~/.password-store/.git ]]; then \
		cd ~/.password-store \
			&& rm -rf .git \
			&& oras pull --plain-http --allow-path-traversal 169.254.32.1:5000/defn/bootstrap:password-store \
			&& git reset --hard \
			&& git clean -fd; \
		fi; \
	fi

	rsync -ia ~/.password-store/home/.gnupg/. ~/.gnupg/.
	$(MAKE) perms
	env GPG_TTY=$$(tty) $(MAKE) init-gpg

	docker context create host --docker host=unix:///var/run/docker.sock || true \
        && docker context create pod --docker host=tcp://localhost:2375 || true \
        && docker context create so --docker host=tcp://docker-so.mesh:80 || true \
        && docker context create the --docker host=tcp://docker-the.mesh:80 || true \
        && docker context create brie --docker host=tcp://docker-brie.mesh:80 || true \
        && docker context use host

	mark -- configure repos

	if ! is-fly; then \
	if [[ ! -d ~/app/.git ]]; then \
		mkdir -p ~/work/app \
		&& cd ~/work/app \
		&& rm -rf .git \
		&& oras pull --plain-http --allow-path-traversal 169.254.32.1:5000/defn/bootstrap:app \
		&& git fetch && git reset --hard origin/master; \
		fi; \
	fi

	if nc -z -v localhost 8200 2>/dev/null; then \
		$(MAKE) vault-unseal; \
		fi

	$(MAKE) login

	@env VAULT_ADDR="http://localhost:8200" VAULT_TOKEN="$$(pass Initial_Root_Token)" $(MAKE) manage

	mark -- configure site
	$(MAKE) install-site
	if ! is-fly; then if ! nc -z -v localhost 7999 2>/dev/null; then $(MAKE) up; fi; fi

tilt up:
	pass hello
	tilt up --context k3d-control --port $(tilt_port) --host 127.0.0.1 --stream

down:
	kuma-tp-off
	tilt down --context k3d-control
	sudo pkill kuma-dp

logout:
	-echo yes | gh auth logout --hostname github.com
	-argocd logout argocd-server.argocd.svc
	-echo RELOADAGENT | gpg-connect-agent

login:
	mark -- configure kubeconfig, argocd
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then $(MAKE) kubeconfig; $(MAKE) argocd-login || true; fi

	$(MAKE) login-site

manage:
	mark -- manage clusters

	for a in $$(env DOCKER_CONTEXT=host k3d cluster list | tail -n +2 | awk '{print $$1}'); do \
		argocd cluster add -y --upsert "k3d-$$a"; \
		control apply -f "app/e/k3d-$$a.yaml"; \
		if nc -z -v localhost 8200 2>/dev/null; then \
			env VAULT_ADDR="http://localhost:8200" VAULT_TOKEN="$$(pass Initial_Root_Token)" $(MAKE) vault-trust "k=k3d-$$a"; \
			"$$a" rollout restart deployment -n external-secrets external-secrets 2>/dev/null || true; \
			fi; \
		done

	$(MAKE) manage-site

github-login:
	if ! gh auth status; then echo Y | gh auth login -p https -h github.com -w; fi

argocd-login:
	if control get ns argocd 2>/dev/null; then \
	if ! argocd app list 2>/dev/null >/dev/null; then \
		argocd login --insecure argocd-server.argocd.svc --username admin --password adminadmin 2>/dev/null \
			|| (argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')" \
					&& argocd account update-password --new-password adminadmin --current-password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')"); \
		fi; fi

git-crypt-unlock:
	cd ~/.password-store && if ! git crypt unlock; then \
		gpg -d .git-crypt-key > key; \
		git crypt unlock key; \
		rm -f key; \
		fi

kubeconfig:
	-sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo cp ~/etc/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then \
		kubectl config set-cluster k3d-control --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
		kubectl config set-credentials k3d-control --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"; \
		kubectl config set-context k3d-control --cluster=k3d-control --user=k3d-control; \
		if control get ns argocd; then \
			kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
			kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"; \
			kubectl config set-context argocd --cluster=k3d-control --user=argocd --namespace argocd; \
			fi; \
		fi
	touch ~/.kube/config
	$(MAKE) perms
	if docker --context=host ps 2>/dev/null; then env DOCKER_CONTEXT=host k3d kubeconfig merge -d $$(k3d cluster list --no-headers | grep -v ^control | awk '{print $$1}'); fi
	-kubectl config use-context k3d-control
	k config get-contexts

pending: # Generate pending version updates
	$(MAKE) pending-gh
	$(MAKE) pending-asdf

pending-images:
	(control get pods --all-namespaces -o json | gron | grep '\.image ='  | cut -d'"' -f2 | grep -v 169.2543.32.1:5000/ | grep -v /defn/dev: | grep -v /workspace:latest) | sed 's#@.*##' | grep -v ^sha256 | sort -u > .image-versions.txt

sync: # Sync all the artifacts
	$(MAKE) pull-repos
	-$(MAKE) registry
	$(MAKE) sync-images

sync-images: # Sync images to local cache
	cat .image-versions.txt | bin/runmany 4 'skopeo copy docker://$$1 docker://127.0.0.1:5000/$${1#*/} --multi-arch all --dest-tls-verify=false'

pending-asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

pending-gh:
	$(MAKE) github-login
	for a in $$(grep curl Earthfile | grep github.com | perl -pe 's{.*github.com/}{}; s{(.*?/.*?)/.*}{$$1}' | sort); do gh release list --repo "$$a" --exclude-drafts | cat | perl -pe 's{[ \t]+}{ }g' | awk '{print $$1,$$(NF-1)}' | sort | sed "s#^#$$a #"; done > .tool-versions-gh

cluster:
	cd d/k3d && $(MAKE) build name=$(context) app=$(app)
	@$(MAKE) $@-inner name=$(name)

cluster-inner:
	-k3d cluster delete $(name)
	@k3d cluster create $(name) \
		--k3s-node-label env=$(name)@server:0 \
		--config etc/k3d.yaml \
		--registry-config etc/registries.yaml $(DEFN_DEV_HOST_PORTMAPS) \
		--env bar=baz@server:0
	docker --context=host update --restart=no $(context)-server-0
	-cd $(app)/tf/$(name) && make init get plan apply

vault-unseal:
	pass Unseal_Key_1 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_3 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_5 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal

vault-seal:
	-env VAULT_TOKEN="$$(pass Initial_Root_Token)" VAULT_ADDR=http://localhost:8200 vault operator seal
	rm -f ~/.vault-token
	cd ~/.password-store && git add vault && git add -u vault && git stash

vault-backup:
	$(MAKE) vault-seal
	cd .password-store && git stash apply && git add vault && git add -u vault && git commit -m "backup vault"
	cd .password-store && git push && git status -sb
	$(MAKE) vault-unseal

vault-trust:
	#-vault auth enable -path "$(k)" kubernetes

	vault write "auth/$(k)/config" \
		kubernetes_host="$$(kubectl config view -o jsonpath='{.clusters[?(@.name == "$(k)")]}' --raw | jq -r '.cluster.server')" \
		kubernetes_ca_cert=@<(kubectl config view -o jsonpath='{.clusters[?(@.name == "$(k)")]}' --raw | jq -r '.cluster["certificate-authority-data"] | @base64d') \
		disable_local_ca_jwt=true

	vault write "auth/$(k)/role/dev" \
		bound_service_account_names=default \
		bound_service_account_namespaces=default \
		policies=dev ttl=1h

	vault write "auth/$(k)/role/external-secrets" \
		bound_service_account_names=external-secrets \
		bound_service_account_namespaces=external-secrets \
		policies=external-secrets ttl=1h

vault-shell:
	@env VAULT_ADDR="http://localhost:8200" VAULT_TOKEN="$$(pass Initial_Root_Token)" bash

vault-test:
	@"$(context)" exec -ti -c code-server $(pod) -- bash -c 'env VAULT_ADDR=http://$(tailscale ip -4):8200 ~/bin/e vault write -field=token "auth/$(k)/login" role=default jwt=$$(cat /run/secrets/kubernetes.io/serviceaccount/token)'

vault-login:
	@vault login token="$$(vault write -field=token "auth/k3d-control/login" role=default jwt=$$(cat /run/secrets/kubernetes.io/serviceaccount/token))"

rebuild:
	$(MAKE) build
	ctr -n k8s.io i pull --plain-http ghcr.io/defn/dev:latest
	ctr -n k8s.io i pull --plain-http 169.254.32.1:5000/workspace:latest

shell:
	docker run --rm -ti $(repo)defn/dev bash -l

debug-host:
	control debug "node/$$(control get nodes --no-headers | awk '{print $$1}' | fzf)" --image ghcr.io/defn/dev -it -- bash

debug:
	control debug -n "$(n)" "$(pod)" --image ghcr.io/defn/dev -it -- bash

this:
	rm -rf tmp
	mkdir tmp
	mkdir -p tmp/$(name)/var/lib/tailscale
	mkdir -p tmp/$(name)/var/lib/tailscale/pod
	mkdir -p tmp/$(name)/var/lib/rancher/k3s/server/tls
	(cd tmp/$(name) && pass tailscale_k3d-$(name) | base64 -d | tar xvf -)
	(cd tmp/$(name)/var/lib/tailscale/pod && pass tailscale_$(name)-0 | base64 -d | tar xvf -)
	for a in sa-signer.key sa-signer.key.pub sa-signer-pkcs8.pub; do (cd tmp/$(name)/var/lib/rancher/k3s/server/tls && pass piw-$(name)-$$a | base64 -d > $$a); done
	env DEFN_DEV_ARCHIVE="$$(cd tmp/$(name) && tar cvf - . | base64 | xargs | sed 's# ##g')" \
		$(MAKE) cluster name=$(name)
	if test -z "$(DEFN_DEV_MACOS)"; then \
		env VAULT_ADDR="http://localhost:8200" VAULT_TOKEN="$$(pass Initial_Root_Token)" $(MAKE) vault-trust k=k3d-$(name); \
		argocd cluster add --yes --upsert k3d-$(name); \
		control apply -f $(app)/e/k3d-$(name).yaml; \
		app sync k3d-$(name); \
	else \
		(cd ~/.password-store && oras push localhost:5000/defn/bootstrap:password-store .git:+tar); \
		(cd app && oras push localhost:5000/defn/bootstrap:app .git:+tar); \
		kubectl --context k3d-$(name) rollout -n default status statefulset $(name) --watch; \
		fi

registry:
	-k3d registry create registry --port 0.0.0.0:5000
	#control apply -f etc/local-registry-hosting.yaml

pull-repos: # Pull dev, app, home, and password-store repos
	git pull
	cd && git pull
	cd app && git pull
	cd && cd .password-store && git pull

global: # Provision global from control plane
	env DEFN_DEV_HOST_PORT=6444 DEFN_DEV_HOST_API=host.k3d.internal \
		DEFN_DEV_NAME=k3d-$@ \
		DOCKER_CONTEXT=host \
		$(MAKE) this name=$@

smiley: # Provision smiley from control plane
	env DEFN_DEV_HOST_PORT=6445 DEFN_DEV_HOST_API=host.k3d.internal \
		DEFN_DEV_NAME=k3d-$@ \
		DOCKER_CONTEXT=host \
		$(MAKE) this name=$@

control: # Provision control plane
	$(MAKE) pull-repos
	$(MAKE) build
	env DEFN_DEV_HOST_PORT=6443 DEFN_DEV_HOST_API=127.0.0.1 \
		DEFN_DEV_NAME=k3d-$@ \
		DEFN_DEV_MACOS=1 \
		DEFN_DEV_HOST_PORTMAPS="-p 443:443@server:0 -p 80:80@server:0 -p 8085:18085@server:0" \
		PATH="$$PATH:$(shell pwd)/bin" \
		$(MAKE) this name=$@
	docker --context=host system prune -f

vc%:
	$(MAKE) control-$@

control-%:
	$(MAKE) ec2
	kustomize build --enable-helm ~/app/k/$@ | $(first) apply -f -
	while ! $(first) -n $@ get secrets vc-vcluster >/dev/null; do sleep 10; done
	$(MAKE) connect_$@
	while ! $@ get -n kube-system pods >/dev/null; do sleep 1; done
	argocd cluster add vcluster-$@ --yes --upsert
	$(first) apply -f app/e/vcluster-$@.yaml

connect_%:
	$(shell echo $(second_) | cut -d- -f1) -n $(second_) get secrets vc-vcluster -o json | jq -r '.data.config | @base64d' | yq '.clusters[].cluster.server |= "https://vcluster.$(second_).svc.cluster.local" | del(.["current-context"])' -y | sed 's#my-vcluster#vcluster-$(second_)#' > ~/.kube/$(second_)
	env KUBECONFIG=~/.kube/$(second_):~/.kube/config kubectl config view --flatten > ~/.kube/config.$(second_)
	mv ~/.kube/config.$(second_) ~/.kube/config

ec2:
	pass hello
	@cat etc/ec2-user-data.template \
		| sed 's#_CONTROLIP_#'$$(host k3d-control.$$(wait-tailscale-domain | cut -d. -f2-) | awk '{print $$NF}')'#' \
		| sed 's#_TSKEY_#'$$(pass k3d-control-tskey)'#' \
		| sed 's#_K3STOKEN_#'$$(docker --context host exec k3d-control-server-0 cat /var/lib/rancher/k3s/server/node-token)'#' \
		| control apply -f -

debug-node:
	control debug node/$(node) -it --image=ghcr.io/defn/dev:latest -- bash -il

debug-docker:
	docker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i

nix-bootstrap:
	sh <(curl -L https://nixos.org/nix/install) --no-daemon --no-modify-profile

nix-install:
	for a in $(p); do n profile install "nixpkgs#$$a"; done

# make nix-shell p="..." r="..."
nix-shell:
	env LC_ALL=C.UTF-8 nix-shell -p $(p) --run "$(r)"

nix-build:
	@docker run -t "$$(docker load -q < $$(nix-build --out-link /tmp/results) | awk '{print $$3}')"
	@rm -f /tmp/results

nix-gc:
	nix-store --gc

nix:
	export LC_ALL=C.UTF-8 && if ! test -x /home/ubuntu/.nix-profile/bin/nix; then $(MAKE) nix-bootstrap; fi
	export LC_ALL=C.UTF-8 && . /home/ubuntu/.nix-profile/etc/profile.d/nix.sh && $(MAKE) nix-install
