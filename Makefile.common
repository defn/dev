repo ?=
cache ?=
push ?= --push
workdir ?= /home/ubuntu
tilt_port ?= 10350
k3d_name ?= $(shell uname -n | cut -d. -f1)
context ?= k3d-$(k3d_name)
podname ?= $(k3d_name)-0
control ?= $(shell uname -n | sed s/-0//)

trust-ca:
	sudo security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db etc/ca.crt

unlock:
	cd ~/.password-store && git crypt unlock
	pass hello
	$(MAKE) vault-unseal

dev:
	@true

dev-meh:
	@if [[ ! -d work/password-store ]]; then if flock -n ~/.home.lock -c '~/bin/e $(MAKE) init'; then true; fi; fi

init:
	-git pull
	$(MAKE) init-inner
	$(MAKE) init-site

init-inner:
	-git clone git@github.com:defn/dev work/dev
	-git clone git@github.com:jojomomojo/password-store work/password-store
	-cd work/password-store && git crypt unlock && git pull
	$(MAKE) vault-unseal
	$(MAKE) kubeconfig
	$(MAKE) cert

	if kubectl --context pod create namespace argocd; then $(MAKE) init-argocd; fi

	$(MAKE) deploy

init-argocd:
	kustomize build --enable-helm k/argocd | kubectl --context argocd apply -f -
	kubectl --context argocd rollout status deployment argocd-server --watch
	sleep 10; $(MAKE) argocd-login

deploy:
	kubectl --context argocd apply -f e/$(control).yaml
	argocd app list

tilt:
	$(MAKE) init
	env tilt up --context pod --port $(tilt_port)

login:
	$(MAKE) argocd-login

argocd-login:
	argocd login --insecure argocd-server.argocd.svc --username admin --password adminadmin \
		|| (argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')" \
				&& argocd account update-password --new-password adminadmin --current-password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')")

kubeconfig:
	sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo cp ~/etc/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	kubectl config set-cluster pod --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials pod --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context pod --cluster=pod --user=pod
	kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context argocd --cluster=pod --user=argocd --namespace argocd
	kubectl config use-context pod
	skaffold config set --kube-context pod local-cluster true
	#kumactl config control-planes add --overwrite --name pod --address http://kuma-control-plane-x-kuma-x-vc0.vc0.svc:5681

asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

attach:
	code --folder-uri vscode-remote://k8s-container+context=$(context)+namespace=default+podname=$(podname)+name=dev+$(workdir)
	-kubectl get events -w

attach-remo:
	code --folder-uri vscode-remote://k8s-container+context=remo+namespace=default+podname=dev-0+name=dev+$(workdir)

cluster:
	git pull
	$(MAKE) cluster-inner name=$(context) ip=$(ip)

cluster-inner:
	cd d/k3d && $(MAKE) build name=$(context)
	-k3d cluster delete $(k3d_name)
	if [[ -x "$$(type -P tailscale)" ]]; then if tailscale ip 2>&1 | grep NeedsLogin; then sudo tailscale up; fi; fi
	k3d cluster create $(k3d_name) --config k3d.yaml --k3s-node-label env=$(k3d_name)@server:0
	docker update --restart=no k3d-$(k3d_name)-server-0
	docker exec k3d-$(k3d_name)-server-0 touch /etc/passwd

vault-unseal:
	pass Unseal_Key_1 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_3 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_5 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal

vault-seal:
	-env VAULT_TOKEN="$$(pass Initial_Root_Token)" VAULT_ADDR=http://localhost:8200 vault operator seal
	rm -f ~/.vault-token

down:
	-$(MAKE) vault-seal
	-cd ~/.password-store && sudo -u ubuntu git-crypt lock
	-echo yes | gh auth logout --hostname github.com

live:
	@env SSH_AUTH_SOCK="$(shell ls -td /tmp/vscode-ssh-auth-* 2>/dev/null | head -1)" ssh-add -L 2>/dev/null >/dev/null

monitor-loop:
	while true; do $(MAKE) monitor; sleep 30; done

monitor:
	@rm -f ~/.dead; \
		if ! $(MAKE) live 2>/dev/null >/dev/null; then \
			touch ~/.dead; \
			for a in $$(seq 1 60); do \
				if $(MAKE) live 2>/dev/null >/dev/null; then rm -f ~/.dead; break; fi; \
				echo "MAYBE DEAD $$a $$(date)"; sleep 5; done; \
		fi; \
		if test -f ~/.dead; then \
			~/bin/e $(MAKE) down; \
		fi; \
		ls -l ~/.alive || true; \
		if test -f ~/.alive && test "$$(find ~/.alive -mmin +120)"; then \
			~/bin/e $(MAKE) down; \
		fi

