dummy_ip ?= 169.254.32.1

first = $(word 1, $(subst -, ,$@))
second = $(word 2, $(subst -, ,$@))
first_ = $(word 1, $(subst _, ,$@))
second_ = $(word 2, $(subst _, ,$@))

trust-ca:
	sudo security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db etc/ca.crt

macos:
	-$(shell which gpg-agent) --daemon --pinentry-program $(which pinentry-mac)
	for ip in $(dummy_ip); do if ! ifconfig lo0 | grep "inet $$ip"; then sudo ifconfig lo0 alias "$$ip" netmask 255.255.255.255; fi; done;
	ifconfig lo0
	defaults write -g ApplePressAndHoldEnabled -bool false
	-docker context create host --docker host=unix:///var/run/docker.sock

symlinks:
	mark configure symlinks
	bash -x bin/persist-cache

perms:
	mark configure permissions
	if [[ "Linux" == "$(shell uname -s)" ]]; then if test -S /var/run/docker.sock; then sudo chgrp ubuntu /var/run/docker.sock; sudo chmod 770 /var/run/docker.sock; fi; fi
	if test -S /run/containerd/containerd.sock; then sudo chgrp ubuntu /run/containerd/containerd.sock; sudo chmod 770 /run/containerd/containerd.sock; fi
	-chmod 0700 ~/.gnupg/. ~/.gnupg2/.
	-if ! test -f ~/.kube/config; then touch ~/.kube/config; fi
	-chmod 0600 ~/.kube/config

install:
	-$(MAKE) nix-$(shell uname -s)
	$(MAKE) install-inner

install-inner:
	$(MAKE) symlinks perms

	mark configure password-store
	mkdir -p ~/work/password-store
	if test -n "$${GIT_AUTHOR_NAME:-}"; then \
		if ! test -d ~/work/password-store/.git/.; then \
			git clone https://github.com/$${GIT_AUTHOR_NAME}/password-store ~/work/password-store; \
		fi; \
	fi

	mark dotfiles
	if test -n "$${GIT_AUTHOR_NAME:-}"; then \
		mkdir -p ~/.config/coderv2/dotfiles; \
		mkdir -p /home/ubuntu/work/.codespaces/.persistedshare; \
		rm -rf ~/work/.codespaces/.persistedshare/dotfiles; \
		ln -nfs ~/.config/coderv2/dotfiles ~/work/.codespaces/.persistedshare/dotfiles; \
		if ! test -d ~/.dotfiles/.git/.; then \
			nix run .#coder -- dotfiles --yes https://github.com/$${GIT_AUTHOR_NAME}/dotfiles; \
		else \
			(cd ~.dotfiles && ./bootstrap); \
		fi; \
	fi

	mark configure gpg
	if test -d ~/.password-store/home/.gnupg; then rsync -ia ~/.password-store/config/gnupg-config/. ~/.gnupg/.; fi
	$(MAKE) perms
	env GPG_TTY=$$(tty) $(MAKE) init-gpg

	docker context create pod --docker host=tcp://localhost:2375 || true \
		&& docker context create host --docker host=unix:///var/run/docker.sock || true \
        && docker context use host

	mark configure repos

	if nc -z -v localhost 8200 2>/dev/null; then \
		$(MAKE) vault-unseal; \
		fi

	$(MAKE) login

down:
	touch .local/share/code-server/idle

logout:
	-echo yes | gh auth logout --hostname github.com
	-echo RELOADAGENT | gpg-connect-agent

login:
	mark kubeconfig, argocd
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then $(MAKE) kubeconfig; $(MAKE) argocd-login || true; fi
	mark github
	$(MAKE) github-login

github-login:
	if ! gh auth status; then echo Y | gh auth login -p https -h github.com -w; fi
	-gh extension install cli/gh-webhook
	if test -n "$${GIT_AUTHOR_NAME:-}"; then pass GHCR_TOKEN | docker login ghcr.io -u $$GIT_AUTHOR_NAME --password-stdin; fi

pull-repos: # Pull dev, app, home, and password-store repos
	for a in . .dotfiles .password-store; do (echo; echo "$$a"; cd "$$a" && git pull) || true; done

ec2:
	pass hello
	@cat etc/ec2-user-data.template \
		| sed 's#_CONTROLIP_#'$$(host k3d-control.$$(wait-tailscale-domain | cut -d. -f2-) | awk '{print $$NF}')'#' \
		| sed 's#_TSKEY_#'$$(pass k3d-control-tskey)'#' \
		| sed 's#_K3STOKEN_#'$$(docker --context host exec k3d-control-server-0 cat /var/lib/rancher/k3s/server/node-token)'#' \
		| control apply -f -

nix:
	if ! type -P nix; then . ~/.nix-profile/etc/profile.d/nix.sh; fi && $(MAKE) nix-$(shell uname -s)

nix-Linux-bootstrap:
	sh <(curl -L https://nixos.org/nix/install) --no-daemon

nix-Darwin-bootstrap:
	sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume --daemon

nix-reinstall:
	nix profile list | tail -n +2 | awk '{print $$NF}' | xargs nix profile remove
	$(MAKE) nix

nix-gc:
	nix-store --gc

nix-Linux:
	export LC_ALL=C.UTF-8 && if ! test -x ~/.nix-profile/bin/nix; then $(MAKE) nix-Linux-bootstrap; fi
	if test "$(shell which direnv pinentry nixpkgs-fmt | wc -l)" != "3"; then export LC_ALL=C.UTF-8 && nix profile install nixpkgs\#{nix-direnv,pinentry,nixpkgs-fmt}; fi

nix-Darwin:
	if test "$(shell which direnv pinentry nixpkgs-fmt | wc -l)" != "3"; then export LC_ALL=C.UTF-8 && nix profile install nixpkgs\#{nix-direnv,pinentry,nixpkgs-fmt}; fi
	sudo ln -nfs $(shell which pinentry-mac) .nix-profile/bin/pinentry

prune:
	-docker images | grep :5000/ | grep -E 'weeks|days' | awk '{print $$1 ":" $$2}' | runmany 'docker rmi $$1'
	-docker system prune -f
	-earthly prune

wg-up:
	pass wg_client | base64 -d | sudo tee /etc/wireguard/wg0.conf > /dev/null
	sudo wg-quick up wg0
	$(MAKE) wg-up-inner

wg-up-inner:
	dig @$(shell sudo cat /etc/wireguard/wg0.conf | grep AllowedIPs | awk '{print $$3}' | cut -d/ -f1)3 +noall +answer _apps.internal txt

wg-down:
	sudo wg-quick down wg0nix-bootstrap:

dev:
	docker pull ghcr.io/defn/dev:latest-devcontainer
	code --folder-uri "vscode-remote://dev-container+$$(pwd | perl -pe 's{\s+}{}g' | xxd -p)/home/ubuntu"

up:
	sudo touch /var/run/utmp
	pass hello || gpg-agent --daemon
	pass hello
	screen -DRR tilt -m bash -il -c "~/bin/withde ~ $$(which tilt) up"
