repo ?=
cache ?=
push ?= --push
tilt_port ?= 10350
name ?= $(shell uname -n | cut -d. -f1 | tr A-Z a-z | perl -pe 's{-\d$$}{}')
k3d_name ?= $(name)
context ?= k3d-$(name)
podname ?= $(name)-0
control ?= $(shell echo $(name) | sed s/-0//)
domain ?= $(shell tailscale cert 2>&1 | grep 'For domain' | cut -d'"' -f2 | cut -d. -f2-)
image ?= defn.dev/defn/k3d
app ?= $(shell pwd)/app

dummy_ip ?= 169.254.32.1

DEFN_DEV_HOST      ?= "k3d-$(name).${domain}"
DEFN_DEV_HOST_API  ?= "$${DEFN_DEV_HOST_API:-127.0.0.1}"
DEFN_DEV_HOST_PORT ?= "$${DEFN_DEV_HOST_PORT:-6443}"

trust-ca:
	sudo security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db etc/ca.crt

macos:
	-gpg-agent --daemon
	for ip in $(dummy_ip); do if ! ifconfig lo0 | grep "inet $$ip"; then sudo ifconfig lo0 alias "$$ip" netmask 255.255.255.255; fi; done;
	ifconfig lo0
	defaults write -g ApplePressAndHoldEnabled -bool false

dev:
	@true

dev-meh:
	@if [[ ! -d work/password-store ]]; then if flock -n ~/.home.lock -c '~/bin/e $(MAKE) init'; then true; fi; fi

#	$(MAKE) github-login
#	if [[ ! -f .gitconfig ]]; then \
#		rm -f .gitconfig; \
#		(echo '[credential "https://github.com"]'; echo 'helper = !/usr/local/bin/gh auth git-credential') > .gitconfig; \
#		gh repo clone amanibhavam/password-store work/password-store; \
#		rm -f .gitconfig; \
#		git checkout -- .gitconfig; \
#		fi

symlinks:
	mark -- configure symlinks
	if test -d /work; then sudo install -d -m 0700 -o ubuntu -g ubuntu /work; ln -nfs /work .; fi
	if test -d /mnt/lost+found; then sudo install -d -m 0700 -o ubuntu -g ubuntu /mnt/work; ln -nfs /mnt/work .; fi
	if ! test -d work/.; then mkdir -p work; fi
	if ! test -d app/.; then if test -d work/app/.; then ln -nfs work/app .; fi; fi

perms:
	mark -- configure permissions
	if test -S /var/run/docker.sock; then sudo chgrp docker /var/run/docker.sock; sudo chmod 770 /var/run/docker.sock; fi
	-chmod 0700 ~/.gnupg/. ~/.gnupg2/. ~/.password-store/home/.gnupg
	-chmod 0600 ~/.kube/config

install:
	$(MAKE) init
	$(MAKE) install-site

init:
	$(MAKE) symlinks perms

	mark -- configure password-store
	cd ~/.password-store && git pull

	mark -- configure gpg
	$(MAKE) perms
	rsync -ia ~/.password-store/home/.gnupg/. ~/.gnupg/.
	if echo $$VSCODE_GIT_ASKPASS_NODE | grep local/lib/code-server; then $(MAKE) init-gpg; fi
	if echo $$VSCODE_GIT_ASKPASS_NODE | grep scode-server/server-stable-web; then $(MAKE) init-gpg; fi
	if test -z "$$VSCODE_GIT_ASKPASS_NODE"; then $(MAKE) init-gpg; fi

	mark -- configure git crypt
	$(MAKE) git-crypt-unlock

	mark -- configure kubeconfig, argocd
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then $(MAKE) kubeconfig; $(MAKE) argocd-login || true; fi

	mark -- configure site
	$(MAKE) init-site

tilt:
	env tilt up --context pod --port $(tilt_port) --host "$(shell tailscale ip -4)"

logout:
	-echo yes | gh auth logout --hostname github.com
	-argocd logout argocd-server.argocd.svc
	cd .password-store && git add vault && git add -u vault && (git stash || true) && (git crypt lock || true)
	-echo RELOADAGENT | gpg-connect-agent

login:
	$(MAKE) perms
	rsync -ia ~/.password-store/home/.gnupg/. ~/.gnupg/.
	#$(MAKE) github-login
	cd ~/.password-store && git pull
	$(MAKE) git-crypt-unlock
	$(MAKE) kubeconfig
	-$(MAKE) argocd-login

	$(MAKE) login-site

github-login:
	if ! gh auth status; then echo Y | gh auth login -p https -h github.com -w; fi

argocd-login:
	argocd login --insecure argocd-server.argocd.svc --username admin --password adminadmin \
		|| (argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')" \
				&& argocd account update-password --new-password adminadmin --current-password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')")

git-crypt-unlock:
	cd ~/.password-store && if ! git crypt unlock; then \
		gpg -d .git-crypt-key > key; \
		git crypt unlock key; \
		rm -f key; \
		fi

kubeconfig:
	-sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo cp ~/etc/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then \
		kubectl config set-cluster pod --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
		kubectl config set-credentials pod --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"; \
		kubectl config set-context pod --cluster=pod --user=pod; \
		kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
		kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"; \
		kubectl config set-context argocd --cluster=pod --user=argocd --namespace argocd; \
		kubectl config use-context pod; \
		skaffold config set --kube-context pod local-cluster true; \
		fi
	#kumactl config control-planes add --overwrite --name pod --address http://kuma-control-plane-x-kuma-x-vc0.vc0.svc:5681
	touch ~/.kube/config
	$(MAKE) perms
	-k3d kubeconfig merge -a -d
	-kubectl config set-cluster $(context) --server=https://$(context).$(domain):6443
	k config get-contexts

vclusterconfig:
	if vcluster connect vcluster --kube-config ~/.kube/vcluster --kube-config-context-name vcluster --update-current=false --server vcluster.vcluster.svc.cluster.local; then \
		env KUBECONFIG=~/.kube/config:~/.kube/vcluster kubectl config view --flatten > ~/.kube/config.1; \
		mv ~/.kube/config.1 ~/.kube/config; \
		argocd cluster add vcluster --yes; \
		fi

asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

gh:
	$(MAKE) github-login
	for a in $$(grep curl Earthfile | grep github.com | perl -pe 's{.*github.com/}{}; s{(.*?/.*?)/.*}{$$1}' | sort); do gh release list --repo "$$a" --exclude-drafts | cat | perl -pe 's{[ \t]+}{ }g' | awk '{print $$1,$$(NF-1)}' | sort | sed "s#^#$$a #"; done > .tool-versions-gh

attach:
	code --folder-uri vscode-remote://k8s-container+context=$(context)+namespace=default+podname=$(podname)+name=dev+/home/ubuntu

attach-remo:
	code --folder-uri vscode-remote://k8s-container+context=remo+namespace=default+podname=dev-0+name=dev+/home/ubuntu

join:
	cd d/k3d && $(MAKE) build name=$(context) app=$(app)
	@env DEFN_DEV_HOST=${context}.${domain} $(MAKE) $@-inner join="$$(kubectl config view -o jsonpath='{.clusters[?(@.name == "$(to)")].cluster.server}')" token="$(shell docker exec $(to)-server-0 cat /var/lib/rancher/k3s/server/node-token)" name=$(name)

cluster:
	cd d/k3d && $(MAKE) build name=$(context) app=$(app)
	@$(MAKE) $@-inner name=$(name)

join-inner:
	-k3d cluster delete "$(join)"
	-k3d node create $(name) --role agent --image $(image) --token "$(token)" --cluster "$(join)"

cluster-inner:
	-k3d cluster delete $(name)
	k3d cluster create $(name) --config k3d.yaml --k3s-node-label env=$(name)@server:0 --registry-use 192.168.65.2:5000
	docker update --restart=no $(context)-server-0
	-cd $(app)/tf/$(name) && make init plan apply

vault-unseal:
	pass Unseal_Key_1 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_3 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_5 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal

vault-seal:
	-env VAULT_TOKEN="$$(pass Initial_Root_Token)" VAULT_ADDR=http://localhost:8200 vault operator seal
	rm -f ~/.vault-token
	cd ~/.password-store && git add vault && git add -u vault && git stash

vault-backup:
	-$(MAKE) vault-seal
	cd .password-store && git pull && git add vault && git add -u vault && (git commit -m 'vault backup' || true) && git push
	cd .password-store && git status -sb

live:
	@env SSH_AUTH_SOCK="$(shell ls -td /tmp/vscode-ssh-auth-* 2>/dev/null | head -1)" ssh-add -L 2>/dev/null >/dev/null

monitor-loop:
	while true; do $(MAKE) monitor; sleep 60; done

monitor:
	if test -f ~/.local/share/code-server/heartbeat && test "$$(find ~/.local/share/code-server/heartbeat -mmin +120)"; then \
		~/bin/e $(MAKE) logout; \
	fi

ignore:
	 git clean -nfx | awk '{print $$NF}' | sort > .dockerignoreinclude Makefile.common

restart: # Restart everything
	git pull
	$(MAKE) restart-inner

restart-inner:
	k3d cluster stop $(k3d_name)
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	k3d cluster start $(k3d_name)
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

restart-docker: # Restart Docker Desktop
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	#$(MAKE) dummy-docker

restart-cluster: # Restart k3d
	-k3d cluster stop $(k3d_name)
	-k3d cluster start $(k3d_name)
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

recreate: # Recreate k3d (restarts Docker)
	-k3d cluster delete $(k3d_name)
	-docker rm -f ignore
	$(MAKE) restart-docker
	$(MAKE) cluster

recreate-cluster: # Recreate k3d
	-k3d cluster delete $(k3d_name)
	-docker rm -f ignore
	$(MAKE) cluster

recreate-pod: # Recreate pod
	kubectl delete pod/dev-0
	while true; do if kubectl rollout status statefulset dev --watch; then break; fi; sleep 5; done
	$(MAKE) attach

stop: # Stop k3d
	k3d cluster stop $(k3d_name)

test:
	pass hello
	earthly --allow-privileged --remote-cache=$(cache)defn/cache:updates-images --no-output +test --repo=$${repo:-quay.io/}

images:
	pass hello
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then git pull; git push; if ! test -d work/dev/.; then git clone https://github.com/defn/dev work/dev; fi; cd work/dev && git pull && $(MAKE) $@; else repo=$(repo); earthly --remote-cache=$(cache)defn/cache:updates-$@ --no-output $(push) +images --repo=$${repo:-quay.io/}; fi

amd arm:
	pass hello
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then git pull; git push; cd work/dev && git pull && $(MAKE) $@; else repo=$(repo) earthly --cache-from=$(cache)defn/cache:updates-images --remote-cache=$(cache)defn/cache:updates-$@ --no-output $(push) +"$@" --repo=$${repo:-}; fi

local:
	if [[ "$(shell pwd)" == "$(HOME)" ]]; then git pull; git push; if ! test -d work/dev/.; then git clone https://github.com/defn/dev work/dev; fi; cd work/dev && git pull && $(MAKE) $@; else earthly --cache-from=$(cache)defn/cache:updates-images --no-output --push +images --repo=192.168.65.2:5000/; fi

shell:
	docker run --rm -ti $(repo)defn/dev bash -l

cert:
	-k --context pod create ns traefik
	touch meh.json; chmod 0600 meh.json
	-k --context pod create -n traefik secret generic default-certificate --from-file=meh.json
	v write pki/issue/gyre.defn.dev common_name="$(DEFN_DEV_HOST)" alt_names="hello.demo.svc.cluster.local,*.remocal.net" ip_sans="169.254.32.1" ttl=120h -format=json | jq .data > meh.json
	k --context pod patch -n traefik secret default-certificate --type='json' -p='[{"op" : "replace" ,"path" : "/data/tls.key" ,"value" : "'$$(cat meh.json | jq -r '.private_key | @base64')'"}]'
	k --context pod patch -n traefik secret default-certificate --type='json' -p='[{"op" : "replace" ,"path" : "/data/tls.crt" ,"value" : "'$$(cat meh.json | jq -r '.certificate | @base64')'"}]'
	rm -f meh.json

provision-digital-ocean:
	echo k3d 5.4.4 >> .tool-versions
	bin/e asdf install k3d
	bin/e make cluster

debug-host:
	pod debug "node/$$(pod get nodes -o json | jq -r '.items[0].metadata.name')" --image quay.io/defn/dev -it -- bash

immanent:
	env DEFN_DEV_HOST_PORT=6444 DEFN_DEV_HOST_API=host.k3d.internal $(MAKE) this name=immanent

grove:
	$(MAKE) macos
	env DEFN_DEV_MACOS=1 DEFN_DEV_HOST_PORT=6443 DEFN_DEV_HOST_API=127.0.0.1 $(MAKE) this name=grove

this:
	git pull
	cd app && git pull
	cd ~/.password-store && git pull
	-$(MAKE) macos
	rm -rf tmp
	mkdir tmp
	mkdir -p tmp/$(name)/var/lib/tailscale
	mkdir -p tmp/$(name)/var/lib/tailscale/pod
	(cd tmp/$(name) && pass tailscale_k3d-$(name) | base64 -d | tar xvf -)
	(cd tmp/$(name)/var/lib/tailscale/pod && pass tailscale_$(name)-0 | base64 -d | tar xvf -)
	env DEFN_DEV_ARCHIVE="$$(cd tmp/$(name) && tar cvf - . | base64 | xargs | sed 's# ##g')" \
		$(MAKE) cluster name=$(name)
	docker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i iptables -t filter -F DOCKER-ISOLATION-STAGE-2
	if test -z "$(DEFN_DEV_MACOS)"; then argocd cluster add --yes --upsert k3d-$(name); pod apply -f $(app)/e/k3d-$(name).yaml; fi
	if test -n "$(DEFN_DEV_MACOS)"; then \
		if kubectl rollout -n default status statefulset $(name) --watch; then \
			rsync -ia ~/.password-store/ ubuntu@$(name)-0:/work/password-store --progress --delete; \
			rsync -ia $(app)/ ubuntu@$(name)-0:/work/app --progress --delete --exclude .terraform; \
		fi; \
		kubectl rollout -n argocd status deployment argocd-server --watch; \
	fi

registry:
	-k3d registry create registry --port 0.0.0.0:5000
	pod apply -f etc/local-registry-hosting.yaml
