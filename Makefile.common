repo ?=
cache ?=
push ?= --push
tilt_port ?= 0
name ?= $(shell uname -n | cut -d. -f1 | tr A-Z a-z | perl -pe 's{-\d$$}{}')
k3d_name ?= $(name)
context ?= k3d-$(name)
podname ?= $(name)-0
control ?= $(shell echo $(name) | sed s/-0//)
domain ?= $(shell tailscale cert 2>&1 | grep 'For domain' | cut -d'"' -f2 | cut -d. -f2-)
image ?= defn.dev/defn/k3d
app ?= $(shell pwd)/app
node ?= k3d-control-server-0

dummy_ip ?= 169.254.32.1

DEFN_DEV_HOST      ?= "k3d-$(name).${domain}"
DEFN_DEV_HOST_API  ?= "$${DEFN_DEV_HOST_API:-127.0.0.1}"
DEFN_DEV_HOST_PORT ?= "$${DEFN_DEV_HOST_PORT:-6443}"

first = $(word 1, $(subst -, ,$@))
second = $(word 2, $(subst -, ,$@))

trust-ca:
	sudo security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db etc/ca.crt

macos:
	-gpg-agent --daemon
	for ip in $(dummy_ip); do if ! ifconfig lo0 | grep "inet $$ip"; then sudo ifconfig lo0 alias "$$ip" netmask 255.255.255.255; fi; done;
	ifconfig lo0
	defaults write -g ApplePressAndHoldEnabled -bool false
	-$(MAKE) registry

symlinks:
	mark -- configure symlinks
	sudo install -d -m 0700 -o ubuntu -g ubuntu /work
	ln -nfs /work .
	ln -nfs work/app .

perms:
	mark -- configure permissions
	if test -S /var/run/docker.sock; then sudo chgrp docker /var/run/docker.sock; sudo chmod 770 /var/run/docker.sock; fi
	if test -S /run/containerd/containerd.sock; then sudo chgrp docker /run/containerd/containerd.sock; sudo chmod 770 /run/containerd/containerd.sock; fi
	-chmod 0700 ~/.gnupg/. ~/.gnupg2/. ~/.password-store/home/.gnupg
	-if ! test -f ~/.kube/config; then touch ~/.kube/config; fi
	-chmod 0600 ~/.kube/config

build:
	$(MAKE) build-site

install:
	$(MAKE) symlinks perms

	mark -- configure password-store, gpg
	mkdir -p ~/work/password-store
	cd ~/.password-store && rm -rf .git && oras pull --plain-http --allow-path-traversal 169.254.32.1:5000/defn/bootstrap:password-store && git reset --hard && git clean -fd
	rsync -ia ~/.password-store/home/.gnupg/. ~/.gnupg/.
	$(MAKE) perms
	env GPG_TTY=$$(tty) $(MAKE) init-gpg

	mark -- configure repos
	mkdir -p ~/work/app
	(set -x; cd ~/work/app && rm -rf .git && oras pull --plain-http --allow-path-traversal 169.254.32.1:5000/defn/bootstrap:app && git fetch && git reset --hard origin/master)

	$(MAKE) login

	mark -- configure site
	$(MAKE) install-site

tilt:
	pass hello
	env tilt up --context pod --port $(tilt_port) --host 127.0.0.1 --stream

logout:
	-echo yes | gh auth logout --hostname github.com
	-argocd logout argocd-server.argocd.svc
	-echo RELOADAGENT | gpg-connect-agent

login:
	mark -- configure kubeconfig, argocd
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then $(MAKE) kubeconfig; $(MAKE) argocd-login || true; fi

	$(MAKE) login-site

github-login:
	if ! gh auth status; then echo Y | gh auth login -p https -h github.com -w; fi

argocd-login:
	if pod get ns argocd 2>/dev/null; then \
	if ! argocd app list 2>/dev/null >/dev/null; then \
		argocd login --insecure argocd-server.argocd.svc --username admin --password adminadmin 2>/dev/null \
			|| (argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')" \
					&& argocd account update-password --new-password adminadmin --current-password "$$(kubectl --context argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')"); \
		fi; fi

git-crypt-unlock:
	cd ~/.password-store && if ! git crypt unlock; then \
		gpg -d .git-crypt-key > key; \
		git crypt unlock key; \
		rm -f key; \
		fi

kubeconfig:
	-sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo cp ~/etc/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	if test -f /run/secrets/kubernetes.io/serviceaccount/ca.crt; then \
		kubectl config set-cluster pod --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
		kubectl config set-credentials pod --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"; \
		kubectl config set-context pod --cluster=pod --user=pod; \
		if pod get ns argocd; then \
			kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt; \
			kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"; \
			kubectl config set-context argocd --cluster=pod --user=argocd --namespace argocd; \
			fi; \
		fi
	touch ~/.kube/config
	$(MAKE) perms
	if env DOCKER_CONTEXT=host docker ps 2>/dev/null; then env DOCKER_CONTEXT=host k3d kubeconfig merge -a -d; fi
	-kubectl config use-context pod
	k config get-contexts

vc%:
	$(MAKE) connect-$@
	argocd cluster add $@ --yes --upsert

connect-%:
	# pod -n vc1 get secrets vc-vcluster -o json | jq -r '.data.config | @base64d' | yq '.clusters[].cluster.server |= "https://vcluster.vc1.svc.cluster.local"' -y > ~/.kube/vc1
	if vcluster connect vcluster --context pod --namespace $(second) --kube-config ~/.kube/$(second) --kube-config-context-name $(second) --update-current=false --server vcluster.$(second).svc.cluster.local; then \
		set -x; \
		env KUBECONFIG=~/.kube/$(second):~/.kube/config kubectl config view --flatten > ~/.kube/config.$(second); \
		mv ~/.kube/config.$(second) ~/.kube/config; \
		fi

pending: # Generate pending version updates
	$(MAKE) pending-gh
	$(MAKE) pending-asdf

pending-images:
	(pod get pods --all-namespaces -o json | gron | grep '\.image ='  | cut -d'"' -f2 | grep -v 169.2543.32.1:5000/ | grep -v /defn/dev: | grep -v /workspace:latest) | sed 's#@.*##' | grep -v ^sha256 | sort -u > .image-versions.txt

sync: # Sync all the artifacts
	$(MAKE) pull-repos
	-$(MAKE) registry
	$(MAKE) sync-images

sync-images: # Sync images to local cache
	cat .image-versions.txt | bin/runmany 4 'skopeo copy docker://$$1 docker://127.0.0.1:5000/$${1#*/} --multi-arch all --dest-tls-verify=false'

pending-asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

pending-gh:
	$(MAKE) github-login
	for a in $$(grep curl Earthfile | grep github.com | perl -pe 's{.*github.com/}{}; s{(.*?/.*?)/.*}{$$1}' | sort); do gh release list --repo "$$a" --exclude-drafts | cat | perl -pe 's{[ \t]+}{ }g' | awk '{print $$1,$$(NF-1)}' | sort | sed "s#^#$$a #"; done > .tool-versions-gh

cluster:
	cd d/k3d && $(MAKE) build name=$(context) app=$(app)
	@$(MAKE) $@-inner name=$(name)

cluster-inner:
	-k3d cluster delete $(name)
	@k3d cluster create $(name) \
		--k3s-node-label env=$(name)@server:0 \
		--config etc/k3d.yaml \
		--registry-config etc/registries.yaml $(DEFN_DEV_HOST_PORTMAPS) \
		--env bar=baz@server:0
	docker update --restart=no $(context)-server-0
	-cd $(app)/tf/$(name) && make init get plan apply

vault-unseal:
	pass Unseal_Key_1 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_3 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal
	pass Unseal_Key_5 | curl -sSL -X PUT -d @<(jq -nrR 'inputs|{key:.}|@json') http://localhost:8200/v1/sys/unseal

vault-seal:
	-env VAULT_TOKEN="$$(pass Initial_Root_Token)" VAULT_ADDR=http://localhost:8200 vault operator seal
	rm -f ~/.vault-token
	cd ~/.password-store && git add vault && git add -u vault && git stash

vault-backup:
	-$(MAKE) vault-seal
	cd .password-store && git pull && git add vault && git add -u vault && (git commit -m 'vault backup' || true) && git push
	cd .password-store && git status -sb

rebuild:
	$(MAKE) build
	ctr -n k8s.io i pull --plain-http 169.254.32.1:5000/workspace:latest

shell:
	docker run --rm -ti $(repo)defn/dev bash -l

debug-host:
	pod debug "node/$$(pod get nodes -o json | jq -r '.items[0].metadata.name')" --image 169.254.32.1:5000/workspace -it -- bash

this:
	rm -rf tmp
	mkdir tmp
	mkdir -p tmp/$(name)/var/lib/tailscale
	mkdir -p tmp/$(name)/var/lib/tailscale/pod
	(cd tmp/$(name) && pass tailscale_k3d-$(name) | base64 -d | tar xvf -)
	(cd tmp/$(name)/var/lib/tailscale/pod && pass tailscale_$(name)-0 | base64 -d | tar xvf -)
	env DEFN_DEV_ARCHIVE="$$(cd tmp/$(name) && tar cvf - . | base64 | xargs | sed 's# ##g')" \
		$(MAKE) cluster name=$(name)
	doocker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i iptables -t filter -F DOCKER-ISOLATION-STAGE-2
	cd app/k/k3d-$(name)-secrets && make secrets context=k3d-$(name)
	if test -z "$(DEFN_DEV_MACOS)"; then \
		argocd cluster add --yes --upsert k3d-$(name); \
		pod apply -f $(app)/e/k3d-$(name).yaml; \
	else \
		(cd ~/.password-store && oras push localhost:5000/defn/bootstrap:password-store .git:+tar); \
		(cd app && oras push localhost:5000/defn/bootstrap:app .git:+tar); \
		kubectl --context k3d-$(name) rollout -n default status statefulset $(name) --watch; \
	fi

registry:
	-k3d registry create registry --port 0.0.0.0:5000
	#pod apply -f etc/local-registry-hosting.yaml

pull-repos: # Pull dev, app, home, and password-store repos
	git pull
	cd && git pull
	cd app && git pull
	cd && cd .password-store && git pull

circus global: # Provision circus from control plane
	env DEFN_DEV_HOST_PORT=6444 DEFN_DEV_HOST_API=host.k3d.internal \
		DEFN_DEV_NAME=k3d-$@ \
		DOCKER_CONTEXT=host \
		$(MAKE) this name=$@
	docker system prune -f

smiley: # Provision smiley from control plane
	env DEFN_DEV_HOST_PORT=6445 DEFN_DEV_HOST_API=host.k3d.internal \
		DEFN_DEV_NAME=k3d-$@ \
		DOCKER_CONTEXT=host \
		$(MAKE) this name=$@
	docker system prune -f

control: # Provision control plane
	$(MAKE) pull-repos
	$(MAKE) build
	env DEFN_DEV_HOST_PORT=6443 DEFN_DEV_HOST_API=127.0.0.1 \
		DEFN_DEV_NAME=k3d-$@ \
		DEFN_DEV_MACOS=1 \
		DEFN_DEV_HOST_PORTMAPS="-p 443:443@server:0 -p 80:80@server:0" \
		$(MAKE) this name=$@
	docker system prune -f

meh:
	env DIGITALOCEAN_ACCESS_TOKEN="$$(pass DIGITALOCEAN_ACCESS_TOKEN)" \
		doctl compute droplet create meh --region sfo3 --image 118023753 --size s-1vcpu-1gb --tag-name k3d --wait \
		--user-data-file <(cat etc/droplet-user-data-minimal.template)

droplet:
	$(MAKE) dropoff
	env DIGITALOCEAN_ACCESS_TOKEN="$$(pass DIGITALOCEAN_ACCESS_TOKEN)" \
		doctl compute droplet create k3d-control-droplet$(n) --region sfo3 --image 118023753 --size s-1vcpu-1gb --tag-name k3d --wait \
		--user-data-file <(cat etc/droplet-user-data.template \
			| sed 's#_TSKEY_#'$$(pass k3d-control-tskey)'#' \
			| sed 's#_K3STOKEN_#'$$(docker --context host exec k3d-control-server-0 cat /var/lib/rancher/k3s/server/node-token)'#')

dropoff:
	-pod delete -n kube-system secret k3d-control-droplet$(n).node-password.k3s
	-pod delete node k3d-control-droplet$(n)
	-env DIGITALOCEAN_ACCESS_TOKEN="$$(pass DIGITALOCEAN_ACCESS_TOKEN)" \
		doctl compute droplet delete k3d-control-droplet$(n) -f

debug:
	pod debug node/$(node) -it --image=ghcr.io/defn/dev:latest -- bash -il

debug-docker:
	docker run -it --rm --privileged --pid=host alpine:edge nsenter -t 1 -m -u -n -i
