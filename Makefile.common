repo ?= localhost:5000/
repo_from ?= $(repo)
cache ?= $(repo)
push ?= --push
dummy_ip ?= 169.254.32.1
dummy_host ?= 169.254.32.1

dummy:
	sudo true
	docker run --rm -i --privileged --network=host --pid=host alpine nsenter -t 1 -m -u -n -i -- \
		bash -c "ip link add dummy0 type dummy; ip addr add $(dummy_ip)/32 dev dummy0; ip link set dev dummy0 up"
	for ip in $(dummy_ip); do sudo ifconfig lo0 alias "$$ip" netmask 255.255.255.255; done

registry:
	-k3d registry create registry --port 0.0.0.0:5000
	-k3d registry create docker-io --proxy-remote-url https://registry-1.docker.io --port 0.0.0.0:5001

dev:
	-git pull
	@if flock -n ~/.home.lock -c '~/bin/e $(MAKE) init'; then true; fi

init:
	sudo chown ubuntu:ubuntu /var/run/docker.sock ~/work
	cd ~/.password-store && git crypt unlock
	pass hello
	$(MAKE) kubeconfig
	cd && $(MAKE) init-dev
	$(MAKE) init-site
	tilt up --context pod

init-dev:
	argocd login --insecure argocd-server.argocd.svc --username admin --password "$$(kubectl -n argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d')"
	argocd --kube-context argocd app create argocd --repo https://github.com/defn/dev --path k/argocd --dest-namespace argocd --dest-server https://kubernetes.default.svc --directory-recurse --validate=false
	argocd --kube-context argocd app create traefik --repo https://github.com/defn/dev --path k/traefik --dest-namespace traefik --dest-server https://kubernetes.default.svc --directory-recurse --validate=false
	argocd --kube-context argocd app create loft --repo https://github.com/defn/dev --path k/loft --dest-namespace loft --dest-server https://kubernetes.default.svc --directory-recurse --validate=false
	-$(MAKE) sync

kubeconfig:
	sudo cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
	sudo update-ca-certificates
	kubectl config set-cluster pod --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials pod --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context pod --cluster=pod --user=pod
	skaffold config set --kube-context pod local-cluster true
	kubectl config set-cluster argocd --server=https://kubernetes.default.svc.cluster.local --embed-certs --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt
	kubectl config set-credentials argocd --token="$$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
	kubectl config set-context argocd --cluster=pod --user=argocd --namespace argocd
	kubectl config use-context pod

sync:
	argocd --kube-context argocd app sync argocd --local k/argocd --assumeYes --prune
	argocd --kube-context argocd app sync traefik --local k/traefik --assumeYes --prune
	argocd --kube-context argocd app sync loft --local k/loft --assumeYes --prune
	argocd --kube-context argocd app wait argocd
	argocd --kube-context argocd app wait traefik
	argocd --kube-context argocd app wait loft

asdf:
	cat .tool-versions| awk '{print $$1}' | while read -r a; do asdf list-all "$$a" | sed "s#^#$$a #"; done | sort > .tool-versions-all

clean:
	-docker images | grep none | awk '{print $$3}' | runmany 'docker rmi $$1'
	-docker system prune -f
	docker rm -f earthly-buildkitd
	docker volume rm -f earthly-cache
	earthly bootstrap
	touch ~/.registry.txt

images:
	earthly --remote-cache=$(cache)defn/cache:images $(push) +images --repo=$(repo)

updates:
	git pull
	earthly --remote-cache=$(cache)defn/cache:updates $(push) +updates --repo=$(repo) --repo_from=$(repo_from)

shell:
	docker run --rm -ti $(repo)defn/dev bash -l

attach:
	code --folder-uri vscode-remote://k8s-container+context=k3d-k3s-default+namespace=default+podname=dev-0+name=dev+/home/ubuntu

reset:
	-k3d cluster delete
	-docker rm -f ignore
	-osascript -e 'quit app "Docker"'
	open -a Docker
	while ! docker ps; do date; sleep 5; done
	$(MAKE) cluster

cluster:
	-k3d cluster delete
	k3d cluster create --config k3d.yaml \
		--registry-use registry \
		-p "80:30080@loadbalancer" \
		-p "443:30443@loadbalancer" \
		-p "600:30600@loadbalancer" \
		-p "601:30601@loadbalancer" \
		-p "602:30602@loadbalancer" \
		-p "603:30603@loadbalancer" \
		-p "604:30604@loadbalancer" \
		-p "605:30605@loadbalancer" \
		-p "606:30606@loadbalancer" \
		-p "607:30607@loadbalancer" \
		-p "608:30608@loadbalancer" \
		-p "609:30609@loadbalancer" \
		-p "5685:5685@server:0" \
		-p "10001:10001@server:0" \
		-p "10002:10002@server:0" \
		-p "10003:10003@server:0" \
		-p "10004:10004@server:0" \
		-p "10005:10005@server:0" \
		-p "10006:10006@server:0" \
		-p "10007:10007@server:0" \
		-p "10008:10008@server:0" \
		-p "10009:10009@server:0" \
		--k3s-arg "--disable=traefik@all"
	docker exec k3d-k3s-default-server-0 touch /etc/passwd
	kubectl apply -f k/dev/main.yaml
	$(MAKE) argocd
	kubectl rollout status statefulset dev --watch

argocd:
	-kubectl create namespace argocd
	kubectl apply -n argocd -f k/argocd/main.yaml

argocd-admin:
	@kubectl -n argocd get -o json secret argocd-initial-admin-secret | jq -r '.data.password | @base64d' | ssh super pbcopy
	@xdg-open https://$(dummy_host):603

down:
	-bash -c 'rm -vf "$${SSH_AUTH_SOCK}"'
	-cd ~/.password-store && sudo -u ubuntu git-crypt lock
	-echo yes | gh auth logout --hostname github.com
	-pkill [t]ilt

live:
	@env SSH_AUTH_SOCK="$(shell ls -td /tmp/vscode-ssh-auth-* 2>/dev/null | head -1)" ssh-add -L 2>/dev/null >/dev/null

monitor-loop:
	while true; do $(MAKE) monitor; sleep 30; done

monitor:
	@rm -f ~/.dead; \
		if ! $(MAKE) live 2>/dev/null >/dev/null; then \
			touch ~/.dead; \
			for a in $$(seq 1 60); do \
				if $(MAKE) live 2>/dev/null >/dev/null; then rm -f ~/.dead; break; fi; \
				echo "MAYBE DEAD $$a $$(date)"; sleep 5; done; \
		fi; \
		if test -f ~/.dead; then \
			~/bin/e $(MAKE) down; \
		fi; \
		ls -l ~/.alive || true; \
		if test -f ~/.alive && test "$$(find ~/.alive -mmin +120)"; then \
			~/bin/e $(MAKE) down; \
		fi
