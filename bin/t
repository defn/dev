#!/usr/bin/env bash
# t - Tracing wrapper for commands with Honeycomb integration
#
# Usage: t [command] [args...]
#        t start <name> <command> [args...] - Start new trace
#        t build <trace_id> <status> <start> - Complete build trace
#
# Wraps commands with distributed tracing support using buildevents.
# Automatically handles trace IDs and parent IDs from HONEYCOMB_TRACE.
# Falls back to plain execution if buildevents is not available.

set -efu

function main {
	export TRACE_ID="$(echo "${HONEYCOMB_TRACE-}" | cut -d, -f1 | cut -d= -f2)"
	export PARENT_ID="$(echo "${HONEYCOMB_TRACE-}" | cut -d, -f2 | cut -d= -f2)"

	case "${1-}" in
	start)
		STARTED="$(date +%s)"
		shift
		name="$1"
		shift
		export TRACE_ID="${name}-$(date +%s)"
		if type -P buildevents >/dev/null; then
			if [[ -n ${BUILDEVENT_APIKEY-} ]]; then
				if buildevents cmd "${TRACE_ID}" "${TRACE_ID}" "${name}" -- "$@"; then
					t build "${TRACE_ID}" success "${STARTED}"
				else
					t build "${TRACE_ID}" failure "${STARTED}"
				fi
			else
				"$@"
			fi
		else
			"$@"
		fi
		;;
	build)
		shift
		TRACE_ID="$1"
		shift
		status="$1"
		shift
		start="$1"
		shift
		buildevents build "${TRACE_ID}" "${start}" "${status}"
		;;
	*)
		name="$1"
		shift
		if [[ -n ${PARENT_ID} ]]; then
			if type -P buildevents >/dev/null; then
				if [[ -n ${BUILDEVENT_APIKEY-} ]]; then
					buildevents cmd "${TRACE_ID}" "${PARENT_ID}" "${name}" -- "$@"
				else
					"$@"
				fi
			else
				"$@"
			fi
		else
			t start "${name}" "$@"
		fi
		;;
	esac
}

main "$@"
