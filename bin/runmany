#!/usr/bin/env bash
# runmany - Run commands in parallel with xargs
#
# Usage: runmany [procs] [args_per_proc] command [args...] [-- command_args]
#        echo items | runmany [procs] [args_per_proc] command
#
# Options:
#   procs         - Number of parallel processes (default: 1)
#   args_per_proc - Number of arguments per process (default: 1)
#
# Reads items from arguments or stdin and executes command in parallel.
# Arguments after -- are passed directly to the command.

function main {
	local cnt_proc="1"
	local cnt_args="1"

	local args_command=()
	local args_dash=()
	local fl_args=

	# process args after --
	while [[ $# -gt 0 ]]; do
		if [[ $1 == "--" && -z ${fl_args} ]]; then
			shift
			fl_args=1
			continue
		fi

		if [[ -n ${fl_args} ]]; then
			args_dash+=("$1")
		else
			args_command+=("$1")
		fi
		shift
	done

	set -- "${args_command[@]}"

	# check if number of processess is specified
	if [[ ${1-} =~ ^[1-9][0-9]*$ ]]; then
		cnt_proc="$1"
		shift
		# check if number of args is specified
		if [[ ${1-} =~ ^[1-9][0-9]*$ ]]; then
			cnt_args="$1"
			shift
		fi
	fi

	if [[ -z ${1-} ]]; then
		echo "ERROR: missing command" 1>&2
		return 1
	fi

	local cmd
	if [[ -n ${fl_args} ]]; then
		cmd="$*"
		set --
	else
		cmd="$1"
		shift
	fi

	if [[ ${#args_dash[@]} -gt 0 ]]; then
		set -- "$@" "${args_dash[@]}" # using :- in case of empty array results in empty string quoted
	fi

	local xopts=
	case "$(uname -s)" in
	Linux)
		xopts="-r"
		;;
	*)
		true
		;;
	esac

	# check if any arguments
	# shellcheck disable=SC2312
	if [[ $# -gt 0 ]]; then
		while [[ $# -gt 0 ]]; do
			echo "${1// /\\ }"
			shift || true
		done
	else
		# otherwise read arguments from stdin
		cat || true
	fi | xargs ${xopts:+${xopts}} -n "${cnt_args}" -P "${cnt_proc}" bash -c "${cmd}" ""
}

main "$@"
